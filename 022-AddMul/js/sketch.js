// Generated by CoffeeScript 2.5.1
var Button, LONG, N, SHORT, a, ass, b, buttons, draw, getParts, handle, inp, keyPressed, mousePressed, newGame, player, range, score, setup, start, state;

LONG = 60; // seconds before no player wins

SHORT = 20; // seconds player may enter the answer

N = 20;

a = null;

b = null;

inp = null;

score = [0, 0];

buttons = [];

state = -1; // -2:start -1:visible 0:Left player 1:Right player 2:show score

range = _.range;

start = null; // starttid. 60 sek för första, 20 sek för andra

Button = class Button {
  constructor(prompt, x, y, click) {
    this.prompt = prompt;
    this.x = x;
    this.y = y;
    this.click = click;
    this.r = 50;
  }

  draw() {
    circle(this.x, this.y, 2 * this.r);
    return text(this.prompt, this.x, this.y);
  }

  inside(mx, my) {
    return this.r > dist(this.x, this.y, mx, my);
  }

};

ass = function(a, b) {
  if (_.isEqual(a, b)) {
    return;
  }
  console.log("");
  console.log(a);
  return console.log(b);
};

newGame = function() {
  a = _.random(-N, N);
  b = _.random(-N, N);
  return start = new Date(); // LONG
};

draw = function() {
  var button, j, len, nextstate, ref, secs;
  nextstate = state;
  background(128);
  if (state === 0 || state === 1) {
    buttons[2].draw();
    secs = Math.floor((new Date() - start) / 1000); // seconds
    text(SHORT - secs, width / 2, 50);
    if (secs >= SHORT) {
      score[1 - state] += 1;
      inp.hide();
      nextstate = -2;
    }
  }
  if (state === (-1) || state === 0 || state === 1 || state === 2) {
    text(`a*b = ${a * b}`, width / 2, 150);
    text(`a+b = ${a + b}`, width / 2, 250);
  }
  if (state === (-2) || state === 2) {
    buttons[2].draw();
    inp.hide();
  }
  if (state === -1) {
    ref = [buttons[0], buttons[1]];
    for (j = 0, len = ref.length; j < len; j++) {
      button = ref[j];
      button.draw();
    }
    secs = Math.floor((new Date() - start) / 1000); // seconds
    text(LONG - secs, width / 2, 50);
    if (secs >= LONG) {
      inp.hide();
      nextstate = -2;
    }
  }
  text(score[0], 50, 50);
  text(score[1], width - 50, 50);
  return state = nextstate;
};

getParts = function(arr) {
  var minus, space;
  space = arr.lastIndexOf(' ');
  minus = arr.lastIndexOf('-');
  if (space > 0) {
    return [arr.slice(0, space), arr.slice(space + 1)];
  } else if (minus >= 0) {
    return [arr.slice(0, minus), arr.slice(minus)];
  } else {
    return [];
  }
};

ass(["1", "-7"], getParts("1-7"));

ass(["1", "-7"], getParts("1 -7"));

ass(["-7", "1"], getParts("-7 1"));

ass(["1", "7"], getParts("1 7"));

ass(["-7", "-7"], getParts("-7-7"));

player = function(i) {
  state = i;
  if (state === 0 || state === 1) {
    inp.show();
    inp.elt.focus();
    event.preventDefault();
    inp.value();
    return start = new Date(); // SHORT
  }
};

keyPressed = function(event) {
  return handle(key);
};

handle = function(key) {
  var arr, c, d, success;
  if (state === -2) {
    if (key === 'Enter') {
      newGame();
      return state = -1;
    }
  } else if (state === -1) {
    if (key === 'z') {
      player(0);
    }
    if (key === 'm') {
      return player(1);
    }
  } else if (state === 0 || state === 1) {
    if (key === 'Enter') {
      arr = inp.value();
      inp.value("");
      inp.hide();
      arr = getParts(arr);
      success = false;
      if (arr.length === 2) {
        c = parseInt(arr[0]);
        d = parseInt(arr[1]);
        success = a === c && b === d || a === d && b === c;
      }
      if (success) {
        score[state] += 1;
      } else {
        score[1 - state] += 1;
      }
      return state = 2;
    }
  } else if (state === 2) {
    if (key === 'Enter') {
      newGame();
      return state = -1;
    }
  }
};

setup = function() {
  createCanvas(600, 600);
  textSize(40);
  textAlign(CENTER, CENTER);
  score = [0, 0];
  buttons.push(new Button('z', 60, height - 60, function() {
    return player(0);
  }));
  buttons.push(new Button('m', width - 60, height - 60, function() {
    return player(1);
  }));
  buttons.push(new Button('enter', width / 2, height - 60, function() {
    return handle('Enter');
  }));
  inp = createInput('');
  inp.id = 'input';
  inp.hide();
  inp.style('font-size', '30px', 'color', '#ff0000');
  inp.position(width / 2 - 50, 350);
  inp.size(100);
  return newGame();
};

mousePressed = function() {
  var button, j, len, results;
  results = [];
  for (j = 0, len = buttons.length; j < len; j++) {
    button = buttons[j];
    if (button.inside(mouseX, mouseY)) {
      results.push(button.click());
    } else {
      results.push(void 0);
    }
  }
  return results;
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2021\022-AddMul\coffee\sketch.coffee