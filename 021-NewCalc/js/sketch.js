// Generated by CoffeeScript 2.4.1
var answers, bToggle, button, clear, clickList, curr, down, errorlabel, exec, execute, input, label, lista, memory, range, safeeval, toggle, toggleMode, transpile, up, updateList;

label = null;

input = null;

up = null;

down = null;

exec = null;

curr = -1;

lista = null;

errorlabel = null;

bToggle = null;

toggleMode = 1;

answers = {};

range = _.range;

memory = {}; //{'a':12,'b':23,'c':3,'d':4,'e':5,'add':'a+b','mul':'a*b', 'sq': 'a*a', 'f': '(x) -> x*x', 'g':'f 9','h':0}

button = function(prompt, click) {
  var res;
  res = document.createElement('button');
  res.innerHTML = prompt;
  res.style = 'width:80px; font-family:courier;';
  res.onclick = click;
  document.body.appendChild(res);
  return res;
};

updateList = function() {
  var key, option, results, row;
  lista.size = -1 + _.size(memory);
  lista.length = 0;
  results = [];
  for (key in memory) {
    row = memory[key];
    if (key === 'ans') {
      if (typeof answers.ans === 'function') {
        results.push(label.innerText = JSON.stringify(row));
      } else {
        results.push(label.innerText = JSON.stringify(answers[key]));
      }
    } else {
      option = document.createElement("option");
      if (typeof answers[key] === 'function') {
        option.innerText = `${key} = ${row}`;
      } else if (toggleMode === 0) {
        option.innerText = `${key} = ${row}`;
      } else {
        option.innerText = `${key} = ${JSON.stringify(answers[key])}`;
      }
      option.value = key;
      results.push(lista.appendChild(option));
    }
  }
  return results;
};

execute = function() {
  var arr, err, item, key, val, value;
  errorlabel.innerHTML = "";
  try {
    if (input.value.length > 0) {
      arr = input.value.split('=');
      arr = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = arr.length; i < len; i++) {
          item = arr[i];
          results.push(item.trim());
        }
        return results;
      })();
      // delete?
      if (input.value.slice(-1) === '=') {
        delete memory[arr[0]];
        delete answers[arr[0]];
        eval(`${arr[0]}=undefined`);
        updateList();
        return;
      }
      arr = input.value.split('=');
      arr = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = arr.length; i < len; i++) {
          item = arr[i];
          results.push(item.trim());
        }
        return results;
      })();
      [key, value] = arr;
      if (!value) {
        answers.ans = eval("ans = " + transpile(`${key}`));
        memory.ans = key;
      } else {
        val = eval(`${key} = ` + transpile(`${value}`));
        answers[key] = val;
        answers.ans = val;
        memory[key] = value;
        memory.ans = value;
      }
    }
    for (key in memory) {
      answers[key] = eval(`${key} = ` + transpile(`${memory[key]}`));
    }
    updateList();
    return input.select();
  } catch (error) {
    err = error;
    return errorlabel.innerHTML = err;
  }
};

transpile = function(code) {
  var result;
  result = CoffeeScript.compile(code, {
    bare: true
  });
  return result.replace(/\n/g, '');
};

safeeval = function(key, value) {
  var err;
  try {
    label.innerHTML = key === '' ? transpile(eval(value)) : transpile(key + '=' + value);
    return true;
  } catch (error) {
    err = error;
    errorlabel.innerHTML = err;
    return false;
  }
};

clickList = function(item) {
  var key;
  key = item.srcElement.value;
  if (key) {
    return input.value = `${key} = ${memory[key]}`;
  }
};

toggle = function() {
  toggleMode = 1 - toggleMode;
  bToggle.innerHTML = ['formulas', 'values'][toggleMode];
  return updateList();
};

clear = function() {
  input.value = "";
  return label.innerHTML = "";
};

document.body.onload = function() {
  var bShare;
  clear = button('clear', clear);
  bToggle = button('values', toggle);
  bShare = button('share', function() {});
  label = document.createElement("p");
  label.style = 'font-family:courier; height:10px; width:99%;';
  document.body.appendChild(label);
  input = document.createElement("input");
  input.style = 'width:97%; font-family:courier; margin:5px;';
  document.body.appendChild(input);
  input.onkeypress = function(e) {
    if (e.which === 13) {
      return execute();
    }
  };
  lista = document.createElement("select");
  lista.onclick = clickList;
  lista.size = 20;
  lista.style = 'width:99%;  overflow-y:auto; font-family:courier; margin:5px;';
  document.body.appendChild(lista);
  errorlabel = document.createElement("p");
  errorlabel.style = 'font-family:courier; color:red; width:99%';
  document.body.appendChild(errorlabel);
  return execute();
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2021\021-NewCalc\coffee\sketch.coffee