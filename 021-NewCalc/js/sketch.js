// Generated by CoffeeScript 2.4.1
var answers, bToggle, button, clear, clickList, config, decode, encode, errorlabel, execute, getParameters, input, label, lista, memory, range, toggle, toggleMode, transpile, updateList,
  indexOf = [].indexOf;

label = null;

input = null;

lista = null;

errorlabel = null;

bToggle = null;

toggleMode = 1;

answers = {};

range = _.range;

memory = {
  'a': 12,
  'b': 23,
  'c': 3,
  'd': 4,
  'e': 5,
  'add': 'a+b',
  'mul': 'a*b',
  'sq': 'a*a',
  'f': '(x) -> x*x',
  'g': 'f 9',
  'h': 'i*i for i in range a'
};

config = {};

getParameters = function(h = window.location.href) {
  var arr, f, key, pairs, s, value;
  arr = h.split('?');
  if (arr.length !== 2) {
    return {};
  }
  s = arr[1];
  if (s === '') {
    return {};
  }
  pairs = (function() {
    var i, len, ref, results;
    ref = s.split('&');
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      f = ref[i];
      results.push(f.split('='));
    }
    return results;
  })();
  pairs = (function() {
    var i, len, results;
    results = [];
    for (i = 0, len = pairs.length; i < len; i++) {
      [key, value] = pairs[i];
      results.push([key, decodeURIComponent(value)]);
    }
    return results;
  })();
  return _.fromPairs(pairs);
};

encode = function() {
  var s;
  s = encodeURI(JSON.stringify(memory));
  s = s.replace(/=/g, '%3D');
  s = s.replace(/\?/g, '%3F');
  return window.open('?content=' + s + '&config=' + encodeURI(JSON.stringify(config)));
};

decode = function() {
  var parameters;
  memory = {};
  if (indexOf.call(window.location.href, '?') >= 0) {
    parameters = getParameters();
    if (parameters.content) {
      memory = parameters.content;
      memory = JSON.parse(memory);
    }
    if (parameters.config) {
      return config = JSON.parse(parameters.config);
    }
  }
};

button = function(prompt, click) {
  var res;
  res = document.createElement('button');
  res.innerHTML = prompt;
  res.style = 'width:80px; font-family:courier;';
  res.onclick = click;
  document.body.appendChild(res);
  return res;
};

updateList = function() {
  var key, option, results, row;
  label.innerHTML = "";
  lista.size = _.size(memory);
  lista.length = 0;
  results = [];
  for (key in memory) {
    row = memory[key];
    if (key === 'ans') {
      if (typeof answers.ans === 'function') {
        results.push(label.innerHTML = row);
      } else {
        if (answers.ans === '') {
          results.push(label.innerHTML = answers.ans);
        } else {
          results.push(label.innerHTML = JSON.stringify(answers.ans));
        }
      }
    } else {
      option = document.createElement("option");
      if (typeof answers[key] === 'function') {
        option.innerText = `${key} = ${row}`;
      } else if (toggleMode === 0) {
        option.innerText = `${key} = ${row}`;
      } else {
        option.innerText = `${key} = ${JSON.stringify(answers[key])}`;
      }
      option.value = key;
      results.push(lista.appendChild(option));
    }
  }
  return results;
};

execute = function() {
  var arr, err, item, key, s;
  label.innerHTML = '';
  answers.ans = "";
  errorlabel.innerHTML = "";
  try {
    arr = input.value.split(' = ');
    arr = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = arr.length; i < len; i++) {
        item = arr[i];
        results.push(item.trim());
      }
      return results;
    })();
    // delete?
    if (input.value.slice(-1) === '=') {
      delete memory[arr[0]];
      delete answers[arr[0]];
      eval(`${arr[0]}=undefined`);
      updateList();
      return;
    }
    if (arr.length === 2 && arr[0] in memory) {
      memory[arr[0]] = arr[1];
    }
    s = (function() {
      var results;
      results = [];
      for (key in memory) {
        if (key !== 'ans') {
          results.push(`answers.${key} = (${key} = (${memory[key]}))`);
        }
      }
      return results;
    })();
    if (arr.length === 1 && arr[0] !== '') {
      s.push(`answers.ans = (${arr[0]})`);
    }
    if (arr.length === 2) {
      s.push(`answers.${arr[0]} = (${arr[0]} = (${arr[1]}))`);
    }
    eval(transpile(s.join(';')));
    if (arr.length === 1) {
      memory.ans = arr[0];
    }
    if (arr.length === 2) {
      memory[arr[0]] = arr[1];
    }
    updateList();
    return input.select();
  } catch (error) {
    err = error;
    return errorlabel.innerHTML = err.message;
  }
};

transpile = function(code) {
  var result;
  result = CoffeeScript.compile(code, {
    bare: true
  });
  return result.replace(/\n/g, '');
};

clickList = function(item) {
  var key;
  key = item.srcElement.value;
  if (key) {
    return input.value = `${key} = ${memory[key]}`;
  }
};

toggle = function() {
  toggleMode = 1 - toggleMode;
  bToggle.innerHTML = ['formulas', 'values'][toggleMode];
  return updateList();
};

clear = function() {
  input.value = "";
  return label.innerHTML = "";
};

document.body.onload = function() {
  var bShare;
  decode();
  clear = button('clear', clear);
  bToggle = button('values', toggle);
  bShare = button('share', function() {
    return encode();
  });
  label = document.createElement("p");
  label.style = 'font-family:courier; height:10px; width:99%;';
  document.body.appendChild(label);
  input = document.createElement("input");
  input.style = 'width:97%; font-family:courier; margin:5px;';
  document.body.appendChild(input);
  input.onkeypress = function(e) {
    if (e.which === 13) {
      return execute();
    }
  };
  lista = document.createElement("select");
  lista.onclick = clickList;
  lista.size = 20;
  lista.style = 'width:99%;  overflow-y:auto; font-family:courier; margin:5px;';
  document.body.appendChild(lista);
  errorlabel = document.createElement("p");
  errorlabel.style = 'font-family:courier; color:red; width:99%';
  document.body.appendChild(errorlabel);
  return execute();
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2021\021-NewCalc\coffee\sketch.coffee