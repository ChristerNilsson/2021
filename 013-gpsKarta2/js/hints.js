// Generated by CoffeeScript 2.4.1
var ETA, curr, diffToWord, elapsedTime, ended, endingTime, findNearest, hints, initSpeaker, lastETA, lastETAtimestamp, lastSpoken, lastWord, makeHints, onTrack, say, sayETA, sayHint, speaker, started, startingTimePlay, startingTimeRecord, userDistancePlay, userDistanceRecord, voices,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

curr = 0;

lastWord = '';

lastSpoken = '';

speaker = null;

hints = {};

started = false;

ended = false;

startingTimePlay = null;

startingTimeRecord = null;

endingTime = null;

elapsedTime = 0;

userDistancePlay = 0;

userDistanceRecord = 0;

onTrack = true;

voices = null;

lastETA = 0;

lastETAtimestamp = 0; // seconds since startingTimePlay

ETA = 0;

window.speechSynthesis.onvoiceschanged = function() {
  return voices = window.speechSynthesis.getVoices();
};

initSpeaker = function() {
  var index;
  index = 5;
  speaker = new SpeechSynthesisUtterance();
  speaker.voiceURI = "native";
  speaker.volume = 1;
  speaker.rate = 1.0;
  speaker.pitch = 0;
  speaker.text = '';
  speaker.lang = 'en-GB';
  if (voices && index <= voices.length - 1) {
    speaker.voice = voices[index];
  }
  return say(`Welcome! ${VERSION}`);
};

say = function(m) {
  if (speaker === null) {
    return;
  }
  speechSynthesis.cancel();
  speaker.text = m;
  speechSynthesis.speak(speaker);
  return messages.push('SAY ' + m);
};

diffToWord = function(diff) {
  var WORDS;
  WORDS = ['turn around', 'sharp left', 'medium left', 'left', '', 'right', 'medium right', 'sharp right', 'turn around'];
  return WORDS[4 + Math.round(diff / 45)];
};

ass('turn around', diffToWord(-180));

ass('sharp left', diffToWord(-157));

ass('sharp left', diffToWord(-113));

ass('left', diffToWord(-67));

ass('left', diffToWord(-23));

ass('', diffToWord(-22));

ass('', diffToWord(22));

ass('right', diffToWord(23));

ass('right', diffToWord(67));

ass('medium right', diffToWord(68));

ass('medium right', diffToWord(112));

ass('sharp right', diffToWord(113));

ass('sharp right', diffToWord(157));

ass('turn around', diffToWord(158));

ass('turn around', diffToWord(180));

sayETA = function(gpsPoints) {
  var currTime, n, nextETA, progress, resolution, usedTime;
  if (gpsPoints.length < 2) {
    return;
  }
  if (startingTimePlay === null) {
    return;
  }
  if (playPath.distance === 0) {
    return;
  }
  n = gpsPoints.length;
  userDistancePlay += distance(gpsPoints[n - 2], gpsPoints[n - 1]);
  if (userDistancePlay === 0) {
    return;
  }
  progress = userDistancePlay / playPath.distance;
  currTime = new Date();
  usedTime = currTime - startingTimePlay;
  ETA = usedTime * playPath.distance / userDistancePlay; // ms
  ETA /= 1000; // secs
  resolution = progress < 0.5 ? 60 : 10;
  if (resolution === 60) {
    nextETA = `${Math.floor(ETA / 60)}`;
  }
  if (resolution === 10) {
    nextETA = `${Math.floor(ETA / 60)} ${myRound(ETA, -1) % 60}`;
  }
  if (lastETA !== nextETA && usedTime - lastETAtimestamp > 10000) { // 10 seconds
    lastETAtimestamp = usedTime;
    lastETA = nextETA;
    return say(nextETA);
  }
};

sayHint = function(gpsPoints) {
  var N, dist, err, gps, last, points, word;
  N = 5;
  if (!playPath || gpsPoints.length === 0) {
    return;
  }
  points = playPath.points;
  last = gpsPoints.length - 1;
  gps = gpsPoints[last];
  [curr, dist] = findNearest(gps, points);
  if (started && !ended) {
    messages.push(`gps ${curr} ${dist}`);
  }
  word = '';
  if (!started && 25 > distance(gps, points[0])) {
    started = true;
    startingTimePlay = new Date();
    messages.push(`trackStarted ${startingTimePlay}`);
    say('track started!');
    userDistancePlay = 0;
    onTrack = true;
    return;
  }
  if (started && !ended && 10 > distance(gps, points[points.length - 1])) {
    ended = true;
    endingTime = new Date();
    elapsedTime = endingTime - startingTimePlay;
    messages.push(`elapsedTime ${elapsedTime}`);
    say('track ended!');
    return;
  }
  if (!started) {
    return;
  }
  if (ended) {
    return;
  }
  try {
    sayETA(gpsPoints);
  } catch (error) {
    err = error;
    messages.push(`${err}`);
    messages.push(`${err.stack}`);
  }
  if (!onTrack && dist < 10) { // meters
    word = 'track found!';
    onTrack = true;
  } else if (dist > 25) { // meters
    word = 'track lost!';
    onTrack = false;
  } else {
    word = curr + N in hints ? hints[curr + N] : '';
  }
  if (lastSpoken !== word) {
    messages.push(`HINT ${curr} ${points[curr]} ${word} ${dist}`);
    say(word);
    return lastSpoken = word;
  }
};

findNearest = function(p1, polygon) {
  var best, d, dx, dy, i, index, j, len, p, ref, x, y;
  index = 0;
  [x, y] = p1;
  p = polygon[0];
  dx = p[0] - x;
  dy = p[1] - y;
  best = dx * dx + dy * dy;
  ref = range(polygon.length);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    p = polygon[i];
    dx = p[0] - x;
    dy = p[1] - y;
    d = dx * dx + dy * dy;
    if (d < best) {
      best = d;
      index = i;
    }
  }
  return [index, Math.round(Math.sqrt(best))];
};

makeHints = function() {
  var b0, b1, diff, i, j, len, points, ref, word;
  console.log('makeHints');
  hints = {};
  points = playPath.points;
  console.log(points);
  ref = range(2, points.length - 3);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    b0 = bearing(points[i - 2], points[i]);
    b1 = bearing(points[i], points[i + 2]);
    diff = b1 - b0 + 180;
    diff = modulo(diff, 360) - 180;
    word = diffToWord(diff);
    if (word !== '') {
      hints[i] = word;
    }
  }
  return console.log(hints);
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2021\013-gpsKarta2\coffee\hints.coffee