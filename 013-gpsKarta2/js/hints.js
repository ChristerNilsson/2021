// Generated by CoffeeScript 2.4.1
var curr, diffToWord, elapsedTime, ended, endingTime, findNearest, hints, initSpeaker, lastETA, lastSpoken, lastWord, makeHints, say, sayETA, sayHint, speaker, started, startingTime, userDistance, voices,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

curr = 0;

lastWord = '';

lastSpoken = '';

speaker = null;

hints = {};

started = false;

ended = false;

startingTime = null;

endingTime = null;

elapsedTime = 0;

userDistance = 0;

voices = null;

lastETA = 0;

window.speechSynthesis.onvoiceschanged = function() {
  return voices = window.speechSynthesis.getVoices();
};

initSpeaker = function() {
  var index;
  index = 5;
  speaker = new SpeechSynthesisUtterance();
  speaker.voiceURI = "native";
  speaker.volume = 1;
  speaker.rate = 1.0;
  speaker.pitch = 0;
  speaker.text = '';
  speaker.lang = 'en-GB';
  if (voices && index <= voices.length - 1) {
    speaker.voice = voices[index];
  }
  messages.push("Welcome! Gustav");
  return say("Welcome! Gustav");
};

say = function(m) {
  if (speaker === null) {
    return;
  }
  speechSynthesis.cancel();
  speaker.text = m;
  return speechSynthesis.speak(speaker);
};

diffToWord = function(diff) {
  var WORDS;
  WORDS = ['turn around', 'sharp left', 'medium left', 'left', '', 'right', 'medium right', 'sharp right', 'turn around'];
  return WORDS[4 + Math.round(diff / 45)];
};

ass('turn around', diffToWord(-180));

ass('sharp left', diffToWord(-157));

ass('sharp left', diffToWord(-113));

ass('left', diffToWord(-67));

ass('left', diffToWord(-23));

ass('', diffToWord(-22));

ass('', diffToWord(22));

ass('right', diffToWord(23));

ass('right', diffToWord(67));

ass('medium right', diffToWord(68));

ass('medium right', diffToWord(112));

ass('sharp right', diffToWord(113));

ass('sharp right', diffToWord(157));

ass('turn around', diffToWord(158));

ass('turn around', diffToWord(180));

sayETA = function(gpsPoints) {
  var ETA, n, usedTime;
  if (gpsPoints.length < 2) {
    return;
  }
  if (startingTime === null) {
    return;
  }
  if (currentPath.distance === 0) {
    return;
  }
  n = gpsPoints.length;
  userDistance += distance(gpsPoints[n - 2], gpsPoints[n - 1]);
  //if userDistance == 0 then return 
  if (userDistance / currentPath.distance > 0.1) {
    usedTime = new Date() - startingTime;
    ETA = usedTime * currentPath.distance / userDistance;
    ETA = Math.round(ETA / 1000);
    if (10 <= abs(ETA - lastETA)) {
      messages.push(`ETA ${curr} ${Math.floor(ETA / 60)}m ${ETA % 60}s`);
      return lastETA = ETA; // seconds
    }
  }
};

sayHint = function(gpsPoints) {
  var N, dist, gps, last, points, word;
  N = 5;
  if (!currentPath || gpsPoints.length === 0) {
    return;
  }
  points = currentPath.points;
  last = gpsPoints.length - 1;
  gps = gpsPoints[last];
  [curr, dist] = findNearest(gps, points);
  if (started && !ended) {
    messages.push(`gps ${curr} ${dist}`);
  }
  word = '';
  if (!started && dist < 25 && curr === 0) {
    started = true;
    startingTime = new Date();
    say('track started');
    messages.push(`trackStarted ${startingTime}`);
    userDistance = 0;
    return;
  }
  if (started && !ended && curr === points.length - 1) {
    ended = true;
    endingTime = new Date();
    elapsedTime = endingTime - startingTime;
    messages.push(`elapsedTime ${elapsedTime}`);
    say('track ended');
    return;
  }
  if (!started) {
    return;
  }
  if (ended) {
    return;
  }
  sayETA(gpsPoints);
  if (dist > 25) { // meters
    word = 'no track';
  } else {
    if (curr + N in hints) {
      word = hints[curr + N];
      messages.push(`hint ${curr} ${points[curr]} ${word} ${dist}`);
    } else {
      word = '';
    }
  }
  if (lastSpoken !== word) {
    messages.push(`word ${word}`);
    say(word);
    return lastSpoken = word;
  }
};

findNearest = function(p1, polygon) {
  var best, d, dx, dy, i, index, j, len, p, ref, x, y;
  index = 0;
  [x, y] = p1;
  p = polygon[0];
  dx = p[0] - x;
  dy = p[1] - y;
  best = dx * dx + dy * dy;
  ref = range(polygon.length);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    p = polygon[i];
    dx = p[0] - x;
    dy = p[1] - y;
    d = dx * dx + dy * dy;
    if (d < best) {
      best = d;
      index = i;
    }
  }
  return [index, Math.round(Math.sqrt(best))];
};

makeHints = function() {
  var b0, b1, diff, i, j, len, points, ref, word;
  console.log('makeHints');
  hints = {};
  points = currentPath.points;
  console.log(points);
  ref = range(2, points.length - 3);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    b0 = bearing(points[i - 2], points[i]);
    b1 = bearing(points[i], points[i + 2]);
    diff = b1 - b0 + 180;
    diff = modulo(diff, 360) - 180;
    word = diffToWord(diff);
    if (word !== '') {
      hints[i] = word;
    }
  }
  //console.log "#{i} #{points[i]} #{b0} #{b1} #{diff} #{word}"
  //messages.push "#{i} #{word}"
  return console.log(hints);
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2021\013-gpsKarta2\coffee\hints.coffee