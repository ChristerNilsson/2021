// Generated by CoffeeScript 2.4.1
var Path;

Path = class Path {
  constructor(path1) {
    this.path = path1;
    console.log('Path', this.path);
    if (this.path === "") {
      this.points = [];
      this.hash = 0;
      this.distance = 0;
      this.count = 0;
      this.box = null;
    } else {
      
      //@startingTime
      //@endingTime
      //* userDistance
      this.points = decodeAll(this.path);
      // console.log "remove stand stills"
      // temp = [@points[0]]
      // for [x,y] in @points
      // 	[x0,y0] = temp[temp.length-1]
      // 	if x0!=x or y0!=y then temp.push [x,y]
      // @points = temp
      this.hash = this.hashCode(this.path);
      this.distance = this.calcDist(); // in meters
      this.count = this.points.length;
      this.box = this.calcBox();
    }
  }

  addPoint(xy) {
    return this.points.push(xy);
  }

  calcDist() {
    var dx, dy, i, j, len, ref, res, x0, x1, y0, y1;
    res = 0;
    ref = range(1, this.points.length);
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      [x0, y0] = this.points[i - 1];
      [x1, y1] = this.points[i];
      dx = x0 - x1;
      dy = y0 - y1;
      res += Math.sqrt(dx * dx + dy * dy);
    }
    return Math.round(res);
  }

  calcBox() {
    var j, len, ref, x, xmax, xmin, y, ymax, ymin;
    [xmin, ymin] = this.points[0];
    [xmax, ymax] = this.points[0];
    ref = this.points;
    for (j = 0, len = ref.length; j < len; j++) {
      [x, y] = ref[j];
      if (x < xmin) {
        xmin = x;
      }
      if (x > xmax) {
        xmax = x;
      }
      if (y < ymin) {
        ymin = y;
      }
      if (y > ymax) {
        ymax = y;
      }
    }
    return [[myRound(xmin), myRound(ymin)], [myRound(xmax), myRound(ymax)]];
  }

  hashCode(path) {
    var hash, i, j, len, ref;
    hash = 0;
    ref = range(path.length);
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      hash = ((hash << 5) - hash) + path.charCodeAt(i);
    }
    return hash;
  }

  save() {
    var box, found, j, len;
    if (this.points.length === 0) {
      return;
    }
    found = false;
    this.path = encodeAll(this.points);
    this.hash = this.hashCode(this.path);
    this.box = this.calcBox();
    this.distance = this.calcDist();
    for (j = 0, len = boxes.length; j < len; j++) {
      box = boxes[j];
      if (box[0] === this.hash) {
        found = true;
      }
    }
    if (!found) {
      console.log('save', this.points, this.path, this.hash, this.box, this.distance);
      boxes.push([this.hash, this.box]);
      localStorage.boxes = JSON.stringify(boxes);
      return localStorage[this.hash] = this.path;
    }
  }

  delete() {
    var box, i, j, len, playPath, ref;
    localStorage.removeItem(this.hash);
    ref = range(boxes.length);
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      box = boxes[i];
      console.log(i, box);
      if (box[0] === this.hash) {
        boxes.splice(i, 1);
        playPath = null;
        localStorage.boxes = JSON.stringify(boxes);
        return;
      }
    }
  }

};

// temp  = new Path 'Christer'
// ass 1979511370, temp.hashCode 'Christer'

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF0aC5qcyIsInNvdXJjZVJvb3QiOiIuLiIsInNvdXJjZXMiOlsiY29mZmVlXFxwYXRoLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQTs7QUFBTSxPQUFOLE1BQUEsS0FBQTtFQUNDLFdBQWMsTUFBQSxDQUFBO0lBQUMsSUFBQyxDQUFBO0lBQ2YsT0FBTyxDQUFDLEdBQVIsQ0FBWSxNQUFaLEVBQW1CLElBQUMsQ0FBQSxJQUFwQjtJQUNBLElBQUcsSUFBQyxDQUFBLElBQUQsS0FBUyxFQUFaO01BQ0MsSUFBQyxDQUFBLE1BQUQsR0FBVTtNQUNWLElBQUMsQ0FBQSxJQUFELEdBQVE7TUFDUixJQUFDLENBQUEsUUFBRCxHQUFZO01BQ1osSUFBQyxDQUFBLEtBQUQsR0FBUztNQUNULElBQUMsQ0FBQSxHQUFELEdBQU8sS0FMUjtLQUFBLE1BQUE7Ozs7O01BWUMsSUFBQyxDQUFBLE1BQUQsR0FBVSxTQUFBLENBQVUsSUFBQyxDQUFBLElBQVgsRUFBVjs7Ozs7OztNQVNBLElBQUMsQ0FBQSxJQUFELEdBQVEsSUFBQyxDQUFBLFFBQUQsQ0FBVSxJQUFDLENBQUEsSUFBWDtNQUNSLElBQUMsQ0FBQSxRQUFELEdBQVksSUFBQyxDQUFBLFFBQUQsQ0FBQSxFQVZaO01BV0EsSUFBQyxDQUFBLEtBQUQsR0FBUyxJQUFDLENBQUEsTUFBTSxDQUFDO01BQ2pCLElBQUMsQ0FBQSxHQUFELEdBQU8sSUFBQyxDQUFBLE9BQUQsQ0FBQSxFQXhCUjs7RUFGYTs7RUE0QmQsUUFBVyxDQUFDLEVBQUQsQ0FBQTtXQUNWLElBQUMsQ0FBQSxNQUFNLENBQUMsSUFBUixDQUFhLEVBQWI7RUFEVTs7RUFHWCxRQUFXLENBQUEsQ0FBQTtBQUNWLFFBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBO0lBQUEsR0FBQSxHQUFNO0FBQ047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O01BQ0EsWUFBWSxDQUFDLEtBQWIsR0FBcUIsSUFBSSxDQUFDLFNBQUwsQ0FBZSxLQUFmO2FBQ3JCLFlBQWEsQ0FBQSxJQUFDLENBQUEsSUFBRCxDQUFiLEdBQXNCLElBQUMsQ0FBQSxLQUp4Qjs7RUFUTTs7RUFlUCxNQUFTLENBQUEsQ0FBQTtBQUNSLFFBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLFFBQUEsRUFBQTtJQUFBLFlBQVksQ0FBQyxVQUFiLENBQXdCLElBQUMsQ0FBQSxJQUF6QjtBQUNBO0lBQUEsS0FBQSxxQ0FBQTs7TUFDQyxHQUFBLEdBQU0sS0FBTSxDQUFBLENBQUE7TUFDWixPQUFPLENBQUMsR0FBUixDQUFZLENBQVosRUFBYyxHQUFkO01BQ0EsSUFBRyxHQUFJLENBQUEsQ0FBQSxDQUFKLEtBQVUsSUFBQyxDQUFBLElBQWQ7UUFDQyxLQUFLLENBQUMsTUFBTixDQUFhLENBQWIsRUFBZSxDQUFmO1FBQ0EsUUFBQSxHQUFXO1FBQ1gsWUFBWSxDQUFDLEtBQWIsR0FBcUIsSUFBSSxDQUFDLFNBQUwsQ0FBZSxLQUFmO0FBQ3JCLGVBSkQ7O0lBSEQ7RUFGUTs7QUF6RVY7O0FBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBQYXRoXHJcblx0Y29uc3RydWN0b3IgOiAoQHBhdGgpIC0+XHJcblx0XHRjb25zb2xlLmxvZyAnUGF0aCcsQHBhdGhcclxuXHRcdGlmIEBwYXRoID09IFwiXCJcclxuXHRcdFx0QHBvaW50cyA9IFtdXHJcblx0XHRcdEBoYXNoID0gMFxyXG5cdFx0XHRAZGlzdGFuY2UgPSAwXHJcblx0XHRcdEBjb3VudCA9IDBcclxuXHRcdFx0QGJveCA9IG51bGxcclxuXHRcdFx0XHJcblx0XHRcdCNAc3RhcnRpbmdUaW1lXHJcblx0XHRcdCNAZW5kaW5nVGltZVxyXG5cdFx0XHQjKiB1c2VyRGlzdGFuY2VcclxuXHJcblx0XHRlbHNlXHJcblx0XHRcdEBwb2ludHMgPSBkZWNvZGVBbGwgQHBhdGhcclxuXHJcblx0XHRcdCMgY29uc29sZS5sb2cgXCJyZW1vdmUgc3RhbmQgc3RpbGxzXCJcclxuXHRcdFx0IyB0ZW1wID0gW0Bwb2ludHNbMF1dXHJcblx0XHRcdCMgZm9yIFt4LHldIGluIEBwb2ludHNcclxuXHRcdFx0IyBcdFt4MCx5MF0gPSB0ZW1wW3RlbXAubGVuZ3RoLTFdXHJcblx0XHRcdCMgXHRpZiB4MCE9eCBvciB5MCE9eSB0aGVuIHRlbXAucHVzaCBbeCx5XVxyXG5cdFx0XHQjIEBwb2ludHMgPSB0ZW1wXHJcblxyXG5cdFx0XHRAaGFzaCA9IEBoYXNoQ29kZSBAcGF0aFxyXG5cdFx0XHRAZGlzdGFuY2UgPSBAY2FsY0Rpc3QoKSAjIGluIG1ldGVyc1xyXG5cdFx0XHRAY291bnQgPSBAcG9pbnRzLmxlbmd0aFxyXG5cdFx0XHRAYm94ID0gQGNhbGNCb3goKVxyXG5cclxuXHRhZGRQb2ludCA6ICh4eSkgLT5cclxuXHRcdEBwb2ludHMucHVzaCB4eVxyXG5cclxuXHRjYWxjRGlzdCA6IC0+XHJcblx0XHRyZXMgPSAwXHJcblx0XHRmb3IgaSBpbiByYW5nZSAxLEBwb2ludHMubGVuZ3RoXHJcblx0XHRcdFt4MCx5MF0gPSBAcG9pbnRzW2ktMV1cclxuXHRcdFx0W3gxLHkxXSA9IEBwb2ludHNbaV1cclxuXHRcdFx0ZHggPSB4MC14MVxyXG5cdFx0XHRkeSA9IHkwLXkxXHJcblx0XHRcdHJlcyArPSBNYXRoLnNxcnQgZHgqZHgrZHkqZHlcclxuXHRcdE1hdGgucm91bmQgcmVzXHJcblxyXG5cdGNhbGNCb3ggOiAtPlxyXG5cdFx0W3htaW4seW1pbl0gPSBAcG9pbnRzWzBdXHJcblx0XHRbeG1heCx5bWF4XSA9IEBwb2ludHNbMF1cclxuXHRcdGZvciBbeCx5XSBpbiBAcG9pbnRzXHJcblx0XHRcdGlmIHggPCB4bWluIHRoZW4geG1pbiA9IHhcclxuXHRcdFx0aWYgeCA+IHhtYXggdGhlbiB4bWF4ID0geFxyXG5cdFx0XHRpZiB5IDwgeW1pbiB0aGVuIHltaW4gPSB5XHJcblx0XHRcdGlmIHkgPiB5bWF4IHRoZW4geW1heCA9IHlcclxuXHRcdFtbbXlSb3VuZCh4bWluKSxteVJvdW5kKHltaW4pXSxbbXlSb3VuZCh4bWF4KSxteVJvdW5kKHltYXgpXV1cclxuXHJcblx0aGFzaENvZGUgOiAocGF0aCkgLT5cclxuXHRcdGhhc2ggPSAwXHJcblx0XHRmb3IgaSBpbiByYW5nZSBwYXRoLmxlbmd0aFxyXG5cdFx0XHRoYXNoICA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpICsgcGF0aC5jaGFyQ29kZUF0IGlcclxuXHRcdGhhc2hcclxuXHJcblx0c2F2ZSA6IC0+XHJcblx0XHRpZiBAcG9pbnRzLmxlbmd0aCA9PSAwIHRoZW4gcmV0dXJuXHJcblx0XHRmb3VuZCA9IGZhbHNlXHJcblx0XHRAcGF0aCA9IGVuY29kZUFsbCBAcG9pbnRzXHJcblx0XHRAaGFzaCA9IEBoYXNoQ29kZSBAcGF0aFxyXG5cdFx0QGJveCA9IEBjYWxjQm94KClcclxuXHRcdEBkaXN0YW5jZSA9IEBjYWxjRGlzdCgpXHJcblx0XHRmb3IgYm94IGluIGJveGVzXHJcblx0XHRcdGlmIGJveFswXSA9PSBAaGFzaCB0aGVuIGZvdW5kID0gdHJ1ZVxyXG5cdFx0aWYgbm90IGZvdW5kXHJcblx0XHRcdGNvbnNvbGUubG9nICdzYXZlJyxAcG9pbnRzLEBwYXRoLEBoYXNoLEBib3gsQGRpc3RhbmNlXHJcblx0XHRcdGJveGVzLnB1c2ggW0BoYXNoLEBib3hdXHJcblx0XHRcdGxvY2FsU3RvcmFnZS5ib3hlcyA9IEpTT04uc3RyaW5naWZ5IGJveGVzXHJcblx0XHRcdGxvY2FsU3RvcmFnZVtAaGFzaF0gPSBAcGF0aFxyXG5cdFxyXG5cdGRlbGV0ZSA6IC0+XHJcblx0XHRsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSBAaGFzaFxyXG5cdFx0Zm9yIGkgaW4gcmFuZ2UgYm94ZXMubGVuZ3RoXHJcblx0XHRcdGJveCA9IGJveGVzW2ldXHJcblx0XHRcdGNvbnNvbGUubG9nIGksYm94XHJcblx0XHRcdGlmIGJveFswXSA9PSBAaGFzaFxyXG5cdFx0XHRcdGJveGVzLnNwbGljZSBpLDFcclxuXHRcdFx0XHRwbGF5UGF0aCA9IG51bGxcclxuXHRcdFx0XHRsb2NhbFN0b3JhZ2UuYm94ZXMgPSBKU09OLnN0cmluZ2lmeSBib3hlc1xyXG5cdFx0XHRcdHJldHVyblxyXG5cclxuIyB0ZW1wICA9IG5ldyBQYXRoICdDaHJpc3RlcidcclxuIyBhc3MgMTk3OTUxMTM3MCwgdGVtcC5oYXNoQ29kZSAnQ2hyaXN0ZXInXHJcbiJdfQ==
//# sourceURL=c:\github\2021\013-gpsKarta2\coffee\path.coffee