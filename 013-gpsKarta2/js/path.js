// Generated by CoffeeScript 2.4.1
var Path;

Path = class Path {
  constructor(path1) {
    var j, len, ref, temp, x, x0, y, y0;
    this.path = path1;
    console.log('Path', this.path);
    if (this.path === "") {
      this.points = [];
      this.hash = 0;
      this.distance = 0;
      this.count = 0;
      this.box = null;
    } else {
      this.points = decodeAll(this.path);
      console.log("remove stand stills");
      temp = [this.points[0]];
      ref = this.points;
      for (j = 0, len = ref.length; j < len; j++) {
        [x, y] = ref[j];
        [x0, y0] = temp[temp.length - 1];
        if (x0 !== x || y0 !== y) {
          temp.push([x, y]);
        }
      }
      this.points = temp;
      this.hash = this.hashCode(this.path);
      this.distance = this.calcDist(); // in meters
      this.count = this.points.length;
      this.box = this.calcBox();
    }
  }

  calcDist() {
    var dx, dy, i, j, len, ref, res, x0, x1, y0, y1;
    res = 0;
    ref = range(1, this.points.length);
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      [x0, y0] = this.points[i - 1];
      [x1, y1] = this.points[i];
      dx = x0 - x1;
      dy = y0 - y1;
      res += Math.sqrt(dx * dx + dy * dy);
    }
    return Math.round(res);
  }

  calcBox() {
    var j, len, ref, x, xmax, xmin, y, ymax, ymin;
    [xmin, ymin] = this.points[0];
    [xmax, ymax] = this.points[0];
    ref = this.points;
    for (j = 0, len = ref.length; j < len; j++) {
      [x, y] = ref[j];
      if (x < xmin) {
        xmin = x;
      }
      if (x > xmax) {
        xmax = x;
      }
      if (y < ymin) {
        ymin = y;
      }
      if (y > ymax) {
        ymax = y;
      }
    }
    return [[myRound(xmin), myRound(ymin)], [myRound(xmax), myRound(ymax)]];
  }

  hashCode(path) {
    var hash, i, j, len, ref;
    hash = 0;
    ref = range(path.length);
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      hash = ((hash << 5) - hash) + path.charCodeAt(i);
    }
    return hash;
  }

  save() {
    var box, found, j, len;
    if (this.points.length === 0) {
      return;
    }
    found = false;
    this.path = encodeAll(this.points);
    this.hash = this.hashCode(this.path);
    this.box = this.calcBox();
    this.distance = this.calcDist();
    for (j = 0, len = boxes.length; j < len; j++) {
      box = boxes[j];
      if (box[0] === this.hash) {
        found = true;
      }
    }
    if (!found) {
      console.log('save', this.points, this.path, this.hash, this.box, this.distance);
      boxes.push([this.hash, this.box]);
      localStorage.boxes = JSON.stringify(boxes);
      return localStorage[this.hash] = this.path;
    }
  }

  delete() {
    var box, i, j, len, playPath, ref;
    localStorage.removeItem(this.hash);
    ref = range(boxes.length);
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      box = boxes[i];
      console.log(i, box);
      if (box[0] === this.hash) {
        boxes.splice(i, 1);
        playPath = null;
        localStorage.boxes = JSON.stringify(boxes);
        return;
      }
    }
  }

};

// temp  = new Path 'Christer'
// ass 1979511370, temp.hashCode 'Christer'

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF0aC5qcyIsInNvdXJjZVJvb3QiOiIuLiIsInNvdXJjZXMiOlsiY29mZmVlXFxwYXRoLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQTs7QUFBTSxPQUFOLE1BQUEsS0FBQTtFQUNDLFdBQWMsTUFBQSxDQUFBO0FBQ2IsUUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUE7SUFEYyxJQUFDLENBQUE7SUFDZixPQUFPLENBQUMsR0FBUixDQUFZLE1BQVosRUFBbUIsSUFBQyxDQUFBLElBQXBCO0lBQ0EsSUFBRyxJQUFDLENBQUEsSUFBRCxLQUFTLEVBQVo7TUFDQyxJQUFDLENBQUEsTUFBRCxHQUFVO01BQ1YsSUFBQyxDQUFBLElBQUQsR0FBUTtNQUNSLElBQUMsQ0FBQSxRQUFELEdBQVk7TUFDWixJQUFDLENBQUEsS0FBRCxHQUFTO01BQ1QsSUFBQyxDQUFBLEdBQUQsR0FBTyxLQUxSO0tBQUEsTUFBQTtNQU9DLElBQUMsQ0FBQSxNQUFELEdBQVUsU0FBQSxDQUFVLElBQUMsQ0FBQSxJQUFYO01BRVYsT0FBTyxDQUFDLEdBQVIsQ0FBWSxxQkFBWjtNQUNBLElBQUEsR0FBTyxDQUFDLElBQUMsQ0FBQSxNQUFPLENBQUEsQ0FBQSxDQUFUO0FBQ1A7TUFBQSxLQUFBLHFDQUFBO1FBQUksQ0FBQyxDQUFELEVBQUcsQ0FBSDtRQUNILENBQUMsRUFBRCxFQUFJLEVBQUosQ0FBQSxHQUFVLElBQUssQ0FBQSxJQUFJLENBQUMsTUFBTCxHQUFZLENBQVo7UUFDZixJQUFHLEVBQUEsS0FBSSxDQUFKLElBQVMsRUFBQSxLQUFJLENBQWhCO1VBQXVCLElBQUksQ0FBQyxJQUFMLENBQVUsQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUFWLEVBQXZCOztNQUZEO01BR0EsSUFBQyxDQUFBLE1BQUQsR0FBVTtNQUVWLElBQUMsQ0FBQSxJQUFELEdBQVEsSUFBQyxDQUFBLFFBQUQs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YXRoKSAtPlxyXG5cdFx0Y29uc29sZS5sb2cgJ1BhdGgnLEBwYXRoXHJcblx0XHRpZiBAcGF0aCA9PSBcIlwiXHJcblx0XHRcdEBwb2ludHMgPSBbXVxyXG5cdFx0XHRAaGFzaCA9IDBcclxuXHRcdFx0QGRpc3RhbmNlID0gMFxyXG5cdFx0XHRAY291bnQgPSAwXHJcblx0XHRcdEBib3ggPSBudWxsXHJcblx0XHRlbHNlXHJcblx0XHRcdEBwb2ludHMgPSBkZWNvZGVBbGwgQHBhdGhcclxuXHJcblx0XHRcdGNvbnNvbGUubG9nIFwicmVtb3ZlIHN0YW5kIHN0aWxsc1wiXHJcblx0XHRcdHRlbXAgPSBbQHBvaW50c1swXV1cclxuXHRcdFx0Zm9yIFt4LHldIGluIEBwb2ludHNcclxuXHRcdFx0XHRbeDAseTBdID0gdGVtcFt0ZW1wLmxlbmd0aC0xXVxyXG5cdFx0XHRcdGlmIHgwIT14IG9yIHkwIT15IHRoZW4gdGVtcC5wdXNoIFt4LHldXHJcblx0XHRcdEBwb2ludHMgPSB0ZW1wXHJcblxyXG5cdFx0XHRAaGFzaCA9IEBoYXNoQ29kZSBAcGF0aFxyXG5cdFx0XHRAZGlzdGFuY2UgPSBAY2FsY0Rpc3QoKSAjIGluIG1ldGVyc1xyXG5cdFx0XHRAY291bnQgPSBAcG9pbnRzLmxlbmd0aFxyXG5cdFx0XHRAYm94ID0gQGNhbGNCb3goKVxyXG5cclxuXHRjYWxjRGlzdCA6IC0+XHJcblx0XHRyZXMgPSAwXHJcblx0XHRmb3IgaSBpbiByYW5nZSAxLEBwb2ludHMubGVuZ3RoXHJcblx0XHRcdFt4MCx5MF0gPSBAcG9pbnRzW2ktMV1cclxuXHRcdFx0W3gxLHkxXSA9IEBwb2ludHNbaV1cclxuXHRcdFx0ZHggPSB4MC14MVxyXG5cdFx0XHRkeSA9IHkwLXkxXHJcblx0XHRcdHJlcyArPSBNYXRoLnNxcnQgZHgqZHgrZHkqZHlcclxuXHRcdE1hdGgucm91bmQgcmVzXHJcblxyXG5cdGNhbGNCb3ggOiAtPlxyXG5cdFx0W3htaW4seW1pbl0gPSBAcG9pbnRzWzBdXHJcblx0XHRbeG1heCx5bWF4XSA9IEBwb2ludHNbMF1cclxuXHRcdGZvciBbeCx5XSBpbiBAcG9pbnRzXHJcblx0XHRcdGlmIHggPCB4bWluIHRoZW4geG1pbiA9IHhcclxuXHRcdFx0aWYgeCA+IHhtYXggdGhlbiB4bWF4ID0geFxyXG5cdFx0XHRpZiB5IDwgeW1pbiB0aGVuIHltaW4gPSB5XHJcblx0XHRcdGlmIHkgPiB5bWF4IHRoZW4geW1heCA9IHlcclxuXHRcdFtbbXlSb3VuZCh4bWluKSxteVJvdW5kKHltaW4pXSxbbXlSb3VuZCh4bWF4KSxteVJvdW5kKHltYXgpXV1cclxuXHJcblx0aGFzaENvZGUgOiAocGF0aCkgLT5cclxuXHRcdGhhc2ggPSAwXHJcblx0XHRmb3IgaSBpbiByYW5nZSBwYXRoLmxlbmd0aFxyXG5cdFx0XHRoYXNoICA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpICsgcGF0aC5jaGFyQ29kZUF0IGlcclxuXHRcdGhhc2hcclxuXHJcblx0c2F2ZSA6IC0+XHJcblx0XHRpZiBAcG9pbnRzLmxlbmd0aCA9PSAwIHRoZW4gcmV0dXJuXHJcblx0XHRmb3VuZCA9IGZhbHNlXHJcblx0XHRAcGF0aCA9IGVuY29kZUFsbCBAcG9pbnRzXHJcblx0XHRAaGFzaCA9IEBoYXNoQ29kZSBAcGF0aFxyXG5cdFx0QGJveCA9IEBjYWxjQm94KClcclxuXHRcdEBkaXN0YW5jZSA9IEBjYWxjRGlzdCgpXHJcblx0XHRmb3IgYm94IGluIGJveGVzXHJcblx0XHRcdGlmIGJveFswXSA9PSBAaGFzaCB0aGVuIGZvdW5kID0gdHJ1ZVxyXG5cdFx0aWYgbm90IGZvdW5kXHJcblx0XHRcdGNvbnNvbGUubG9nICdzYXZlJyxAcG9pbnRzLEBwYXRoLEBoYXNoLEBib3gsQGRpc3RhbmNlXHJcblx0XHRcdGJveGVzLnB1c2ggW0BoYXNoLEBib3hdXHJcblx0XHRcdGxvY2FsU3RvcmFnZS5ib3hlcyA9IEpTT04uc3RyaW5naWZ5IGJveGVzXHJcblx0XHRcdGxvY2FsU3RvcmFnZVtAaGFzaF0gPSBAcGF0aFxyXG5cdFxyXG5cdGRlbGV0ZSA6IC0+XHJcblx0XHRsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSBAaGFzaFxyXG5cdFx0Zm9yIGkgaW4gcmFuZ2UgYm94ZXMubGVuZ3RoXHJcblx0XHRcdGJveCA9IGJveGVzW2ldXHJcblx0XHRcdGNvbnNvbGUubG9nIGksYm94XHJcblx0XHRcdGlmIGJveFswXSA9PSBAaGFzaFxyXG5cdFx0XHRcdGJveGVzLnNwbGljZSBpLDFcclxuXHRcdFx0XHRwbGF5UGF0aCA9IG51bGxcclxuXHRcdFx0XHRsb2NhbFN0b3JhZ2UuYm94ZXMgPSBKU09OLnN0cmluZ2lmeSBib3hlc1xyXG5cdFx0XHRcdHJldHVyblxyXG5cclxuIyB0ZW1wICA9IG5ldyBQYXRoICdDaHJpc3RlcidcclxuIyBhc3MgMTk3OTUxMTM3MCwgdGVtcC5oYXNoQ29kZSAnQ2hyaXN0ZXInXHJcbiJdfQ==
//# sourceURL=c:\github\2021\013-gpsKarta2\coffee\path.coffee