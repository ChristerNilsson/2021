// Generated by CoffeeScript 2.4.1
var INVISIBLE, RESOLUTION, SIZE, TILE, VERSION, add, aimEvent, boxes, buttons, center, centrera, clearThePath, click, convert, deleteThePath, drawMap, fetchThePath, images, initGPS, initTrail, loadThePath, locationUpdate, locationUpdateFail, makeMarker, makeText, mark, more, moreMode, mouse, mousedown, mousemove, mouseup, nada, nh, nw, playMode, playPath, playThePath, position, record, recordPath, recordThePath, rects, rensaLocalStorage, reverseThePath, sendMail, setAttrs, shareThePath, showBoxes, startingTimeRecord, startup, svg, svgurl, target, texts, touchend, touchmove, touchstart, trail, updateMode, updateTexts, updateTrail;

VERSION = '29.7';

INVISIBLE = -200;

SIZE = 256; // 64..65536 # rutornas storlek i meter

TILE = 256; // rutornas storlek i pixels

RESOLUTION = 4; // separation in meter between gps-points

nw = Math.floor(W / TILE);

nh = Math.floor(H / TILE);

updateMode = 0; // 0=manual 1=gps

moreMode = 0; // 0 1=fetch... 2=reverse

playMode = 0;

record = 0;

boxes = [];

playPath = null;

recordPath = null;

trail = null; // M256,256 l100,100 l50,0

startingTimeRecord = null;

svgurl = "http://www.w3.org/2000/svg";

svg = document.getElementById('svgOne');

//position = [59.09443087294174, 17.7142975294884] # 6553600,655360
position = [
  59.265196,
  18.132748 // Home (lat long)
];

//grid = []
center = []; // skärmens mittpunkt (sweref). Påverkas av pan (x y) (6 7)

target = []; // målkoordinater (sweref)

mouse = [];

images = [];

rects = [];

texts = [];

buttons = {};

sendMail = function(subject, body) {
  mail.href = "mailto:janchrister.nilsson@gmail.com?subject=" + encodeURIComponent(subject) + "&body=" + encodeURIComponent(body);
  return mail.click();
};

setAttrs = function(obj, attrs) {
  var key, results;
  if (!obj) {
    return;
  }
  results = [];
  for (key in attrs) {
    results.push(obj.setAttributeNS(null, key, attrs[key]));
  }
  return results;
};

add = function(type, parent, attrs) {
  var obj;
  obj = document.createElementNS(svgurl, type);
  parent.appendChild(obj);
  setAttrs(obj, attrs);
  return obj;
};

click = function(s) {
  event.preventDefault();
  if (s === 'in' && SIZE > 64) {
    SIZE = Math.floor(SIZE / 2);
  }
  if (s === 'out' && SIZE < 65536) {
    SIZE *= 2;
  }
  if (s === 'center') {
    centrera();
  }
  if (s === 'aim') {
    aimEvent();
  }
  event.stopPropagation();
  return drawMap();
};

mousedown = function(event) {
  return mouse = [event.x, event.y];
};

mouseup = function(event) {
  return mouse = [];
};

mousemove = function(event) {
  var dx, dy, factor;
  if (mouse.length === 0) {
    return;
  }
  factor = 2;
  if (SIZE === 64) {
    factor = 0.25;
  }
  if (SIZE === 128) {
    factor = 0.5;
  }
  if (SIZE === 256) {
    factor = 1;
  }
  dx = event.movementX;
  dy = event.movementY;
  mouse = [dx, dy];
  center[0] -= dx * factor;
  center[1] += dy * factor;
  updateMode = 0;
  return drawMap();
};

touchstart = function(event) {
  var touch, touches;
  event.preventDefault();
  touches = event.targetTouches;
  if (touches.length !== 1) {
    return;
  }
  touch = touches[0];
  return mouse = [touch.clientX, touch.clientY];
};

touchend = function(event) {
  event.preventDefault();
  mouse = [];
  return drawMap();
};

touchmove = function(event) {
  var dx, dy, factor, touch, touches;
  event.preventDefault();
  if (mouse.length === 0) {
    return;
  }
  touches = event.targetTouches;
  if (touches.length !== 1) {
    return;
  }
  touch = touches[0];
  factor = 2;
  if (SIZE === 64) {
    factor = 0.25;
  }
  if (SIZE === 128) {
    factor = 0.5;
  }
  if (SIZE === 256) {
    factor = 1;
  }
  dx = touch.clientX - mouse[0];
  dy = touch.clientY - mouse[1];
  mouse = [touch.clientX, touch.clientY];
  center[0] -= dx * factor;
  center[1] += dy * factor;
  updateMode = 0;
  return drawMap();
};

svg.addEventListener('touchstart', touchstart);

svg.addEventListener('touchmove', touchmove);

svg.addEventListener('touchend', touchend);

svg.addEventListener('mousedown', mousedown);

svg.addEventListener('mousemove', mousemove);

svg.addEventListener('mouseup', mouseup);

convert = function([x, y], size = SIZE) { // sweref punkt
  var dx, dy;
  dx = x % size; // beräkna vektor dx,dy (sweref)
  dy = y % size;
  x -= dx; // beräkna rutans SW hörn x,y (sweref)
  y -= dy;
  dx = map(dx, 0, size, 0, TILE); // map n,start1,stop1,start2,stop2
  dy = map(dy, 0, size, 0, TILE);
  return [x, y, dx, dy];
};

ass([655360, 6553600, 64, 72], convert([655360 + 16, 6553600 + 18], 64));

ass([655360, 6553600, 128, 128], convert([655360 + 64, 6553600 + 64], 128));

ass([655360 + 128, 6553600 + 128, 0, 0], convert([655360 + 128, 6553600 + 128], 128));

ass([655360, 6553600, 44, 44], convert([655360 + 22, 6553600 + 22], 128));

ass([655360, 6553600, 128, 128], convert([655360 + 128, 6553600 + 128], 256));

ass([655360, 6553600, 64, 64], convert([655360 + 64, 6553600 + 64], 256));

ass([655360, 6553600, 64, 74], convert([655360 + 128, 6553600 + 148], 512));

ass([655360, 6553600, 32, 32], convert([655360 + 64, 6553600 + 64], 512));

ass([655360, 6553600, 200, 250], convert([655360 + 400, 6553600 + 500], 512));

ass([655360, 6553600, 32, 37], convert([655360 + 128, 6553600 + 148], 1024));

ass([655360, 6553600, 16, 16], convert([655360 + 64, 6553600 + 64], 1024));

ass([655360, 6553600, 100, 125], convert([655360 + 400, 6553600 + 500], 1024));

updateTrail = function(baseX, baseY, dx, dy) {
  var i, k, len, ref, s, x, x0, x1, xx, y, y0, y1, yy;
  if (!playPath) {
    setAttrs(trail, {
      points: ''
    });
    return;
  }
  x0 = baseX - SIZE;
  x1 = baseX + SIZE;
  y0 = baseY - SIZE;
  y1 = baseY + SIZE;
  s = [];
  ref = playPath.points;
  for (i = k = 0, len = ref.length; k < len; i = ++k) {
    [x, y] = ref[i];
    //if i % 5 != 0 then continue
    xx = map(x, x0, x1, W / 2 - TILE, W / 2 + TILE);
    yy = map(y, y0, y1, H / 2 - TILE, H / 2 + TILE);
    s.push(`${Math.round(xx - dx)},${Math.round(H + dy - yy)}`);
  }
  return setAttrs(trail, {
    points: s.join(' ')
  });
};

drawMap = function() {
  var baseX, baseY, dx, dy, href, i, j, k, l, len, len1, px, py, ref, ref1, x, y;
  [baseX, baseY, dx, dy] = convert(center);
  ref = range(-nh, nh + 1);
  for (k = 0, len = ref.length; k < len; k++) {
    j = ref[k];
    y = baseY + j * SIZE - SIZE;
    py = H / 2 - TILE * j + dy;
    ref1 = range(-nw, nw + 1);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      i = ref1[l];
      x = baseX + i * SIZE;
      px = W / 2 + TILE * i - dx;
      href = `maps\\${SIZE}\\${y}-${x}-${SIZE}.jpg`;
      if (href !== images[j + nh][i + nw].getAttributeNS(null, 'href')) { // only update if needed
        setAttrs(images[j + nh][i + nw], {
          href: href
        });
      }
      setAttrs(images[j + nh][i + nw], {
        x: px,
        y: py
      });
      setAttrs(rects[j + nh][i + nw], {
        x: px,
        y: py
      });
    }
  }
  updateTrail(Math.round(baseX), Math.round(baseY), Math.round(dx), Math.round(dy));
  return updateTexts();
};

updateTexts = function() {
  var elapsedTime, t;
  if (texts.length === 8) {
    texts[0].textContent = target.length === 2 ? `${bearing(target, center)} º` : "";
    texts[1].textContent = target.length === 2 ? `${Math.round(distance(target, center))} m` : "";
    texts[2].textContent = playMode === 1 ? `P #${curr} of ${playPath.points.length} (${myRound(100 * curr / playPath.points.length)}%) ${playPath.distance}m ETA ${myRound(ETA)}s` : "";
    t = new Date();
    elapsedTime = (t - startingTimeRecord) / 1000; // secs
    texts[3].textContent = record === 1 ? `R #${recordPath.points.length} ${myRound(elapsedTime)}s ${myRound(userDistanceRecord)}m` : "";
    texts[4].textContent = `Tracks: ${boxes.length}`;
    texts[5].textContent = `Z${SIZE} U${updateMode} P${playMode} R${record} V${VERSION}`;
    texts[6].textContent = `X${myRound(center[0])} Y${myRound(center[1])}`;
    texts[7].textContent = `N${myRound(position[0], 6)} E${myRound(position[1], 6)}`;
    if (buttons.target) {
      return buttons.target.move();
    }
  }
};

centrera = function() {
  var g, grid;
  updateMode = 1;
  grid = geodetic_to_grid(position[0], position[1]);
  center = (function() {
    var k, len, results;
    results = [];
    for (k = 0, len = grid.length; k < len; k++) {
      g = grid[k];
      results.push(g);
    }
    return results;
  })();
  center.reverse();
  return drawMap();
};

aimEvent = function() {
  if (target.length === 0) {
    target = center.slice();
    return buttons.target.moveHard(W / 2, H / 2);
  } else {
    target = [];
    return buttons.target.moveHard(INVISIBLE, INVISIBLE);
  }
};

//####
loadThePath = function() { // url -> localStorage
  var parameters;
  boxes = localStorage.boxes ? JSON.parse(localStorage.boxes) : [];
  parameters = getParameters();
  if (!parameters.path) {
    return;
  }
  playPath = new Path(parameters.path);
  return playPath.save();
};

clearThePath = function() {
  playPath = null;
  drawMap();
  return more(0);
};

fetchThePath = function() { // visa alla synliga paths. Närmaste gulmarkeras, övriga gråmarkeras
  var bestDist, besti, d, i, k, key, l, len, len1, p, ref, x0, x1, y0, y1;
  bestDist = 9999999;
  besti = -1;
  for (i = k = 0, len = boxes.length; k < len; i = ++k) {
    [key, [[x0, y0], [x1, y1]]] = boxes[i];
    ref = [[x0, y0], [x0, y1], [x1, y0], [x1, y1]];
    for (l = 0, len1 = ref.length; l < len1; l++) {
      p = ref[l];
      d = distance(p, center);
      if (d < bestDist) {
        bestDist = d;
        besti = i;
      }
    }
  }
  if (besti !== -1) {
    playPath = new Path(localStorage[boxes[besti][0]]);
    console.log(playPath.points);
    center = playPath.points[0].slice();
  }
  more(0);
  return drawMap();
};

mark = function() { // Spara center i localStorage
  var temp;
  temp = new Path(`${Math.round(center[0])},${Math.round(center[1])}`);
  temp.save();
  return more(0);
};

playThePath = function() {
  var ended, started;
  playMode = 1 - playMode;
  started = false;
  ended = false;
  makeHints();
  return more(0);
};

deleteThePath = function() { // tag bort current Path från localStorage
  playPath.delete();
  return more(0);
};

recordThePath = function() { // start/stopp av inspelning av path
  record = 1 - record;
  if (record === 1) {
    recordPath = new Path("");
    startingTimeRecord = new Date();
  }
  if (record === 0) {
    recordPath.save();
  }
  buttons.record.setTextFill(['#000f', '#f00f'][record]);
  texts[2].textContent = `${recordPath.points.length}`;
  return more(0);
};

showBoxes = function(body) {
  var box, bytes, hash, i, k, len, total, xmax, xmin, ymax, ymin;
  total = 0;
  for (i = k = 0, len = boxes.length; k < len; i = ++k) {
    box = boxes[i];
    [hash, [[xmin, ymin], [xmax, ymax]]] = box;
    bytes = localStorage[hash].length;
    body += `Track ${i + 1}: xmin=${xmin} ymin=${ymin} xmax=${xmax} ymax=${ymax} hash=${hash} bytes=${bytes}\n`;
    total += bytes;
  }
  body += `\nSize in bytes: ${total}\n`;
  return body;
};

shareThePath = function() {
  var body, err, header, key;
  try {
    header = '';
    body = '';
    messages.push('');
    messages.push('Explanations:');
    messages.push(' HINT index x y (distance in meter)');
    messages.push(' SAY text');
    messages.push(' LU x y (gps location in SWEREF)');
    messages.push(' gps index (distance in meter) closest point in track being played');
    messages.push(' trackStarted yyyy-mm-dd hh:mm:ss');
    messages.push(' trackEnded   yyyy-mm-dd hh:mm:ss');
    messages.push('');
    messages.push(`VERSION ${VERSION}`);
    messages.push(`RESOLUTION ${RESOLUTION}`);
    messages.push(`curr ${curr}`);
    messages.push(`lastWord ${lastWord}`);
    messages.push(`lastSpoken ${lastSpoken}`);
    messages.push(`started ${started}`);
    messages.push(`ended ${ended}`);
    if (startingTimePlay) {
      messages.push(`startingTimePlay ${startingTimePlay.toLocaleString(sv)}`);
    }
    if (startingTimeRecord) {
      messages.push(`startingTimeRecord ${startingTimeRecord.toLocaleString(sv)}`);
    }
    if (endingTime) {
      messages.push(`endingTime ${endingTime.toLocaleString(sv)}`);
    }
    messages.push(`elapsedTime ${myRound(elapsedTime / 1000)}`);
    messages.push(`userDistancePlay ${myRound(userDistancePlay)}`);
    messages.push(`userDistanceRecord ${myRound(userDistanceRecord)}`);
    messages.push(`lastETA ${lastETA}`);
    messages.push(`updateMode ${updateMode}`);
    messages.push(`moreMode ${moreMode}`);
    messages.push(`playMode ${playMode}`);
    messages.push(`record ${record}`);
    messages.push("");
    messages.push(`hints: ${_.size(hints)}`);
    for (key in hints) {
      messages.push(`${key} ${hints[key]}`);
    }
    messages.push("");
    if (messages) {
      body += messages.join("\n");
    }
    body += "\n";
    if (playPath && playPath.points.length > 0) {
      header += `P ${myRound(userDistancePlay)} meter ${playPath.points.length} points`;
      body += `Play ${window.location.origin + window.location.pathname}?path=${playPath.path}\n`;
    }
    if (recordPath && recordPath.points.length > 0) {
      header += `R ${myRound(userDistanceRecord)} meter ${recordPath.points.length} points`;
      body += `Record ${window.location.origin + window.location.pathname}?path=${recordPath.path}\n`;
    }
    body += "\n";
    body = showBoxes(body);
    sendMail(header, body);
    messages.length = 0;
    return more(0);
  } catch (error1) {
    err = error1;
    messages.push(err.message);
    return messages.push(err.stack);
  }
};

reverseThePath = function() {
  playPath.points.reverse();
  messages.push("reverse");
  drawMap();
  return more(0);
};

//####
makeText = function(x, y, color = 'black') {
  var text;
  text = add('text', svg, {
    x: x,
    y: y,
    fill: color,
    stroke: 'none',
    'stroke-width': 1,
    'text-anchor': 'middle'
  });
  text.style.fontSize = '40px';
  text.style.userSelect = 'none';
  return texts.push(text);
};

nada = function(event) {
  event.preventDefault();
  return event.stopPropagation();
};

locationUpdateFail = function(error) {
  return messages.push(`locationUpdateFail ${error}`);
};

locationUpdate = function(p) {
  var n, xy;
  position = [p.coords.latitude, p.coords.longitude];
  xy = geodetic_to_grid(position[0], position[1]);
  xy.reverse();
  n = gpsPoints.length;
  if (n > 0 && RESOLUTION > distance(xy, gpsPoints[n - 1])) {
    messages.push(`skipped ${myRound(xy[0])} ${myRound(xy[1])}`);
    return;
  }
  gpsPoints.push(xy.slice());
  if (gpsPoints.length > 10) {
    gpsPoints.shift();
  }
  messages.push(`LU ${myRound(xy[0])} ${myRound(xy[1])}`);
  if (record === 1) {
    recordPath.points.push(xy.slice());
    n = gpsPoints.length;
    if (n > 1) {
      userDistanceRecord += distance(gpsPoints[n - 2], gpsPoints[n - 1]);
    }
  }
  if (updateMode === 1) {
    center = xy;
  }
  if (playMode === 1) {
    sayHint(gpsPoints);
  }
  return drawMap();
};

initGPS = function() {
  return navigator.geolocation.watchPosition(locationUpdate, locationUpdateFail, {
    enableHighAccuracy: true,
    maximumAge: 30000,
    timeout: 27000
  });
};

makeMarker = function(name, n, color) {
  var result;
  result = add('marker', svg, {
    id: name,
    viewBox: `-1 -1 ${2 * n + 1} ${2 * n + 1}`,
    refX: n,
    refY: n,
    markerWidth: n,
    markerHeight: n
  });
  add('circle', result, {
    cx: n,
    cy: n,
    r: n,
    fill: color,
    stroke: 'black'
  });
  return result;
};

initTrail = function() {
  if (false) {
    return trail = add('path', svg, {
      d: "",
      stroke: 'red',
      'stroke-width': 1,
      fill: 'none'
    });
  } else {
    makeMarker('start', 8, 'green');
    makeMarker('dot', 4, 'yellow');
    makeMarker('end', 8, 'red');
    return trail = add('polyline', svg, {
      points: '',
      fill: 'none',
      stroke: 'red',
      'stroke-width': 2,
      'marker-start': "url(#start)",
      'marker-mid': "url(#dot)",
      'marker-end': "url(#end)"
    });
  }
};

more = function(next) {
  var k, l, len, len1, len2, m, name, names1, names2, ref, results;
  if (speaker === null) {
    initSpeaker();
  }
  names1 = "fetch record mark play clear delete share".split(' ');
  names2 = "reverse".split(' ');
  ref = names1.concat(names2);
  for (k = 0, len = ref.length; k < len; k++) {
    name = ref[k];
    buttons[name].disable();
  }
  if (next === -1) {
    next = (moreMode + 1) % 3;
  }
  moreMode = next;
  if (moreMode === 1) {
    for (l = 0, len1 = names1.length; l < len1; l++) {
      name = names1[l];
      buttons[name].enable();
    }
  }
  if (moreMode === 2) {
    results = [];
    for (m = 0, len2 = names2.length; m < len2; m++) {
      name = names2[m];
      results.push(buttons[name].enable());
    }
    return results;
  }
};

rensaLocalStorage = function() {
  var a, b, box, c, d, i, k, key, len, ref;
  ref = ''.split(' ');
  for (k = 0, len = ref.length; k < len; k++) {
    key = ref[k];
    console.log(key);
    localStorage.removeItem(key);
  }
  i = boxes.length - 1;
  while (i >= 0) {
    box = boxes[i];
    //console.log 'rensaLocalStorage',boxes
    [[a, b], [c, d]] = box[1];
    //console.log 'rensaLocalStorage',a,b,c,d
    if (a === null || b === null || c === null || d === null) {
      console.log('splice', box);
      boxes.splice(i, 1);
    }
    i -= 1;
  }
  return localStorage.boxes = JSON.stringify(boxes);
};

startup = function() {
  var _, g, grid, i, irow, k, l, len, len1, ref, ref1, rrow, x, x0, x1, x2, y, y0, y1, y2, y3, y4, y5, y6;
  loadThePath();
  rensaLocalStorage();
  initGPS();
  add('rect', svg, {
    width: W,
    height: H,
    fill: 'green'
  });
  grid = geodetic_to_grid(position[0], position[1]);
  center = (function() {
    var k, len, results;
    results = [];
    for (k = 0, len = grid.length; k < len; k++) {
      g = grid[k];
      results.push(g);
    }
    return results;
  })();
  center.reverse();
  images = [];
  rects = [];
  texts = [];
  ref = range(2 * nh + 1);
  for (k = 0, len = ref.length; k < len; k++) {
    _ = ref[k];
    irow = [];
    rrow = [];
    ref1 = range(2 * nw + 1);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      _ = ref1[l];
      irow.push(add('image', svg, {}));
      rrow.push(add('rect', svg, {
        width: TILE,
        height: TILE,
        stroke: 'black',
        'stroke-width': 1,
        fill: 'none'
      }));
    }
    images.push(irow);
    rects.push(rrow);
  }
  x0 = 0.36 * W;
  x1 = 0.64 * W;
  x2 = 0.50 * W;
  y0 = H * 0.05;
  y1 = H * 0.75;
  y2 = H * 0.79;
  y3 = H * 0.84;
  y4 = H * 0.89;
  y5 = H * 0.94;
  y6 = H * 0.99;
  makeText(x0, y0); // 0
  makeText(x1, y0); // 1
  makeText(x2, y1); // 2
  makeText(x2, y2, 'red'); // 3
  makeText(x2, y3); // 4
  makeText(x2, y4); // 5
  makeText(x2, y5); // 6
  makeText(x2, y6); // 7
  x0 = H * 0.10;
  x1 = W * 0.50;
  x2 = W - x0;
  y0 = H * 0.10;
  y1 = H * 0.50;
  //y2 = 512+128
  y3 = H * 0.90;
  buttons.target = new TargetButton(INVISIBLE, INVISIBLE, '', '#f008');
  new TargetButton(x1, y1, "click('aim')");
  new Button(x0, y0, 'in', "click('in')");
  new Button(x2, y0, 'out', "click('out')");
  new Button(x0, y3, 'center', "click('center')");
  new Button(x2, y3, 'more', "more(-1)");
  x = (function() {
    var len2, m, ref2, results;
    ref2 = range(0, 360, 60);
    results = [];
    for (m = 0, len2 = ref2.length; m < len2; m++) {
      i = ref2[m];
      results.push(W / 2 + H * 0.25 * Math.cos(radians(i)));
    }
    return results;
  })();
  y = (function() {
    var len2, m, ref2, results;
    ref2 = range(0, 360, 60);
    results = [];
    for (m = 0, len2 = ref2.length; m < len2; m++) {
      i = ref2[m];
      results.push(H / 2 + H * 0.25 * Math.sin(radians(i)));
    }
    return results;
  })();
  buttons.fetch = new Button(W / 2, H / 2, 'fetch', "fetchThePath()", '#ff04');
  buttons.mark = new Button(x[0], y[0], 'mark', "mark()", '#ff04');
  buttons.delete = new Button(x[1], y[1], 'delete', "deleteThePath()", '#ff04');
  buttons.clear = new Button(x[2], y[2], 'clear', "clearThePath()", '#ff04');
  buttons.record = new Button(x[3], y[3], 'record', "recordThePath()", '#ff04');
  buttons.play = new Button(x[4], y[4], 'play', "playThePath()", '#ff04');
  buttons.share = new Button(x[5], y[5], 'share', "shareThePath()", '#ff04');
  buttons.reverse = new Button(W / 2, H / 2, 'reverse', "reverseThePath()", '#ff04');
  initTrail();
  more(0);
  // console.log boxes.length
  return drawMap();
};

startup();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXHNrZXRjaC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUEsU0FBQSxFQUFBLFVBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLE9BQUEsRUFBQSxHQUFBLEVBQUEsUUFBQSxFQUFBLEtBQUEsRUFBQSxPQUFBLEVBQUEsTUFBQSxFQUFBLFFBQUEsRUFBQSxZQUFBLEVBQUEsS0FBQSxFQUFBLE9BQUEsRUFBQSxhQUFBLEVBQUEsT0FBQSxFQUFBLFlBQUEsRUFBQSxNQUFBLEVBQUEsT0FBQSxFQUFBLFNBQUEsRUFBQSxXQUFBLEVBQUEsY0FBQSxFQUFBLGtCQUFBLEVBQUEsVUFBQSxFQUFBLFFBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLFFBQUEsRUFBQSxLQUFBLEVBQUEsU0FBQSxFQUFBLFNBQUEsRUFBQSxPQUFBLEVBQUEsSUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsUUFBQSxFQUFBLFFBQUEsRUFBQSxXQUFBLEVBQUEsUUFBQSxFQUFBLE1BQUEsRUFBQSxVQUFBLEVBQUEsYUFBQSxFQUFBLEtBQUEsRUFBQSxpQkFBQSxFQUFBLGNBQUEsRUFBQSxRQUFBLEVBQUEsUUFBQSxFQUFBLFlBQUEsRUFBQSxTQUFBLEVBQUEsa0JBQUEsRUFBQSxPQUFBLEVBQUEsR0FBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsS0FBQSxFQUFBLFFBQUEsRUFBQSxTQUFBLEVBQUEsVUFBQSxFQUFBLEtBQUEsRUFBQSxVQUFBLEVBQUEsV0FBQSxFQUFBOztBQUFBLE9BQUEsR0FBVTs7QUFDVixTQUFBLEdBQVksQ0FBQzs7QUFDYixJQUFBLEdBQU8sSUFGUDs7QUFHQSxJQUFBLEdBQU8sSUFIUDs7QUFLQSxVQUFBLEdBQWEsRUFMYjs7QUFPQSxFQUFBLGNBQUssSUFBRzs7QUFDUixFQUFBLGNBQUssSUFBRzs7QUFFUixVQUFBLEdBQWEsRUFWYjs7QUFX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QWpDLEVBQW9ELE9BQXBEO0VBQ2pCLE9BQU8sQ0FBQyxLQUFSLEdBQWlCLElBQUksTUFBSixDQUFXLENBQUUsQ0FBQSxDQUFBLENBQWIsRUFBaUIsQ0FBRSxDQUFBLENBQUEsQ0FBbkIsRUFBdUIsT0FBdkIsRUFBZ0MsZ0JBQWhDLEVBQWtELE9BQWxEO0VBQ2pCLE9BQU8sQ0FBQyxNQUFSLEdBQWlCLElBQUksTUFBSixDQUFXLENBQUUsQ0FBQSxDQUFBLENBQWIsRUFBaUIsQ0FBRSxDQUFBLENBQUEsQ0FBbkIsRUFBdUIsUUFBdkIsRUFBaUMsaUJBQWpDLEVBQW9ELE9BQXBEO0VBQ2pCLE9BQU8sQ0FBQyxJQUFSLEdBQWlCLElBQUksTUFBSixDQUFXLENBQUUsQ0FBQSxDQUFBLENBQWIsRUFBaUIsQ0FBRSxDQUFBLENBQUEsQ0FBbkIsRUFBdUIsTUFBdkIsRUFBK0IsZUFBL0IsRUFBZ0QsT0FBaEQ7RUFDakIsT0FBTyxDQUFDLEtBQVIsR0FBaUIsSUFBSSxNQUFKLENBQVcsQ0FBRSxDQUFBLENBQUEsQ0FBYixFQUFpQixDQUFFLENBQUEsQ0FBQSxDQUFuQixFQUF1QixPQUF2QixFQUFnQyxnQkFBaEMsRUFBa0QsT0FBbEQ7RUFFakIsT0FBTyxDQUFDLE9BQVIsR0FBbUIsSUFBSSxNQUFKLENBQVcsQ0FBQSxHQUFFLENBQWIsRUFBaUIsQ0FBQSxHQUFFLENBQW5CLEVBQXVCLFNBQXZCLEVBQWtDLGtCQUFsQyxFQUFzRCxPQUF0RDtFQUVuQixTQUFBLENBQUE7RUFDQSxJQUFBLENBQUssQ0FBTCxFQTFFQTs7U0E0RUEsT0FBQSxDQUFBO0FBN0VTOztBQStFVixPQUFBLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJWRVJTSU9OID0gJzI5LjcnXHJcbklOVklTSUJMRSA9IC0yMDBcclxuU0laRSA9IDI1NiAjIDY0Li42NTUzNiAjIHJ1dG9ybmFzIHN0b3JsZWsgaSBtZXRlclxyXG5USUxFID0gMjU2ICMgcnV0b3JuYXMgc3RvcmxlayBpIHBpeGVsc1xyXG5cclxuUkVTT0xVVElPTiA9IDQgIyBzZXBhcmF0aW9uIGluIG1ldGVyIGJldHdlZW4gZ3BzLXBvaW50c1xyXG5cclxubncgPSBXLy9USUxFXHJcbm5oID0gSC8vVElMRVxyXG5cclxudXBkYXRlTW9kZSA9IDAgIyAwPW1hbnVhbCAxPWdwc1xyXG5tb3JlTW9kZSA9IDAgIyAwIDE9ZmV0Y2guLi4gMj1yZXZlcnNlXHJcbnBsYXlNb2RlID0gMFxyXG5yZWNvcmQgPSAwXHJcblxyXG5ib3hlcyA9IFtdXHJcbnBsYXlQYXRoID0gbnVsbFxyXG5yZWNvcmRQYXRoID0gbnVsbFxyXG50cmFpbCA9IG51bGwgIyBNMjU2LDI1NiBsMTAwLDEwMCBsNTAsMFxyXG5cclxuc3RhcnRpbmdUaW1lUmVjb3JkID0gbnVsbFxyXG5cclxuc3ZndXJsID0gXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXHJcbnN2ZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkICdzdmdPbmUnXHJcblxyXG4jcG9zaXRpb24gPSBbNTkuMDk0NDMwODcyOTQxNzQsIDE3LjcxNDI5NzUyOTQ4ODRdICMgNjU1MzYwMCw2NTUzNjBcclxucG9zaXRpb24gPSBbNTkuMjY1MTk2LCAxOC4xMzI3NDhdICMgSG9tZSAobGF0IGxvbmcpXHJcbiNncmlkID0gW11cclxuXHJcbmNlbnRlciA9IFtdICMgc2vDpHJtZW5zIG1pdHRwdW5rdCAoc3dlcmVmKS4gUMOldmVya2FzIGF2IHBhbiAoeCB5KSAoNiA3KVxyXG50YXJnZXQgPSBbXSAjIG3DpWxrb29yZGluYXRlciAoc3dlcmVmKVxyXG5cclxubW91c2UgPSBbXVxyXG5pbWFnZXMgPSBbXVxyXG5yZWN0cyA9IFtdXHJcbnRleHRzID0gW11cclxuYnV0dG9ucyA9IHt9XHJcblxyXG5zZW5kTWFpbCA9IChzdWJqZWN0LGJvZHkpIC0+XHJcblx0bWFpbC5ocmVmID0gXCJtYWlsdG86amFuY2hyaXN0ZXIubmlsc3NvbkBnbWFpbC5jb20/c3ViamVjdD1cIiArIGVuY29kZVVSSUNvbXBvbmVudChzdWJqZWN0KSArIFwiJmJvZHk9XCIgKyBlbmNvZGVVUklDb21wb25lbnQoYm9keSlcclxuXHRtYWlsLmNsaWNrKClcclxuXHJcbnNldEF0dHJzID0gKG9iaixhdHRycykgLT5cclxuXHRpZiBub3Qgb2JqIHRoZW4gcmV0dXJuIFxyXG5cdGZvciBrZXkgb2YgYXR0cnNcclxuXHRcdG9iai5zZXRBdHRyaWJ1dGVOUyBudWxsLCBrZXksIGF0dHJzW2tleV1cclxuXHJcbmFkZCA9ICh0eXBlLHBhcmVudCxhdHRycykgLT5cclxuXHRvYmogPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMgc3ZndXJsLCB0eXBlXHJcblx0cGFyZW50LmFwcGVuZENoaWxkIG9ialxyXG5cdHNldEF0dHJzIG9iaixhdHRyc1xyXG5cdG9ialxyXG5cclxuY2xpY2sgPSAocykgLT5cclxuXHRldmVudC5wcmV2ZW50RGVmYXVsdCgpXHJcblx0aWYgcz09J2luJyAgYW5kIFNJWkUgPiA2NCB0aGVuIFNJWkUgLy89IDJcclxuXHRpZiBzPT0nb3V0JyBhbmQgU0laRSA8IDY1NTM2IHRoZW4gU0laRSAqPSAyXHJcblx0aWYgcz09J2NlbnRlcicgdGhlbiBjZW50cmVyYSgpXHJcblx0aWYgcz09J2FpbScgdGhlbiBhaW1FdmVudCgpXHJcblx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcclxuXHRkcmF3TWFwKClcclxuXHJcbm1vdXNlZG93biA9IChldmVudCkgLT4gbW91c2UgPSBbZXZlbnQueCxldmVudC55XVxyXG5tb3VzZXVwICAgPSAoZXZlbnQpIC0+IG1vdXNlID0gW11cclxubW91c2Vtb3ZlID0gKGV2ZW50KSAtPlxyXG5cdGlmIG1vdXNlLmxlbmd0aCA9PSAwIHRoZW4gcmV0dXJuXHJcblx0ZmFjdG9yID0gMlxyXG5cdGlmIFNJWkUgPT0gNjQgdGhlbiBmYWN0b3IgPSAwLjI1XHJcblx0aWYgU0laRSA9PSAxMjggdGhlbiBmYWN0b3IgPSAwLjVcclxuXHRpZiBTSVpFID09IDI1NiB0aGVuIGZhY3RvciA9IDFcclxuXHRkeCA9IGV2ZW50Lm1vdmVtZW50WFxyXG5cdGR5ID0gZXZlbnQubW92ZW1lbnRZXHJcblx0bW91c2UgPSBbZHgsZHldXHJcblx0Y2VudGVyWzBdIC09IGR4ICogZmFjdG9yXHJcblx0Y2VudGVyWzFdICs9IGR5ICogZmFjdG9yXHJcblx0dXBkYXRlTW9kZSA9IDBcclxuXHRkcmF3TWFwKClcclxuXHJcbnRvdWNoc3RhcnQgPSAoZXZlbnQpIC0+XHJcblx0ZXZlbnQucHJldmVudERlZmF1bHQoKVxyXG5cdHRvdWNoZXMgPSBldmVudC50YXJnZXRUb3VjaGVzXHJcblx0aWYgdG91Y2hlcy5sZW5ndGggIT0gMSB0aGVuIHJldHVyblxyXG5cdHRvdWNoID0gdG91Y2hlc1swXVxyXG5cdG1vdXNlID0gW3RvdWNoLmNsaWVudFgsdG91Y2guY2xpZW50WV1cclxuXHJcbnRvdWNoZW5kID0gKGV2ZW50KSAtPlxyXG5cdGV2ZW50LnByZXZlbnREZWZhdWx0KClcclxuXHRtb3VzZSA9IFtdXHJcblx0ZHJhd01hcCgpXHJcblxyXG50b3VjaG1vdmUgPSAoZXZlbnQpIC0+XHJcblx0ZXZlbnQucHJldmVudERlZmF1bHQoKVxyXG5cdGlmIG1vdXNlLmxlbmd0aCA9PSAwIHRoZW4gcmV0dXJuXHJcblx0dG91Y2hlcyA9IGV2ZW50LnRhcmdldFRvdWNoZXNcclxuXHRpZiB0b3VjaGVzLmxlbmd0aCAhPSAxIHRoZW4gcmV0dXJuXHJcblx0dG91Y2ggPSB0b3VjaGVzWzBdXHJcblx0ZmFjdG9yID0gMlxyXG5cdGlmIFNJWkUgPT0gNjQgdGhlbiBmYWN0b3IgPSAwLjI1XHJcblx0aWYgU0laRSA9PSAxMjggdGhlbiBmYWN0b3IgPSAwLjVcclxuXHRpZiBTSVpFID09IDI1NiB0aGVuIGZhY3RvciA9IDFcclxuXHRkeCA9IHRvdWNoLmNsaWVudFggLSBtb3VzZVswXVxyXG5cdGR5ID0gdG91Y2guY2xpZW50WSAtIG1vdXNlWzFdXHJcblx0bW91c2UgPSBbdG91Y2guY2xpZW50WCx0b3VjaC5jbGllbnRZXVxyXG5cdGNlbnRlclswXSAtPSBkeCAqIGZhY3RvclxyXG5cdGNlbnRlclsxXSArPSBkeSAqIGZhY3RvclxyXG5cdHVwZGF0ZU1vZGUgPSAwXHJcblx0ZHJhd01hcCgpXHJcblxyXG5zdmcuYWRkRXZlbnRMaXN0ZW5lciAndG91Y2hzdGFydCcsIHRvdWNoc3RhcnRcclxuc3ZnLmFkZEV2ZW50TGlzdGVuZXIgJ3RvdWNobW92ZScsICB0b3VjaG1vdmVcclxuc3ZnLmFkZEV2ZW50TGlzdGVuZXIgJ3RvdWNoZW5kJywgICB0b3VjaGVuZFxyXG5cclxuc3ZnLmFkZEV2ZW50TGlzdGVuZXIgJ21vdXNlZG93bicsIG1vdXNlZG93blxyXG5zdmcuYWRkRXZlbnRMaXN0ZW5lciAnbW91c2Vtb3ZlJywgbW91c2Vtb3ZlXHJcbnN2Zy5hZGRFdmVudExpc3RlbmVyICdtb3VzZXVwJywgICBtb3VzZXVwXHJcblxyXG5jb252ZXJ0ID0gKFt4LHldLHNpemU9U0laRSkgLT4gIyBzd2VyZWYgcHVua3RcclxuXHRkeCA9IHggJSBzaXplICMgYmVyw6RrbmEgdmVrdG9yIGR4LGR5IChzd2VyZWYpXHJcblx0ZHkgPSB5ICUgc2l6ZVxyXG5cdHggLT0gZHggICAgICAgIyBiZXLDpGtuYSBydXRhbnMgU1cgaMO2cm4geCx5IChzd2VyZWYpXHJcblx0eSAtPSBkeVxyXG5cdGR4ID0gbWFwIGR4LCAwLHNpemUsIDAsVElMRSAjIG1hcCBuLHN0YXJ0MSxzdG9wMSxzdGFydDIsc3RvcDJcclxuXHRkeSA9IG1hcCBkeSwgMCxzaXplLCAwLFRJTEVcclxuXHRbeCx5LCBkeCxkeV1cclxuYXNzIFs2NTUzNjAsNjU1MzYwMCw2NCw3Ml0sIGNvbnZlcnQgWzY1NTM2MCsxNiw2NTUzNjAwKzE4XSw2NFxyXG5hc3MgWzY1NTM2MCw2NTUzNjAwLDEyOCwxMjhdLCBjb252ZXJ0IFs2NTUzNjArNjQsNjU1MzYwMCs2NF0sMTI4XHJcbmFzcyBbNjU1MzYwKzEyOCw2NTUzNjAwKzEyOCwwLDBdLCBjb252ZXJ0IFs2NTUzNjArMTI4LDY1NTM2MDArMTI4XSwxMjhcclxuYXNzIFs2NTUzNjAsNjU1MzYwMCw0NCw0NF0sIGNvbnZlcnQgWzY1NTM2MCsyMiw2NTUzNjAwKzIyXSwxMjhcclxuYXNzIFs2NTUzNjAsNjU1MzYwMCwxMjgsMTI4XSwgY29udmVydCBbNjU1MzYwKzEyOCw2NTUzNjAwKzEyOF0sMjU2XHJcbmFzcyBbNjU1MzYwLDY1NTM2MDAsNjQsNjRdLCBjb252ZXJ0IFs2NTUzNjArNjQsNjU1MzYwMCs2NF0sMjU2XHJcbmFzcyBbNjU1MzYwLDY1NTM2MDAsNjQsNzRdLCBjb252ZXJ0IFs2NTUzNjArMTI4LDY1NTM2MDArMTQ4XSw1MTJcclxuYXNzIFs2NTUzNjAsNjU1MzYwMCwzMiwzMl0sIGNvbnZlcnQgWzY1NTM2MCs2NCw2NTUzNjAwKzY0XSw1MTJcclxuYXNzIFs2NTUzNjAsNjU1MzYwMCwyMDAsMjUwXSwgY29udmVydCBbNjU1MzYwKzQwMCw2NTUzNjAwKzUwMF0sNTEyXHJcbmFzcyBbNjU1MzYwLDY1NTM2MDAsMzIsMzddLCBjb252ZXJ0IFs2NTUzNjArMTI4LDY1NTM2MDArMTQ4XSwxMDI0XHJcbmFzcyBbNjU1MzYwLDY1NTM2MDAsMTYsMTZdLCBjb252ZXJ0IFs2NTUzNjArNjQsNjU1MzYwMCs2NF0sMTAyNFxyXG5hc3MgWzY1NTM2MCw2NTUzNjAwLDEwMCwxMjVdLCBjb252ZXJ0IFs2NTUzNjArNDAwLDY1NTM2MDArNTAwXSwxMDI0XHJcblxyXG51cGRhdGVUcmFpbCA9IChiYXNlWCxiYXNlWSxkeCxkeSkgLT5cclxuXHRpZiBub3QgcGxheVBhdGhcclxuXHRcdHNldEF0dHJzIHRyYWlsLCB7cG9pbnRzOicnfVxyXG5cdFx0cmV0dXJuXHJcblxyXG5cdHgwID0gYmFzZVggLSBTSVpFXHJcblx0eDEgPSBiYXNlWCArIFNJWkVcclxuXHR5MCA9IGJhc2VZIC0gU0laRVxyXG5cdHkxID0gYmFzZVkgKyBTSVpFXHJcblxyXG5cdHMgPSBbXVxyXG5cdGZvciBbeCx5XSxpIGluIHBsYXlQYXRoLnBvaW50c1xyXG5cdFx0I2lmIGkgJSA1ICE9IDAgdGhlbiBjb250aW51ZVxyXG5cdFx0eHggPSBtYXAgeCwgeDAseDEsIFcvMiAtIFRJTEUsIFcvMiArIFRJTEVcclxuXHRcdHl5ID0gbWFwIHksIHkwLHkxLCBILzIgLSBUSUxFLCBILzIgKyBUSUxFXHJcblx0XHRzLnB1c2ggXCIje01hdGgucm91bmQgeHgtZHh9LCN7TWF0aC5yb3VuZCBIK2R5LXl5fVwiXHJcblx0c2V0QXR0cnMgdHJhaWwsIHtwb2ludHM6cy5qb2luICcgJ31cclxuXHJcbmRyYXdNYXAgPSAtPlxyXG5cdFtiYXNlWCxiYXNlWSxkeCxkeV0gPSBjb252ZXJ0IGNlbnRlclxyXG5cdGZvciBqIGluIHJhbmdlIC1uaCxuaCsxXHJcblx0XHR5ID0gYmFzZVkgKyBqICogU0laRSAtIFNJWkVcclxuXHRcdHB5ID0gSC8yIC0gVElMRSpqICsgZHlcclxuXHRcdGZvciBpIGluIHJhbmdlIC1udyxudysxXHJcblx0XHRcdHggPSBiYXNlWCArIGkgKiBTSVpFXHJcblx0XHRcdHB4ID0gVy8yICsgVElMRSppIC0gZHhcclxuXHRcdFx0aHJlZiA9IFwibWFwc1xcXFwje1NJWkV9XFxcXCN7eX0tI3t4fS0je1NJWkV9LmpwZ1wiXHJcblx0XHRcdGlmIGhyZWYgIT0gaW1hZ2VzW2orbmhdW2krbnddLmdldEF0dHJpYnV0ZU5TIG51bGwsJ2hyZWYnICMgb25seSB1cGRhdGUgaWYgbmVlZGVkXHJcblx0XHRcdFx0c2V0QXR0cnMgaW1hZ2VzW2orbmhdW2krbnddLCB7aHJlZjpocmVmfVxyXG5cdFx0XHRzZXRBdHRycyBpbWFnZXNbaituaF1baStud10sIHt4OnB4LCB5OnB5fVxyXG5cdFx0XHRzZXRBdHRycyByZWN0c1tqK25oXVtpK253XSwgIHt4OnB4LCB5OnB5fVxyXG5cclxuXHR1cGRhdGVUcmFpbCBNYXRoLnJvdW5kKGJhc2VYKSxNYXRoLnJvdW5kKGJhc2VZKSxNYXRoLnJvdW5kKGR4KSxNYXRoLnJvdW5kKGR5KVxyXG5cclxuXHR1cGRhdGVUZXh0cygpXHJcblxyXG51cGRhdGVUZXh0cyA9IC0+XHJcblx0aWYgdGV4dHMubGVuZ3RoID09IDhcclxuXHRcdHRleHRzWzBdLnRleHRDb250ZW50ID0gaWYgdGFyZ2V0Lmxlbmd0aD09MiB0aGVuIFwiI3tiZWFyaW5nIHRhcmdldCxjZW50ZXJ9IMK6XCIgZWxzZSBcIlwiXHJcblx0XHR0ZXh0c1sxXS50ZXh0Q29udGVudCA9IGlmIHRhcmdldC5sZW5ndGg9PTIgdGhlbiBcIiN7TWF0aC5yb3VuZCBkaXN0YW5jZSB0YXJnZXQsY2VudGVyfSBtXCIgZWxzZSBcIlwiXHJcblx0XHR0ZXh0c1syXS50ZXh0Q29udGVudCA9IGlmIHBsYXlNb2RlPT0xIHRoZW4gXCJQICMje2N1cnJ9IG9mICN7cGxheVBhdGgucG9pbnRzLmxlbmd0aH0gKCN7bXlSb3VuZCAxMDAqY3Vyci9wbGF5UGF0aC5wb2ludHMubGVuZ3RofSUpICN7cGxheVBhdGguZGlzdGFuY2V9bSBFVEEgI3tteVJvdW5kIEVUQX1zXCIgZWxzZSBcIlwiXHJcblx0XHR0ID0gbmV3IERhdGUoKVxyXG5cdFx0ZWxhcHNlZFRpbWUgPSAodCAtIHN0YXJ0aW5nVGltZVJlY29yZCkvMTAwMCAjIHNlY3NcclxuXHRcdHRleHRzWzNdLnRleHRDb250ZW50ID0gaWYgcmVjb3JkID09IDEgdGhlbiBcIlIgIyN7cmVjb3JkUGF0aC5wb2ludHMubGVuZ3RofSAje215Um91bmQgZWxhcHNlZFRpbWV9cyAje215Um91bmQgdXNlckRpc3RhbmNlUmVjb3JkfW1cIiBlbHNlIFwiXCJcclxuXHRcdHRleHRzWzRdLnRleHRDb250ZW50ID0gXCJUcmFja3M6ICN7Ym94ZXMubGVuZ3RofVwiXHJcblxyXG5cdFx0dGV4dHNbNV0udGV4dENvbnRlbnQgPSBcIloje1NJWkV9IFUje3VwZGF0ZU1vZGV9IFAje3BsYXlNb2RlfSBSI3tyZWNvcmR9IFYje1ZFUlNJT059XCJcclxuXHRcdHRleHRzWzZdLnRleHRDb250ZW50ID0gXCJYI3tteVJvdW5kIGNlbnRlclswXX0gWSN7bXlSb3VuZCBjZW50ZXJbMV19XCJcclxuXHRcdHRleHRzWzddLnRleHRDb250ZW50ID0gXCJOI3tteVJvdW5kIHBvc2l0aW9uWzBdLDZ9IEUje215Um91bmQgcG9zaXRpb25bMV0sNn1cIlxyXG5cdFx0XHJcblx0XHRpZiBidXR0b25zLnRhcmdldCB0aGVuIGJ1dHRvbnMudGFyZ2V0Lm1vdmUoKVxyXG5cclxuY2VudHJlcmEgPSAtPlxyXG5cdHVwZGF0ZU1vZGUgPSAxXHJcblx0Z3JpZCA9IGdlb2RldGljX3RvX2dyaWQgcG9zaXRpb25bMF0scG9zaXRpb25bMV1cclxuXHRjZW50ZXIgPSAoZyBmb3IgZyBpbiBncmlkKVxyXG5cdGNlbnRlci5yZXZlcnNlKClcclxuXHRkcmF3TWFwKClcclxuXHJcbmFpbUV2ZW50ID0gLT5cclxuXHRpZiB0YXJnZXQubGVuZ3RoID09IDBcclxuXHRcdHRhcmdldCA9IGNlbnRlci5zbGljZSgpXHJcblx0XHRidXR0b25zLnRhcmdldC5tb3ZlSGFyZCBXLzIsSC8yXHJcblx0ZWxzZVxyXG5cdFx0dGFyZ2V0ID0gW11cclxuXHRcdGJ1dHRvbnMudGFyZ2V0Lm1vdmVIYXJkIElOVklTSUJMRSwgSU5WSVNJQkxFXHJcblxyXG4jIyMjI1xyXG5cclxubG9hZFRoZVBhdGggPSAtPiAjIHVybCAtPiBsb2NhbFN0b3JhZ2VcclxuXHRib3hlcyA9IGlmIGxvY2FsU3RvcmFnZS5ib3hlcyB0aGVuIEpTT04ucGFyc2UgbG9jYWxTdG9yYWdlLmJveGVzIGVsc2UgW11cclxuXHRwYXJhbWV0ZXJzID0gZ2V0UGFyYW1ldGVycygpXHJcblx0aWYgbm90IHBhcmFtZXRlcnMucGF0aCB0aGVuIHJldHVyblxyXG5cdHBsYXlQYXRoID0gbmV3IFBhdGggcGFyYW1ldGVycy5wYXRoXHJcblx0cGxheVBhdGguc2F2ZSgpXHJcblxyXG5jbGVhclRoZVBhdGggPSAtPlxyXG5cdHBsYXlQYXRoID0gbnVsbFxyXG5cdGRyYXdNYXAoKVxyXG5cdG1vcmUgMFxyXG5cclxuZmV0Y2hUaGVQYXRoID0gLT4gIyB2aXNhIGFsbGEgc3lubGlnYSBwYXRocy4gTsOkcm1hc3RlIGd1bG1hcmtlcmFzLCDDtnZyaWdhIGdyw6VtYXJrZXJhc1xyXG5cdGJlc3REaXN0ID0gOTk5OTk5OVxyXG5cdGJlc3RpID0gLTFcclxuXHRmb3IgW2tleSxbW3gwLHkwXSxbeDEseTFdXV0saSBpbiBib3hlc1xyXG5cdFx0Zm9yIHAgaW4gW1t4MCx5MF0sW3gwLHkxXSxbeDEseTBdLFt4MSx5MV1dXHJcblx0XHRcdGQgPSBkaXN0YW5jZSBwLGNlbnRlclxyXG5cdFx0XHRpZiBkIDwgYmVzdERpc3RcclxuXHRcdFx0XHRiZXN0RGlzdCA9IGRcclxuXHRcdFx0XHRiZXN0aSA9IGlcclxuXHRpZiBiZXN0aSAhPSAtMVxyXG5cdFx0cGxheVBhdGggPSBuZXcgUGF0aCBsb2NhbFN0b3JhZ2VbYm94ZXNbYmVzdGldWzBdXVxyXG5cclxuXHRcdGNvbnNvbGUubG9nIHBsYXlQYXRoLnBvaW50c1xyXG5cclxuXHRcdGNlbnRlciA9IHBsYXlQYXRoLnBvaW50c1swXS5zbGljZSgpXHJcblx0bW9yZSAwXHJcblx0ZHJhd01hcCgpXHJcblxyXG5tYXJrID0gLT4gIyBTcGFyYSBjZW50ZXIgaSBsb2NhbFN0b3JhZ2VcclxuXHR0ZW1wID0gbmV3IFBhdGggXCIje01hdGgucm91bmQgY2VudGVyWzBdfSwje01hdGgucm91bmQgY2VudGVyWzFdfVwiXHJcblx0dGVtcC5zYXZlKClcclxuXHRtb3JlIDBcclxuXHJcbnBsYXlUaGVQYXRoID0gLT5cclxuXHRwbGF5TW9kZSA9IDEgLSBwbGF5TW9kZVxyXG5cdHN0YXJ0ZWQgPSBmYWxzZVxyXG5cdGVuZGVkID0gZmFsc2VcclxuXHRtYWtlSGludHMoKVxyXG5cdG1vcmUgMFxyXG5cclxuZGVsZXRlVGhlUGF0aCA9IC0+ICMgdGFnIGJvcnQgY3VycmVudCBQYXRoIGZyw6VuIGxvY2FsU3RvcmFnZVxyXG5cdHBsYXlQYXRoLmRlbGV0ZSgpXHJcblx0bW9yZSAwXHJcblxyXG5yZWNvcmRUaGVQYXRoID0gLT4gIyBzdGFydC9zdG9wcCBhdiBpbnNwZWxuaW5nIGF2IHBhdGhcclxuXHRyZWNvcmQgPSAxIC0gcmVjb3JkXHJcblx0aWYgcmVjb3JkID09IDFcclxuXHRcdHJlY29yZFBhdGggPSBuZXcgUGF0aCBcIlwiXHJcblx0XHRzdGFydGluZ1RpbWVSZWNvcmQgPSBuZXcgRGF0ZSgpXHJcblx0aWYgcmVjb3JkID09IDAgdGhlbiByZWNvcmRQYXRoLnNhdmUoKVxyXG5cdGJ1dHRvbnMucmVjb3JkLnNldFRleHRGaWxsIFsnIzAwMGYnLCcjZjAwZiddW3JlY29yZF1cclxuXHR0ZXh0c1syXS50ZXh0Q29udGVudCA9IFwiI3tyZWNvcmRQYXRoLnBvaW50cy5sZW5ndGh9XCJcclxuXHRtb3JlIDBcclxuXHJcbnNob3dCb3hlcyA9IChib2R5KSAtPlxyXG5cclxuXHR0b3RhbCA9IDBcclxuXHRmb3IgYm94LGkgaW4gYm94ZXNcclxuXHRcdFtoYXNoLFtbeG1pbix5bWluXSxbeG1heCx5bWF4XV1dID0gYm94XHJcblx0XHRieXRlcyA9IGxvY2FsU3RvcmFnZVtoYXNoXS5sZW5ndGhcclxuXHRcdGJvZHkgKz0gXCJUcmFjayAje2krMX06IHhtaW49I3t4bWlufSB5bWluPSN7eW1pbn0geG1heD0je3htYXh9IHltYXg9I3t5bWF4fSBoYXNoPSN7aGFzaH0gYnl0ZXM9I3tieXRlc31cXG5cIlxyXG5cdFx0dG90YWwgKz0gYnl0ZXNcclxuXHRib2R5ICs9IFwiXFxuU2l6ZSBpbiBieXRlczogI3t0b3RhbH1cXG5cIlxyXG5cdHJldHVybiBib2R5XHJcblxyXG5zaGFyZVRoZVBhdGggPSAtPlxyXG5cdHRyeVxyXG5cdFx0aGVhZGVyID0gJydcclxuXHRcdGJvZHkgPSAnJ1xyXG5cclxuXHRcdG1lc3NhZ2VzLnB1c2ggJydcclxuXHRcdG1lc3NhZ2VzLnB1c2ggJ0V4cGxhbmF0aW9uczonXHJcblx0XHRtZXNzYWdlcy5wdXNoICcgSElOVCBpbmRleCB4IHkgKGRpc3RhbmNlIGluIG1ldGVyKSdcclxuXHRcdG1lc3NhZ2VzLnB1c2ggJyBTQVkgdGV4dCdcclxuXHRcdG1lc3NhZ2VzLnB1c2ggJyBMVSB4IHkgKGdwcyBsb2NhdGlvbiBpbiBTV0VSRUYpJ1xyXG5cdFx0bWVzc2FnZXMucHVzaCAnIGdwcyBpbmRleCAoZGlzdGFuY2UgaW4gbWV0ZXIpIGNsb3Nlc3QgcG9pbnQgaW4gdHJhY2sgYmVpbmcgcGxheWVkJ1xyXG5cdFx0bWVzc2FnZXMucHVzaCAnIHRyYWNrU3RhcnRlZCB5eXl5LW1tLWRkIGhoOm1tOnNzJ1xyXG5cdFx0bWVzc2FnZXMucHVzaCAnIHRyYWNrRW5kZWQgICB5eXl5LW1tLWRkIGhoOm1tOnNzJ1xyXG5cdFx0bWVzc2FnZXMucHVzaCAnJ1xyXG5cdFx0bWVzc2FnZXMucHVzaCBcIlZFUlNJT04gI3tWRVJTSU9OfVwiXHJcblx0XHRtZXNzYWdlcy5wdXNoIFwiUkVTT0xVVElPTiAje1JFU09MVVRJT059XCJcclxuXHRcdG1lc3NhZ2VzLnB1c2ggXCJjdXJyICN7Y3Vycn1cIlxyXG5cdFx0bWVzc2FnZXMucHVzaCBcImxhc3RXb3JkICN7bGFzdFdvcmR9XCJcclxuXHRcdG1lc3NhZ2VzLnB1c2ggXCJsYXN0U3Bva2VuICN7bGFzdFNwb2tlbn1cIlxyXG5cdFx0bWVzc2FnZXMucHVzaCBcInN0YXJ0ZWQgI3tzdGFydGVkfVwiXHJcblx0XHRtZXNzYWdlcy5wdXNoIFwiZW5kZWQgI3tlbmRlZH1cIlxyXG5cdFx0aWYgc3RhcnRpbmdUaW1lUGxheSB0aGVuIG1lc3NhZ2VzLnB1c2ggXCJzdGFydGluZ1RpbWVQbGF5ICN7c3RhcnRpbmdUaW1lUGxheS50b0xvY2FsZVN0cmluZyBzdn1cIlxyXG5cdFx0aWYgc3RhcnRpbmdUaW1lUmVjb3JkIHRoZW4gbWVzc2FnZXMucHVzaCBcInN0YXJ0aW5nVGltZVJlY29yZCAje3N0YXJ0aW5nVGltZVJlY29yZC50b0xvY2FsZVN0cmluZyBzdn1cIlxyXG5cdFx0aWYgZW5kaW5nVGltZSB0aGVuIG1lc3NhZ2VzLnB1c2ggXCJlbmRpbmdUaW1lICN7ZW5kaW5nVGltZS50b0xvY2FsZVN0cmluZyBzdn1cIlxyXG5cdFx0bWVzc2FnZXMucHVzaCBcImVsYXBzZWRUaW1lICN7bXlSb3VuZCBlbGFwc2VkVGltZS8xMDAwfVwiXHJcblx0XHRtZXNzYWdlcy5wdXNoIFwidXNlckRpc3RhbmNlUGxheSAje215Um91bmQgdXNlckRpc3RhbmNlUGxheX1cIlxyXG5cdFx0bWVzc2FnZXMucHVzaCBcInVzZXJEaXN0YW5jZVJlY29yZCAje215Um91bmQgdXNlckRpc3RhbmNlUmVjb3JkfVwiXHJcblx0XHRtZXNzYWdlcy5wdXNoIFwibGFzdEVUQSAje2xhc3RFVEF9XCJcclxuXHRcdG1lc3NhZ2VzLnB1c2ggXCJ1cGRhdGVNb2RlICN7dXBkYXRlTW9kZX1cIlxyXG5cdFx0bWVzc2FnZXMucHVzaCBcIm1vcmVNb2RlICN7bW9yZU1vZGV9XCJcclxuXHRcdG1lc3NhZ2VzLnB1c2ggXCJwbGF5TW9kZSAje3BsYXlNb2RlfVwiXHJcblx0XHRtZXNzYWdlcy5wdXNoIFwicmVjb3JkICN7cmVjb3JkfVwiXHJcblx0XHRtZXNzYWdlcy5wdXNoIFwiXCJcclxuXHRcdG1lc3NhZ2VzLnB1c2ggXCJoaW50czogI3tfLnNpemUgaGludHN9XCJcclxuXHRcdGZvciBrZXkgb2YgaGludHNcclxuXHRcdFx0bWVzc2FnZXMucHVzaCBcIiN7a2V5fSAje2hpbnRzW2tleV19XCJcclxuXHRcdG1lc3NhZ2VzLnB1c2ggXCJcIlxyXG5cclxuXHRcdGlmIG1lc3NhZ2VzIHRoZW4gYm9keSArPSBtZXNzYWdlcy5qb2luIFwiXFxuXCJcclxuXHRcdGJvZHkgKz0gXCJcXG5cIlxyXG5cclxuXHRcdGlmIHBsYXlQYXRoIGFuZCBwbGF5UGF0aC5wb2ludHMubGVuZ3RoID4gMFxyXG5cdFx0XHRoZWFkZXIgKz0gXCJQICN7bXlSb3VuZCB1c2VyRGlzdGFuY2VQbGF5fSBtZXRlciAje3BsYXlQYXRoLnBvaW50cy5sZW5ndGh9IHBvaW50c1wiXHJcblx0XHRcdGJvZHkgKz0gXCJQbGF5ICN7d2luZG93LmxvY2F0aW9uLm9yaWdpbiArIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZX0/cGF0aD0je3BsYXlQYXRoLnBhdGh9XFxuXCJcclxuXHJcblx0XHRpZiByZWNvcmRQYXRoIGFuZCByZWNvcmRQYXRoLnBvaW50cy5sZW5ndGggPiAwXHJcblx0XHRcdGhlYWRlciArPSBcIlIgI3tteVJvdW5kIHVzZXJEaXN0YW5jZVJlY29yZH0gbWV0ZXIgI3tyZWNvcmRQYXRoLnBvaW50cy5sZW5ndGh9IHBvaW50c1wiXHJcblx0XHRcdGJvZHkgKz0gXCJSZWNvcmQgI3t3aW5kb3cubG9jYXRpb24ub3JpZ2luICsgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lfT9wYXRoPSN7cmVjb3JkUGF0aC5wYXRofVxcblwiXHJcblxyXG5cdFx0Ym9keSArPSBcIlxcblwiXHJcblx0XHRib2R5ID0gc2hvd0JveGVzIGJvZHlcclxuXHJcblx0XHRzZW5kTWFpbCBoZWFkZXIsIGJvZHlcclxuXHRcdG1lc3NhZ2VzLmxlbmd0aCA9IDBcclxuXHRcdG1vcmUgMFxyXG5cdGNhdGNoIGVyclxyXG5cdFx0bWVzc2FnZXMucHVzaCBlcnIubWVzc2FnZVxyXG5cdFx0bWVzc2FnZXMucHVzaCBlcnIuc3RhY2tcclxuXHJcbnJldmVyc2VUaGVQYXRoID0gLT5cclxuXHRwbGF5UGF0aC5wb2ludHMucmV2ZXJzZSgpXHJcblx0bWVzc2FnZXMucHVzaCBcInJldmVyc2VcIlxyXG5cdGRyYXdNYXAoKVxyXG5cdG1vcmUgMFxyXG5cclxuIyMjIyNcclxuXHJcbm1ha2VUZXh0ID0gKHgseSxjb2xvcj0nYmxhY2snKSAtPlxyXG5cdHRleHQgPSBhZGQgJ3RleHQnLHN2Zywge3g6eCwgeTp5LCBmaWxsOmNvbG9yLCBzdHJva2U6J25vbmUnLCAnc3Ryb2tlLXdpZHRoJzoxLCAndGV4dC1hbmNob3InOidtaWRkbGUnfVxyXG5cdHRleHQuc3R5bGUuZm9udFNpemUgPSAnNDBweCdcclxuXHR0ZXh0LnN0eWxlLnVzZXJTZWxlY3QgPSAnbm9uZSdcclxuXHR0ZXh0cy5wdXNoIHRleHRcclxuXHJcbm5hZGEgPSAoZXZlbnQpIC0+XHJcblx0ZXZlbnQucHJldmVudERlZmF1bHQoKVxyXG5cdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXHJcblxyXG5sb2NhdGlvblVwZGF0ZUZhaWwgPSAoZXJyb3IpIC0+XHRtZXNzYWdlcy5wdXNoIFwibG9jYXRpb25VcGRhdGVGYWlsICN7ZXJyb3J9XCIgXHJcblxyXG5sb2NhdGlvblVwZGF0ZSA9IChwKSAtPlxyXG5cdHBvc2l0aW9uID0gW3AuY29vcmRzLmxhdGl0dWRlLCBwLmNvb3Jkcy5sb25naXR1ZGVdXHJcblx0eHkgPSBnZW9kZXRpY190b19ncmlkIHBvc2l0aW9uWzBdLHBvc2l0aW9uWzFdXHJcblx0eHkucmV2ZXJzZSgpXHJcblx0biA9IGdwc1BvaW50cy5sZW5ndGhcclxuXHRpZiBuID4gMCBhbmQgUkVTT0xVVElPTiA+IGRpc3RhbmNlIHh5LGdwc1BvaW50c1tuLTFdXHJcblx0XHRtZXNzYWdlcy5wdXNoIFwic2tpcHBlZCAje215Um91bmQgeHlbMF19ICN7bXlSb3VuZCB4eVsxXX1cIlxyXG5cdFx0cmV0dXJuIFxyXG5cdGdwc1BvaW50cy5wdXNoIHh5LnNsaWNlKClcclxuXHRpZiBncHNQb2ludHMubGVuZ3RoID4gMTAgdGhlbiBncHNQb2ludHMuc2hpZnQoKVxyXG5cdG1lc3NhZ2VzLnB1c2ggXCJMVSAje215Um91bmQgeHlbMF19ICN7bXlSb3VuZCB4eVsxXX1cIlxyXG5cdGlmIHJlY29yZCA9PSAxXHJcblx0XHRyZWNvcmRQYXRoLnBvaW50cy5wdXNoIHh5LnNsaWNlKClcclxuXHRcdG4gPSBncHNQb2ludHMubGVuZ3RoXHJcblx0XHRpZiBuID4gMSB0aGVuIHVzZXJEaXN0YW5jZVJlY29yZCArPSBkaXN0YW5jZSBncHNQb2ludHNbbi0yXSxncHNQb2ludHNbbi0xXVxyXG5cclxuXHRpZiB1cGRhdGVNb2RlID09IDEgdGhlbiBjZW50ZXIgPSB4eVxyXG5cdGlmIHBsYXlNb2RlID09IDEgdGhlbiBzYXlIaW50IGdwc1BvaW50c1xyXG5cdGRyYXdNYXAoKVxyXG5cclxuaW5pdEdQUyA9IC0+XHJcblx0bmF2aWdhdG9yLmdlb2xvY2F0aW9uLndhdGNoUG9zaXRpb24gbG9jYXRpb25VcGRhdGUsIGxvY2F0aW9uVXBkYXRlRmFpbCxcclxuXHRcdGVuYWJsZUhpZ2hBY2N1cmFjeTogdHJ1ZVxyXG5cdFx0bWF4aW11bUFnZTogMzAwMDBcclxuXHRcdHRpbWVvdXQ6IDI3MDAwXHJcblxyXG5tYWtlTWFya2VyID0gKG5hbWUsbixjb2xvcikgLT5cclxuXHRyZXN1bHQgPSBhZGQgJ21hcmtlcicsIHN2ZywgXHJcblx0XHRpZCA6IG5hbWVcclxuXHRcdHZpZXdCb3ggOiBcIi0xIC0xICN7MipuKzF9ICN7MipuKzF9XCJcclxuXHRcdHJlZlggOiBuXHJcblx0XHRyZWZZIDogblxyXG5cdFx0bWFya2VyV2lkdGggOiBuXHJcblx0XHRtYXJrZXJIZWlnaHQgOiBuXHJcblx0YWRkICdjaXJjbGUnLCByZXN1bHQsXHJcblx0XHRjeCA6IG5cclxuXHRcdGN5IDogblxyXG5cdFx0ciA6IG5cclxuXHRcdGZpbGwgOiBjb2xvclxyXG5cdFx0c3Ryb2tlIDogJ2JsYWNrJ1xyXG5cdHJlc3VsdFxyXG5cclxuaW5pdFRyYWlsID0gLT5cclxuXHRpZiBmYWxzZVxyXG5cdFx0dHJhaWwgPSBhZGQgJ3BhdGgnLCBzdmcsIHtkOlwiXCIsIHN0cm9rZToncmVkJywgJ3N0cm9rZS13aWR0aCc6MSwgZmlsbDonbm9uZSd9XHJcblx0ZWxzZVxyXG5cdFx0bWFrZU1hcmtlciAnc3RhcnQnLCA4LCAnZ3JlZW4nXHJcblx0XHRtYWtlTWFya2VyICdkb3QnLCA0LCd5ZWxsb3cnXHJcblx0XHRtYWtlTWFya2VyICdlbmQnLCA4LCAncmVkJ1xyXG5cdFx0dHJhaWwgPSBhZGQgJ3BvbHlsaW5lJywgc3ZnLCBcclxuXHRcdFx0cG9pbnRzIDogJydcclxuXHRcdFx0ZmlsbCA6ICdub25lJ1xyXG5cdFx0XHRzdHJva2UgOiAncmVkJ1xyXG5cdFx0XHQnc3Ryb2tlLXdpZHRoJyA6IDJcclxuXHRcdFx0J21hcmtlci1zdGFydCcgOiBcInVybCgjc3RhcnQpXCJcclxuXHRcdFx0J21hcmtlci1taWQnIDogXCJ1cmwoI2RvdClcIlxyXG5cdFx0XHQnbWFya2VyLWVuZCcgOiBcInVybCgjZW5kKVwiXHJcblxyXG5tb3JlID0gKG5leHQpIC0+XHJcblx0aWYgc3BlYWtlciA9PSBudWxsIHRoZW4gaW5pdFNwZWFrZXIoKVxyXG5cdG5hbWVzMSA9IFwiZmV0Y2ggcmVjb3JkIG1hcmsgcGxheSBjbGVhciBkZWxldGUgc2hhcmVcIi5zcGxpdCAnICdcclxuXHRuYW1lczIgPSBcInJldmVyc2VcIi5zcGxpdCAnICdcclxuXHRmb3IgbmFtZSBpbiBuYW1lczEuY29uY2F0IG5hbWVzMlxyXG5cdFx0YnV0dG9uc1tuYW1lXS5kaXNhYmxlKClcclxuXHRpZiBuZXh0ID09IC0xIHRoZW4gbmV4dCA9IChtb3JlTW9kZSsxKSAlIDNcclxuXHRtb3JlTW9kZSA9IG5leHRcclxuXHRpZiBtb3JlTW9kZSA9PSAxXHJcblx0XHRmb3IgbmFtZSBpbiBuYW1lczFcclxuXHRcdFx0YnV0dG9uc1tuYW1lXS5lbmFibGUoKVxyXG5cdGlmIG1vcmVNb2RlID09IDJcclxuXHRcdGZvciBuYW1lIGluIG5hbWVzMlxyXG5cdFx0XHRidXR0b25zW25hbWVdLmVuYWJsZSgpXHJcblxyXG5yZW5zYUxvY2FsU3RvcmFnZSA9IC0+XHJcblx0Zm9yIGtleSBpbiAnJy5zcGxpdCAnICdcclxuXHRcdGNvbnNvbGUubG9nIGtleVxyXG5cdFx0bG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0ga2V5XHJcblx0aSA9IGJveGVzLmxlbmd0aC0xXHJcblx0d2hpbGUgaSA+PSAwXHJcblx0XHRib3ggPSBib3hlc1tpXVxyXG5cdFx0I2NvbnNvbGUubG9nICdyZW5zYUxvY2FsU3RvcmFnZScsYm94ZXNcclxuXHRcdFtbYSxiXSxbYyxkXV0gPSBib3hbMV1cclxuXHRcdCNjb25zb2xlLmxvZyAncmVuc2FMb2NhbFN0b3JhZ2UnLGEsYixjLGRcclxuXHRcdGlmIGEgPT0gbnVsbCBvciBiID09IG51bGwgb3IgYyA9PSBudWxsIG9yIGQgPT0gbnVsbFxyXG5cdFx0XHRjb25zb2xlLmxvZyAnc3BsaWNlJyxib3hcclxuXHRcdFx0Ym94ZXMuc3BsaWNlIGksMVxyXG5cdFx0aSAtPSAxXHJcblx0bG9jYWxTdG9yYWdlLmJveGVzID0gSlNPTi5zdHJpbmdpZnkgYm94ZXNcclxuXHJcbnN0YXJ0dXAgPSAtPlxyXG5cdGxvYWRUaGVQYXRoKClcclxuXHRyZW5zYUxvY2FsU3RvcmFnZSgpXHJcblx0aW5pdEdQUygpXHJcblx0YWRkICdyZWN0Jyxzdmcse3dpZHRoOlcsIGhlaWdodDpILCBmaWxsOidncmVlbid9XHJcblxyXG5cdGdyaWQgPSBnZW9kZXRpY190b19ncmlkIHBvc2l0aW9uWzBdLHBvc2l0aW9uWzFdXHJcblx0Y2VudGVyID0gKGcgZm9yIGcgaW4gZ3JpZClcclxuXHRjZW50ZXIucmV2ZXJzZSgpXHJcblxyXG5cdGltYWdlcyA9IFtdXHJcblx0cmVjdHMgPSBbXVxyXG5cdHRleHRzID0gW11cclxuXHJcblx0Zm9yIF8gaW4gcmFuZ2UgMipuaCsxXHJcblx0XHRpcm93ID0gW11cclxuXHRcdHJyb3cgPSBbXVxyXG5cdFx0Zm9yIF8gaW4gcmFuZ2UgMipudysxXHJcblx0XHRcdGlyb3cucHVzaCBhZGQgJ2ltYWdlJyxzdmcsIHt9XHJcblx0XHRcdHJyb3cucHVzaCBhZGQgJ3JlY3QnLCBzdmcsIHt3aWR0aDpUSUxFLCBoZWlnaHQ6VElMRSwgc3Ryb2tlOidibGFjaycsICdzdHJva2Utd2lkdGgnOjEsIGZpbGw6J25vbmUnfVxyXG5cdFx0aW1hZ2VzLnB1c2ggaXJvd1xyXG5cdFx0cmVjdHMucHVzaCBycm93XHJcblxyXG5cdHgwID0gMC4zNiAqIFdcclxuXHR4MSA9IDAuNjQgKiBXXHJcblx0eDIgPSAwLjUwICogV1xyXG5cclxuXHR5MCA9IEgqMC4wNVxyXG5cclxuXHR5MSA9IEgqMC43NVxyXG5cdHkyID0gSCowLjc5XHJcblx0eTMgPSBIKjAuODRcclxuXHR5NCA9IEgqMC44OVxyXG5cdHk1ID0gSCowLjk0XHJcblx0eTYgPSBIKjAuOTlcclxuXHJcblx0bWFrZVRleHQgeDAsIHkwICMgMFxyXG5cdG1ha2VUZXh0IHgxLCB5MCAjIDFcclxuXHJcblx0bWFrZVRleHQgeDIsIHkxICMgMlxyXG5cdG1ha2VUZXh0IHgyLCB5MiwgJ3JlZCcgIyAzXHJcblx0bWFrZVRleHQgeDIsIHkzICMgNFxyXG5cdG1ha2VUZXh0IHgyLCB5NCAjIDVcclxuXHRtYWtlVGV4dCB4MiwgeTUgIyA2XHJcblx0bWFrZVRleHQgeDIsIHk2ICMgN1xyXG5cclxuXHR4MCA9IEggKiAwLjEwXHJcblx0eDEgPSBXICogMC41MFxyXG5cdHgyID0gVyAtIHgwXHJcblx0eTAgPSBIICogMC4xMFxyXG5cdHkxID0gSCAqIDAuNTBcclxuXHQjeTIgPSA1MTIrMTI4XHJcblx0eTMgPSBIICogMC45MFxyXG5cclxuXHRidXR0b25zLnRhcmdldCA9IG5ldyBUYXJnZXRCdXR0b24gSU5WSVNJQkxFLCBJTlZJU0lCTEUsICcnLCAnI2YwMDgnXHJcblx0bmV3IFRhcmdldEJ1dHRvbiB4MSwgeTEsIFwiY2xpY2soJ2FpbScpXCJcclxuXHRuZXcgQnV0dG9uIHgwLCB5MCwgJ2luJywgIFwiY2xpY2soJ2luJylcIlxyXG5cdG5ldyBCdXR0b24geDIsIHkwLCAnb3V0JywgXCJjbGljaygnb3V0JylcIlxyXG5cdG5ldyBCdXR0b24geDAsIHkzLCAnY2VudGVyJywgXCJjbGljaygnY2VudGVyJylcIlxyXG5cdG5ldyBCdXR0b24geDIsIHkzLCAnbW9yZScsIFwibW9yZSgtMSlcIlxyXG5cclxuXHR4ID0gKFcvMiArIEgqMC4yNSAqIE1hdGguY29zIHJhZGlhbnMgaSBmb3IgaSBpbiByYW5nZSAwLDM2MCw2MClcclxuXHR5ID0gKEgvMiArIEgqMC4yNSAqIE1hdGguc2luIHJhZGlhbnMgaSBmb3IgaSBpbiByYW5nZSAwLDM2MCw2MClcclxuXHJcblx0YnV0dG9ucy5mZXRjaCAgPSBuZXcgQnV0dG9uIFcvMiwgIEgvMiwgICdmZXRjaCcsIFwiZmV0Y2hUaGVQYXRoKClcIiwgJyNmZjA0J1xyXG5cdGJ1dHRvbnMubWFyayAgID0gbmV3IEJ1dHRvbiB4WzBdLCB5WzBdLCAnbWFyaycsIFwibWFyaygpXCIsICcjZmYwNCdcclxuXHRidXR0b25zLmRlbGV0ZSA9IG5ldyBCdXR0b24geFsxXSwgeVsxXSwgJ2RlbGV0ZScsIFwiZGVsZXRlVGhlUGF0aCgpXCIsICcjZmYwNCdcclxuXHRidXR0b25zLmNsZWFyICA9IG5ldyBCdXR0b24geFsyXSwgeVsyXSwgJ2NsZWFyJywgXCJjbGVhclRoZVBhdGgoKVwiLCAnI2ZmMDQnXHJcblx0YnV0dG9ucy5yZWNvcmQgPSBuZXcgQnV0dG9uIHhbM10sIHlbM10sICdyZWNvcmQnLCBcInJlY29yZFRoZVBhdGgoKVwiLCAnI2ZmMDQnXHJcblx0YnV0dG9ucy5wbGF5ICAgPSBuZXcgQnV0dG9uIHhbNF0sIHlbNF0sICdwbGF5JywgXCJwbGF5VGhlUGF0aCgpXCIsICcjZmYwNCdcclxuXHRidXR0b25zLnNoYXJlICA9IG5ldyBCdXR0b24geFs1XSwgeVs1XSwgJ3NoYXJlJywgXCJzaGFyZVRoZVBhdGgoKVwiLCAnI2ZmMDQnXHJcblx0XHJcblx0YnV0dG9ucy5yZXZlcnNlICA9IG5ldyBCdXR0b24gVy8yLCAgSC8yLCAgJ3JldmVyc2UnLCBcInJldmVyc2VUaGVQYXRoKClcIiwgJyNmZjA0J1xyXG5cclxuXHRpbml0VHJhaWwoKVxyXG5cdG1vcmUgMFxyXG5cdCMgY29uc29sZS5sb2cgYm94ZXMubGVuZ3RoXHJcblx0ZHJhd01hcCgpXHJcblxyXG5zdGFydHVwKClcclxuIl19
//# sourceURL=c:\github\2021\013-gpsKarta2\coffee\sketch.coffee