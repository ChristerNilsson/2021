// Generated by CoffeeScript 2.4.1
var Button, H, INVISIBLE, SIZE, TILE, TargetButton, W, add, aimButton, aimEvent, ass, bearing, center, centrera, click, convert, degrees, distance, drawMap, images, interpolate, makeText, mouse, mousedown, mousemove, mouseup, position, range, rec, recButton, recEvent, rects, setAttrs, startup, svg, svgurl, target, targetButton, texts, touchend, touchmove, touchstart;

W = 1024; // window.innerWidth

H = 1024; // window.innerHeight

INVISIBLE = -100;

SIZE = 256; // 128..65536 # rutornas storlek i meter

TILE = 256; // rutornas storlek i pixels

range = _.range;

ass = function(a, b = true) {
  return chai.assert.deepEqual(a, b);
};

svgurl = "http://www.w3.org/2000/svg";

svg = document.getElementById('svgOne');

position = [
  59.09443087294174,
  17.7142975294884 // 128 meter in. (lat long)
];

center = []; // skärmens mittpunkt (sweref). Påverkas av pan (x y) (6 7)

target = []; // målkoordinater (sweref)

targetButton = null;

mouse = [];

images = [];

rects = [];

texts = [];

recButton = null;

rec = 0;

aimButton = null;

degrees = function(radians) {
  return radians * 180 / Math.PI;
};

distance = function(p, q) {
  var dx, dy;
  if (p.length !== 2 || q.length !== 2) {
    return 0;
  }
  dx = p[0] - q[0];
  dy = p[1] - q[1];
  return Math.round(Math.sqrt(dx * dx + dy * dy));
};

bearing = function(p, q) {
  var dx, dy, res;
  if (p.length !== 2 || q.length !== 2) {
    return 0;
  }
  dx = p[0] - q[0];
  dy = p[1] - q[1];
  res = 360 + Math.round(degrees(Math.atan2(dx, dy)));
  return res % 360;
};

Button = class Button {
  constructor(x, y, prompt, event, color = '#f000') {
    this.r = 50;
    if (prompt !== "") {
      this.text = add('text', svg, {
        x: x,
        y: y + 10,
        stroke: 'black',
        'stroke-width': 1,
        'text-anchor': 'middle'
      });
      this.text.textContent = prompt;
      this.text.style.fontSize = '50px';
    }
    this.circle = add('circle', svg, {
      cx: x,
      cy: y,
      r: this.r,
      fill: color,
      stroke: 'black',
      'stroke-width': 1,
      onclick: event
    });
  }

};

TargetButton = class TargetButton extends Button {
  constructor(x, y, event, color) {
    super(x, y, '', event, color);
    this.vline = add('line', svg, {
      x1: x - this.r,
      y1: y,
      x2: x + this.r,
      y2: y,
      stroke: 'black',
      'stroke-width': 1
    });
    this.hline = add('line', svg, {
      x1: x,
      y1: y - this.r,
      x2: x,
      y2: y + this.r,
      stroke: 'black',
      'stroke-width': 1
    });
  }

  move() {
    var antal, dx, dy, x, y;
    if (target.length === 0) {
      return;
    }
    dx = target[0] - center[0];
    dy = target[1] - center[1];
    antal = SIZE / TILE;
    x = W / 2 + dx / antal;
    y = H / 2 - dy / antal;
    return this.moveHard(x, y);
  }

  moveHard(x, y) {
    setAttrs(this.circle, {
      cx: x,
      cy: y
    });
    setAttrs(this.vline, {
      x1: x - this.r,
      y1: y,
      x2: x + this.r,
      y2: y
    });
    return setAttrs(this.hline, {
      x1: x,
      y1: y - this.r,
      x2: x,
      y2: y + this.r
    });
  }

};

add = function(type, parent, attrs) {
  var obj;
  obj = document.createElementNS(svgurl, type);
  parent.appendChild(obj);
  setAttrs(obj, attrs);
  return obj;
};

setAttrs = function(obj, attrs) {
  var key, results;
  results = [];
  for (key in attrs) {
    results.push(obj.setAttributeNS(null, key, attrs[key]));
  }
  return results;
};

click = function(s) {
  if (s === 'in' && SIZE > 128) {
    SIZE = Math.floor(SIZE / 2);
  }
  if (s === 'out' && SIZE < 65536) {
    SIZE *= 2;
  }
  if (s === 'ctr') {
    centrera();
  }
  if (s === 'aim') {
    aimEvent();
  }
  return drawMap();
};

mousedown = function(event) {
  var touch, touches;
  touches = event.targetTouches;
  if (touches.length !== 1) {
    return;
  }
  touch = touches[0];
  return mouse = [touch.clientX, touch.clientY];
};

mouseup = function(event) {
  mouse = [];
  return drawMap();
};

mousemove = function(event) {
  var dx, dy, factor, touch, touches;
  if (mouse.length === 0) {
    return;
  }
  touches = event.targetTouches;
  if (touches.length !== 1) {
    return;
  }
  touch = touches[0];
  factor = 2;
  if (SIZE === 128) {
    factor = 0.5;
  }
  if (SIZE === 256) {
    factor = 1;
  }
  // dx = event.movementX
  // dy = event.movementY
  dx = touch.clientX - mouse[0];
  dy = touch.clientY - mouse[1];
  mouse = [touch.clientX, touch.clientY];
  center[0] -= Math.round(dx * factor);
  center[1] += Math.round(dy * factor);
  return drawMap();
};

//moveMap()
touchstart = function(event) {
  event.preventDefault();
  return mousedown(event);
};

touchend = function(event) {
  event.preventDefault();
  return mouseup(event);
};

touchmove = function(event) {
  event.preventDefault();
  return mousemove(event);
};

svg.addEventListener('touchstart', touchstart);

svg.addEventListener('touchmove', touchmove);

svg.addEventListener('touchend', touchend);

interpolate = function(a, b, c, d, value) {
  return c + value / b * (d - c);
};

ass(16, interpolate(0, 1024, 0, 256, 64));

ass(240, interpolate(0, 1024, 256, 0, 64));

convert = function([x, y], size = SIZE) { // sweref punkt
  var dx, dy;
  dx = x % SIZE; // beräkna vektor dx,dy (sweref)
  dy = y % SIZE;
  x -= dx; // beräkna rutans SW hörn x,y (sweref)
  y -= dy;
  if (SIZE === 128 || SIZE === 256) {
    dx = interpolate(0, SIZE, TILE, 0, dx);
    dy = interpolate(0, SIZE, 0, TILE, dy);
  } else {
    dx = interpolate(0, SIZE, Math.floor(SIZE / 2), 0, dx);
    dy = interpolate(0, SIZE, 0, Math.floor(SIZE / 2), dy);
  }
  dx = Math.round(dx);
  dy = Math.round(dy);
  return [x, y, dx, dy];
};

// moveMap = ->
// 	n = 2
// 	[baseX,baseY,dx,dy] = convert center
// 	for j in range 2*n+1
// 		#y = baseY + (j-n) * SIZE
// 		py = TILE*(n-j+1)+dy
// 		for i in range 2*n+1
// 			#x = baseX + (i-n) * SIZE
// 			px = TILE*(i-n+1)+dx
// 			#href = "maps\\#{SIZE}\\#{y}-#{x}-#{SIZE}.jpg"
// 			setAttrs images[j][i], {x:px, y:py} 
// 			setAttrs rects[j][i],  {x:px, y:py}
// 	texts[0].textContent = "C:#{center} T:#{target} D:#{distance(target,center)} B:#{bearing(target,center)}"
// 	texts[1].textContent = "Z:#{SIZE} B:#{[baseX,baseY]} DX:#{dx} DY:#{dy}"
// 	targetButton.move()
drawMap = function() {
  var baseX, baseY, dx, dy, href, i, j, k, l, len, len1, n, px, py, ref, ref1, x, y;
  n = 2;
  [baseX, baseY, dx, dy] = convert(center);
  ref = range(2 * n + 1);
  for (k = 0, len = ref.length; k < len; k++) {
    j = ref[k];
    y = baseY + (j - n) * SIZE;
    py = TILE * (n - j + 1) + dy;
    ref1 = range(2 * n + 1);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      i = ref1[l];
      x = baseX + (i - n) * SIZE;
      px = TILE * (i - n + 1) + dx;
      href = `maps\\${SIZE}\\${y}-${x}-${SIZE}.jpg`;
      setAttrs(images[j][i], {
        x: px,
        y: py,
        href: href
      });
      setAttrs(rects[j][i], {
        x: px,
        y: py
      });
    }
  }
  texts[0].textContent = `C:${center} T:${target} D:${distance(target, center)} B:${bearing(target, center)}`;
  texts[1].textContent = `Z:${SIZE} B:${[baseX, baseY]} DX:${dx} DY:${dy}`;
  return targetButton.move();
};

centrera = function() {
  var g, grid;
  grid = geodetic_to_grid(position[0], position[1]);
  center = (function() {
    var k, len, results;
    results = [];
    for (k = 0, len = grid.length; k < len; k++) {
      g = grid[k];
      results.push(Math.round(g));
    }
    return results;
  })();
  center.reverse();
  return drawMap();
};

aimEvent = function() {
  if (target.length === 0) {
    target = center.slice();
    return targetButton.moveHard(W / 2, H / 2);
  } else {
    target = [];
    return targetButton.moveHard(INVISIBLE, INVISIBLE);
  }
};

recEvent = function() {
  rec = 1 - rec;
  return recButton.setAttributeNS(null, 'fill', ['#f008', '#f000'][rec]);
};

makeText = function(x, y) {
  var text;
  text = add('text', svg, {
    x: x,
    y: y,
    stroke: 'black',
    'stroke-width': 1,
    'text-anchor': 'middle'
  });
  text.style.fontSize = '25px';
  return texts.push(text);
};

startup = function() {
  var _, g, grid, irow, k, l, len, len1, n, ref, ref1, rrow;
  add('rect', svg, {
    width: W,
    height: H,
    fill: 'green'
  });
  grid = geodetic_to_grid(position[0], position[1]);
  center = (function() {
    var k, len, results;
    results = [];
    for (k = 0, len = grid.length; k < len; k++) {
      g = grid[k];
      results.push(Math.round(g));
    }
    return results;
  })();
  center.reverse();
  images = [];
  rects = [];
  texts = [];
  n = 2;
  ref = range(2 * n + 1);
  for (k = 0, len = ref.length; k < len; k++) {
    _ = ref[k];
    irow = [];
    rrow = [];
    ref1 = range(2 * n + 1);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      _ = ref1[l];
      irow.push(add('image', svg, {}));
      rrow.push(add('rect', svg, {
        width: TILE,
        height: TILE,
        stroke: 'black',
        'stroke-width': 1,
        fill: 'none'
      }));
    }
    images.push(irow);
    rects.push(rrow);
  }
  makeText(W / 2, 40);
  makeText(W / 2, H - 30);
  targetButton = new TargetButton(INVISIBLE, INVISIBLE, '', '#f008');
  aimButton = new TargetButton(W / 2, H / 2, "click('aim')");
  new Button(60, 60, 'in', "click('in')");
  new Button(W - 60, 60, 'out', "click('out')");
  new Button(60, H - 60, 'ctr', "click('ctr')");
  recButton = new Button(W - 60, H - 60, 'rec', "recEvent()");
  console.log(grid_to_geodetic(6553600 + 128, 655360 + 128));
  console.log(grid_to_geodetic(6553600 + 3.5 * 128, 655360 + 3.5 * 128));
  return drawMap();
};

startup();

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2021\013-gpsKarta2\coffee\sketch.coffee