// Generated by CoffeeScript 2.4.1
var Button, H, INVISIBLE, SIZE, TILE, TargetButton, W, add, aimButton, aimEvent, ass, bearing, center, centrera, click, convert, degrees, distance, drawMap, getParameters, images, initGPS, initTrail, locationUpdate, locationUpdateFail, makeText, map, mouse, mousedown, mousemove, mouseup, myRound, nada, nh, nw, points, position, range, rec, recButton, recEvent, rects, sendMail, setAttrs, startup, svg, svgurl, target, targetButton, texts, touchend, touchmove, touchstart, trail, updateMode, updateTrail;

W = window.innerWidth;

H = window.innerHeight;

INVISIBLE = -100;

SIZE = 256; // 64..65536 # rutornas storlek i meter

TILE = 256; // rutornas storlek i pixels

nw = Math.floor(W / TILE);

nh = Math.floor(H / TILE);

updateMode = 0; // 0=manual 1=gps

points = [];

trail = null; // M256,256 l100,100 l50,0

range = _.range;

ass = function(a, b = true) {
  return chai.assert.deepEqual(a, b);
};

myRound = function(x, dec = 0) {
  return Math.round(x * 10 ** dec) / 10 ** dec;
};

map = function(x, x0, x1, y0, y1) {
  return (x - x0) / (x1 - x0) * (y1 - y0) + y0;
};

ass(325, map(150, 100, 200, 300, 350));

ass(375, map(250, 100, 200, 300, 350));

sendMail = function(subject, body) {
  mail.href = "mailto:janchrister.nilsson@gmail.com?subject=" + encodeURIComponent(subject) + "&body=" + encodeURIComponent(body);
  return mail.click();
};

getParameters = function(h = window.location.href) {
  var arr, f, s;
  h = decodeURI(h);
  arr = h.split('?');
  if (arr.length !== 2) {
    return {};
  }
  s = arr[1];
  if (s === '') {
    return {};
  }
  return _.object((function() {
    var k, len, ref, results;
    ref = s.split('&');
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      f = ref[k];
      results.push(f.split('='));
    }
    return results;
  })());
};

//merp = (y1,y2,i,x1=0,x2=1) -> map i,x1,x2,y1,y2
// interpolate = (a, b, c, d, value) -> c + value/b * (d-c)
// ass 16, interpolate 0,1024,0,256,64
// ass 240, interpolate 0,1024,256,0,64
setAttrs = function(obj, attrs) {
  var key, results;
  results = [];
  for (key in attrs) {
    results.push(obj.setAttributeNS(null, key, attrs[key]));
  }
  return results;
};

svgurl = "http://www.w3.org/2000/svg";

svg = document.getElementById('svgOne');

//position = [59.09443087294174, 17.7142975294884] # 6553600,655360
position = [
  59.265196,
  18.132748 // Home (lat long)
];

center = []; // skärmens mittpunkt (sweref). Påverkas av pan (x y) (6 7)

target = []; // målkoordinater (sweref)

targetButton = null;

mouse = [];

images = [];

rects = [];

texts = [];

recButton = null;

rec = 0;

aimButton = null;

degrees = function(radians) {
  return radians * 180 / Math.PI;
};

distance = function(p, q) {
  var dx, dy;
  if (p.length !== 2 || q.length !== 2) {
    return 0;
  }
  dx = p[0] - q[0];
  dy = p[1] - q[1];
  //Math.round Math.sqrt dx * dx + dy * dy
  return Math.sqrt(dx * dx + dy * dy);
};

bearing = function(p, q) {
  var dx, dy, res;
  if (p.length !== 2 || q.length !== 2) {
    return 0;
  }
  dx = p[0] - q[0];
  dy = p[1] - q[1];
  res = 360 + Math.round(degrees(Math.atan2(dx, dy)));
  return res % 360;
};

Button = class Button {
  constructor(x, y, prompt, event, color = '#f000') {
    this.r = 128;
    if (prompt !== "") {
      this.text = add('text', svg, {
        x: x,
        y: y + 10,
        stroke: 'black',
        'stroke-width': 1,
        'text-anchor': 'middle'
      });
      this.text.textContent = prompt;
      this.text.style.fontSize = '50px';
    }
    this.circle = add('circle', svg, {
      cx: x,
      cy: y,
      r: this.r,
      fill: color,
      stroke: 'black',
      'stroke-width': 1,
      ontouchstart: event,
      onclick: event //, ontouchmove:'nada(evt)', ontouchend:'nada(evt)'}
    });
  }

  setColor(color) {
    return setAttrs(this.circle, {
      fill: color
    });
  }

};

TargetButton = class TargetButton extends Button {
  constructor(x, y, event, color) {
    super(x, y, '', event, color);
    this.vline = add('line', svg, {
      x1: x - this.r,
      y1: y,
      x2: x + this.r,
      y2: y,
      stroke: 'black',
      'stroke-width': 1
    });
    this.hline = add('line', svg, {
      x1: x,
      y1: y - this.r,
      x2: x,
      y2: y + this.r,
      stroke: 'black',
      'stroke-width': 1
    });
  }

  move() {
    var antal, dx, dy, x, y;
    if (target.length === 0) {
      return;
    }
    dx = target[0] - center[0];
    dy = target[1] - center[1];
    antal = SIZE / TILE;
    x = W / 2 + dx / antal;
    y = H / 2 - dy / antal;
    return this.moveHard(x, y);
  }

  moveHard(x, y) {
    setAttrs(this.circle, {
      cx: x,
      cy: y
    });
    setAttrs(this.vline, {
      x1: x - this.r,
      y1: y,
      x2: x + this.r,
      y2: y
    });
    return setAttrs(this.hline, {
      x1: x,
      y1: y - this.r,
      x2: x,
      y2: y + this.r
    });
  }

};

add = function(type, parent, attrs) {
  var obj;
  obj = document.createElementNS(svgurl, type);
  parent.appendChild(obj);
  setAttrs(obj, attrs);
  return obj;
};

click = function(s) {
  event.preventDefault();
  if (s === 'in' && SIZE > 64) {
    SIZE = Math.floor(SIZE / 2);
  }
  if (s === 'out' && SIZE < 65536) {
    SIZE *= 2;
  }
  if (s === 'ctr') {
    centrera();
  }
  if (s === 'aim') {
    aimEvent();
  }
  event.stopPropagation();
  return drawMap();
};

mousedown = function(event) {
  return mouse = [event.x, event.y];
};

mouseup = function(event) {
  return mouse = [];
};

mousemove = function(event) {
  var dx, dy, factor;
  if (mouse.length === 0) {
    return;
  }
  factor = 2;
  if (SIZE === 64) {
    factor = 0.25;
  }
  if (SIZE === 128) {
    factor = 0.5;
  }
  if (SIZE === 256) {
    factor = 1;
  }
  dx = event.movementX;
  dy = event.movementY;
  mouse = [dx, dy];
  // center[0] -= Math.round dx * factor
  // center[1] += Math.round dy * factor
  center[0] -= dx * factor;
  center[1] += dy * factor;
  updateMode = 0;
  return drawMap();
};

touchstart = function(event) {
  var touch, touches;
  event.preventDefault();
  touches = event.targetTouches;
  if (touches.length !== 1) {
    return;
  }
  touch = touches[0];
  return mouse = [touch.clientX, touch.clientY];
};

touchend = function(event) {
  event.preventDefault();
  mouse = [];
  return drawMap();
};

touchmove = function(event) {
  var dx, dy, factor, touch, touches;
  event.preventDefault();
  if (mouse.length === 0) {
    return;
  }
  touches = event.targetTouches;
  if (touches.length !== 1) {
    return;
  }
  touch = touches[0];
  factor = 2;
  if (SIZE === 64) {
    factor = 0.25;
  }
  if (SIZE === 128) {
    factor = 0.5;
  }
  if (SIZE === 256) {
    factor = 1;
  }
  dx = touch.clientX - mouse[0];
  dy = touch.clientY - mouse[1];
  mouse = [touch.clientX, touch.clientY];
  // center[0] -= Math.round dx * factor
  // center[1] += Math.round dy * factor
  center[0] -= dx * factor;
  center[1] += dy * factor;
  updateMode = 0;
  return drawMap();
};

svg.addEventListener('touchstart', touchstart);

svg.addEventListener('touchmove', touchmove);

svg.addEventListener('touchend', touchend);

svg.addEventListener('mousedown', mousedown);

svg.addEventListener('mousemove', mousemove);

svg.addEventListener('mouseup', mouseup);

convert = function([x, y], size = SIZE) { // sweref punkt
  var dx, dy;
  dx = x % size; // beräkna vektor dx,dy (sweref)
  dy = y % size;
  x -= dx; // beräkna rutans SW hörn x,y (sweref)
  y -= dy;
  // dx = Math.round map dx, 0,size, 0,TILE # map n,start1,stop1,start2,stop2
  // dy = Math.round map dy, 0,size, 0,TILE
  dx = map(dx, 0, size, 0, TILE); // map n,start1,stop1,start2,stop2
  dy = map(dy, 0, size, 0, TILE);
  return [x, y, dx, dy];
};

ass([655360, 6553600, 64, 72], convert([655360 + 16, 6553600 + 18], 64));

ass([655360, 6553600, 128, 128], convert([655360 + 64, 6553600 + 64], 128));

ass([655360 + 128, 6553600 + 128, 0, 0], convert([655360 + 128, 6553600 + 128], 128));

ass([655360, 6553600, 44, 44], convert([655360 + 22, 6553600 + 22], 128));

ass([655360, 6553600, 128, 128], convert([655360 + 128, 6553600 + 128], 256));

ass([655360, 6553600, 64, 64], convert([655360 + 64, 6553600 + 64], 256));

ass([655360, 6553600, 64, 74], convert([655360 + 128, 6553600 + 148], 512));

ass([655360, 6553600, 32, 32], convert([655360 + 64, 6553600 + 64], 512));

ass([655360, 6553600, 200, 250], convert([655360 + 400, 6553600 + 500], 512));

ass([655360, 6553600, 32, 37], convert([655360 + 128, 6553600 + 148], 1024));

ass([655360, 6553600, 16, 16], convert([655360 + 64, 6553600 + 64], 1024));

ass([655360, 6553600, 100, 125], convert([655360 + 400, 6553600 + 500], 1024));

// baseX, baseY,  dx, dy, x0,    x1,    y0,     y1,     x,     y       xx   yy
// 678400 6573568 155 212 678272 678784 6573440 6573952 679448 6574343 1880 1194.5
updateTrail = function(baseX, baseY, dx, dy) {
  var k, len, s, x, x0, x1, xx, y, y0, y1, yy;
  //	console.log 'updateTrail in',baseX,baseY,dx,dy
  s = [];
  // x0 = baseX + SIZE/2 - SIZE
  // x1 = baseX + SIZE/2 + SIZE
  // y0 = baseY + SIZE/2 - SIZE
  // y1 = baseY + SIZE/2 + SIZE
  x0 = baseX - SIZE;
  x1 = baseX + SIZE;
  y0 = baseY - SIZE;
  y1 = baseY + SIZE;
//	console.log 'updateTrail out',x0,x1,y0,y1
  for (k = 0, len = points.length; k < len; k++) {
    [x, y] = points[k];
    xx = map(x, x0, x1, W / 2 - TILE, W / 2 + TILE);
    yy = map(y, y0, y1, H / 2 - TILE, H / 2 + TILE);
    //if s == '' then s+="M" else s+="L"
    //		s += "#{TILE/2+xx-dx},#{-TILE/2+H+dy-yy}"
    s.push(`${Math.round(xx - dx)},${Math.round(H + dy - yy)}`);
  }
  //console.log baseX,baseY,dx,dy, x0,x1,y0,y1, x,y,xx,yy
  //console.log s

  //setAttrs trail, {d:s}
  s = s.join(' ');
  console.log(s);
  return setAttrs(trail, {
    points: s
  });
};

drawMap = function() {
  var baseX, baseY, dx, dy, href, i, j, k, l, len, len1, p, px, py, ref, ref1, x, y;
  [baseX, baseY, dx, dy] = convert(center);
  ref = range(-nh, nh + 1);
  for (k = 0, len = ref.length; k < len; k++) {
    j = ref[k];
    y = baseY + j * SIZE - SIZE;
    py = H / 2 - TILE * j + dy;
    ref1 = range(-nw, nw + 1);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      i = ref1[l];
      x = baseX + i * SIZE;
      px = W / 2 + TILE * i - dx;
      href = `maps\\${SIZE}\\${y}-${x}-${SIZE}.jpg`;
      if (href !== images[j + nh][i + nw].getAttributeNS(null, 'href')) { // only update if needed
        setAttrs(images[j + nh][i + nw], {
          href: href
        });
      }
      setAttrs(images[j + nh][i + nw], {
        x: px,
        y: py
      });
      setAttrs(rects[j + nh][i + nw], {
        x: px,
        y: py
      });
    }
  }
  // texts[0].textContent = "C:#{center} T:#{target} D:#{distance(target,center)} B:#{bearing(target,center)}"
  // texts[1].textContent = "Z:#{SIZE} B:#{[baseX,baseY]} DX:#{dx} DY:#{dy}"
  updateTrail(Math.round(baseX), Math.round(baseY), Math.round(dx), Math.round(dy));
  if (target.length === 2) {
    texts[0].textContent = `${bearing(target, center)} º`;
    texts[1].textContent = `${distance(target, center)} m`;
  }
  texts[2].textContent = `${points.length}`;
  texts[3].textContent = `${SIZE} ${updateMode}`;
  texts[4].textContent = `${position[0]}`;
  texts[5].textContent = `${position[1]}`;
  if (points.length > 0) {
    p = points[points.length - 1];
    texts[6].textContent = `${Math.round(p[0])}`;
    texts[7].textContent = `${Math.round(p[1])}`;
  }
  return targetButton.move();
};

centrera = function() {
  var g, grid;
  updateMode = 1;
  grid = geodetic_to_grid(position[0], position[1]);
  //center = (Math.round g for g in grid)
  center = (function() {
    var k, len, results;
    results = [];
    for (k = 0, len = grid.length; k < len; k++) {
      g = grid[k];
      results.push(g);
    }
    return results;
  })();
  center.reverse();
  return drawMap();
};

aimEvent = function() {
  if (target.length === 0) {
    target = center.slice();
    return targetButton.moveHard(W / 2, H / 2);
  } else {
    target = [];
    return targetButton.moveHard(INVISIBLE, INVISIBLE);
  }
};

recEvent = function() {
  var data, x, y;
  if (rec === 1) {
    data = ((function() {
      var k, len, results;
      results = [];
      for (k = 0, len = points.length; k < len; k++) {
        [x, y] = points[k];
        results.push(`${x},${y}`);
      }
      return results;
    })()).join("|");
    sendMail(`Path:${points.length}`, `${window.location}?path=${data}`);
  }
  //points = []
  rec = 1 - rec;
  return recButton.setColor(['#f000', '#f008'][rec]);
};

makeText = function(x, y) {
  var text;
  text = add('text', svg, {
    x: x,
    y: y,
    stroke: 'black',
    'stroke-width': 1,
    'text-anchor': 'middle'
  });
  text.style.fontSize = '50px';
  return texts.push(text);
};

nada = function(event) {
  event.preventDefault();
  return event.stopPropagation();
};

locationUpdateFail = function(error) {
  var messages;
  if (error.code === error.PERMISSION_DENIED) {
    return messages = ['', '', '', '', '', 'Check location permissions'];
  }
};

locationUpdate = function(p) {
  var g, grid, temp;
  position = [myRound(p.coords.latitude, 6), myRound(p.coords.longitude, 6)];
  grid = geodetic_to_grid(position[0], position[1]);
  //temp = (Math.round g for g in grid)
  temp = (function() {
    var k, len, results;
    results = [];
    for (k = 0, len = grid.length; k < len; k++) {
      g = grid[k];
      results.push(Math.round(g));
    }
    return results;
  })();
  temp.reverse();
  //points.push temp.slice()
  if (updateMode === 1) {
    center = temp;
  }
  return drawMap();
};

// pLat = myRound p.coords.latitude,6
// pLon = myRound p.coords.longitude,6
// if storage.trail.length == 0
// 	gpsLat = pLat
// 	gpsLon = pLon
// messages[5] = gpsCount++
// decreaseQueue()
// increaseQueue p # meters
// uppdatera pLat, pLon

// uppdatera = (pLat, pLon) ->
// 	dump.store ""
// 	dump.store "LU #{pLat} #{pLon}"
// 	[x,y] = w2b.convert pLon,pLat
// 	updateTrack pLat, pLon, x,y
// 	updateTrail pLat, pLon, x,y
initGPS = function() {
  return navigator.geolocation.watchPosition(locationUpdate, locationUpdateFail, {
    enableHighAccuracy: true,
    maximumAge: 30000,
    timeout: 27000
  });
};

initTrail = function() {
  var marker;
  // trail = add 'path', svg, {d:"", stroke:'blue', 'stroke-width':1, fill:'none'}
  marker = add('marker', svg, {
    id: 'dot',
    viewBox: "0 0 10 10",
    refX: "5",
    refY: "5",
    markerWidth: "5",
    markerHeight: "5"
  });
  add('circle', marker, {
    cx: "5",
    cy: "5",
    r: "5",
    fill: "red"
  });
  return trail = add('polyline', svg, {
    points: "15,80 29,50 43,60 57,30 71,40 85,15",
    fill: "none",
    stroke: "black",
    'marker-start': "url(#dot)",
    'marker-mid': "url(#dot)",
    'marker-end': "url(#dot)"
  });
};

// console.log trail
startup = function() {
  var _, g, grid, irow, k, l, len, len1, p, pair, parameters, ref, ref1, rrow, x0, x1, y0, y1, y2, y3;
  parameters = getParameters();
  if (parameters.path) {
    points = (function() {
      var k, len, ref, results;
      ref = parameters.path.split('|');
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        pair = ref[k];
        results.push(pair);
      }
      return results;
    })();
    points = (function() {
      var k, len, results;
      results = [];
      for (k = 0, len = points.length; k < len; k++) {
        p = points[k];
        results.push(p.split(','));
      }
      return results;
    })();
    points = (function() {
      var k, len, results;
      results = [];
      for (k = 0, len = points.length; k < len; k++) {
        p = points[k];
        results.push([parseInt(p[0]), parseInt(p[1])]);
      }
      return results;
    })();
    points.shift();
  }
  console.log(points);
  initGPS();
  console.log(W, H, nw, nh);
  add('rect', svg, {
    width: W,
    height: H,
    fill: 'green'
  });
  //position = (myRound p,6 for p in position)
  grid = geodetic_to_grid(position[0], position[1]);
  //center = (Math.round g for g in grid)
  center = (function() {
    var k, len, results;
    results = [];
    for (k = 0, len = grid.length; k < len; k++) {
      g = grid[k];
      results.push(g);
    }
    return results;
  })();
  center.reverse();
  images = [];
  rects = [];
  texts = [];
  ref = range(2 * nh + 1);
  for (k = 0, len = ref.length; k < len; k++) {
    _ = ref[k];
    irow = [];
    rrow = [];
    ref1 = range(2 * nw + 1);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      _ = ref1[l];
      irow.push(add('image', svg, {}));
      rrow.push(add('rect', svg, {
        width: TILE,
        height: TILE,
        stroke: 'black',
        'stroke-width': 1,
        fill: 'none'
      }));
    }
    images.push(irow);
    rects.push(rrow);
  }
  initTrail();
  x0 = 0.36 * W;
  x1 = 0.64 * W;
  y0 = 120 + 10;
  y1 = H - 180 + 10;
  y2 = H - 120 + 10;
  y3 = H - 60 + 10;
  makeText(x0, y0);
  makeText(x1, y0);
  makeText(x0, y1);
  makeText(x1, y1);
  makeText(x0, y2);
  makeText(x1, y2);
  makeText(x0, y3);
  makeText(x1, y3);
  targetButton = new TargetButton(INVISIBLE, INVISIBLE, '', '#f008');
  aimButton = new TargetButton(W / 2, H / 2, "click('aim')");
  new Button(128, 128, 'in', "click('in')");
  new Button(W - 128, 128, 'out', "click('out')");
  new Button(128, H - 128, 'ctr', "click('ctr')");
  recButton = new Button(W - 128, H - 128, 'rec', "recEvent()");
  console.log(grid_to_geodetic(6553600 + 128, 655360 + 128));
  console.log(grid_to_geodetic(6553600 + 78 * 256, 655360 + 88 * 256));
  console.log(grid_to_geodetic(6553600 + (78 + 16) * 256, 655360 + (88 + 16) * 256));
  //console.log geodetic_to_grid 59.263331493465394, 18.122142177751353
  return drawMap();
};

startup();

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2021\013-gpsKarta2\coffee\sketch.coffee