// Generated by CoffeeScript 2.4.1
var Button, H, INVISIBLE, Path, SIZE, TILE, TargetButton, W, add, aimEvent, bearing, boxes, buttons, center, centrera, clearPath, click, convert, currentPath, deletePath, distance, drawMap, fetchPath, grid, images, initGPS, initTrail, loadPath, locationUpdate, locationUpdateFail, makeText, mark, more, moreMode, mouse, mousedown, mousemove, mouseup, nada, nh, nw, position, record, recordPath, rects, sendMail, setAttrs, sharePath, startup, svg, svgurl, target, texts, touchend, touchmove, touchstart, trail, updateMode, updateTrail;

W = window.innerWidth;

H = window.innerHeight;

INVISIBLE = -200;

SIZE = 256; // 64..65536 # rutornas storlek i meter

TILE = 256; // rutornas storlek i pixels

nw = Math.floor(W / TILE);

nh = Math.floor(H / TILE);

updateMode = 0; // 0=manual 1=gps

moreMode = 1;

boxes = [];

currentPath = null;

trail = null; // M256,256 l100,100 l50,0

sendMail = function(subject, body) {
  mail.href = "mailto:janchrister.nilsson@gmail.com?subject=" + encodeURIComponent(subject) + "&body=" + encodeURIComponent(body);
  return mail.click();
};

setAttrs = function(obj, attrs) {
  var key, results;
  if (!obj) {
    return;
  }
  results = [];
  for (key in attrs) {
    results.push(obj.setAttributeNS(null, key, attrs[key]));
  }
  return results;
};

svgurl = "http://www.w3.org/2000/svg";

svg = document.getElementById('svgOne');

//position = [59.09443087294174, 17.7142975294884] # 6553600,655360
position = [
  59.265196,
  18.132748 // Home (lat long)
];

grid = [];

center = []; // skärmens mittpunkt (sweref). Påverkas av pan (x y) (6 7)

target = []; // målkoordinater (sweref)

mouse = [];

images = [];

rects = [];

texts = [];

buttons = {};

record = 0;

distance = function(p, q) {
  var dx, dy;
  if (p.length !== 2 || q.length !== 2) {
    return 0;
  }
  dx = p[0] - q[0];
  dy = p[1] - q[1];
  return Math.sqrt(dx * dx + dy * dy);
};

bearing = function(p, q) {
  var dx, dy, res;
  if (p.length !== 2 || q.length !== 2) {
    return 0;
  }
  dx = p[0] - q[0];
  dy = p[1] - q[1];
  res = 360 + Math.round(degrees(Math.atan2(dx, dy)));
  return res % 360;
};

Path = class Path {
  constructor(path1) {
    this.path = path1;
    console.log('Path', this.path);
    if (this.path === "") {
      this.points = [];
      this.hash = 0;
      this.distance = 0;
      this.count = 0;
      this.box = null;
    } else {
      this.points = decodeAll(this.path);
      console.log('points', this.points);
      this.hash = this.hashCode(this.path);
      console.log('hash', this.hash);
      this.distance = this.calcDist(); // in meters
      console.log('distance', this.distance);
      this.count = this.points.length;
      this.box = this.calcBox();
      console.log('box', this.box);
    }
  }

  calcDist() {
    var dx, dy, i, k, len, ref, res, x0, x1, y0, y1;
    res = 0;
    ref = range(1, this.points.length);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      [x0, y0] = this.points[i - 1];
      [x1, y1] = this.points[i];
      dx = x0 - x1;
      dy = y0 - y1;
      res += Math.sqrt(dx * dx + dy * dy);
    }
    return Math.round(res);
  }

  calcBox() {
    var k, len, ref, x, xmax, xmin, y, ymax, ymin;
    [xmin, ymin] = this.points[0];
    [xmax, ymax] = this.points[0];
    ref = this.points;
    for (k = 0, len = ref.length; k < len; k++) {
      [x, y] = ref[k];
      if (x < xmin) {
        xmin = x;
      }
      if (x > xmax) {
        xmax = x;
      }
      if (y < ymin) {
        ymin = y;
      }
      if (y > ymax) {
        ymax = y;
      }
    }
    return [[xmin, ymin], [xmax, ymax]];
  }

  hashCode(path) {
    var hash, i, k, len, ref;
    hash = 0;
    ref = range(path.length);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      hash = ((hash << 5) - hash) + path.charCodeAt(i);
    }
    return hash;
  }

  save() {
    var box, found, k, len;
    if (this.points.length === 0) {
      return;
    }
    found = false;
    this.path = encodeAll(this.points);
    this.hash = this.hashCode(this.path);
    this.box = this.calcBox();
    this.distance = this.calcDist();
    for (k = 0, len = boxes.length; k < len; k++) {
      box = boxes[k];
      if (box[0] === this.hash) {
        found = true;
      }
    }
    if (!found) {
      console.log('save', this.points, this.path, this.hash, this.box, this.distance);
      boxes.push([this.hash, this.box]);
      localStorage['boxes'] = JSON.stringify(boxes);
      return localStorage[this.hash] = this.path;
    }
  }

  delete() {
    var box, i, k, len, ref, results;
    localStorage.removeItem(this.hash);
    ref = range(boxes.length);
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      box = boxes[i];
      if (box[0] === this.hash) {
        boxes.splice(i, 1);
        currentPath = null;
        results.push(localStorage['boxes'] = JSON.stringify(boxes));
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

};

Button = class Button {
  constructor(x3, y4, prompt, event, color = '#f000') {
    this.x = x3;
    this.y = y4;
    this.prompt = prompt;
    this.r = 128;
    this.circle0 = add('circle', svg, {
      cx: this.x,
      cy: this.y,
      r: this.r,
      fill: 'none',
      stroke: 'black',
      'stroke-width': 1
    });
    if (this.prompt !== "") {
      this.text = add('text', svg, {
        x: this.x,
        y: this.y + 10,
        stroke: 'black',
        fill: 'black',
        'stroke-width': 1,
        'text-anchor': 'middle'
      });
      this.text.textContent = this.prompt;
      this.text.style.fontSize = '50px';
      this.text.style.userSelect = 'none';
    }
    this.circle1 = add('circle', svg, {
      cx: this.x,
      cy: this.y,
      r: this.r,
      fill: color,
      stroke: 'black',
      'stroke-width': 1,
      ontouchstart: event,
      onclick: event
    });
  }

  setColor(color) {
    return setAttrs(this.circle1, {
      fill: color
    });
  }

  setTextFill(color) {
    return setAttrs(this.text, {
      fill: color
    });
  }

  enable() {
    setAttrs(this.circle0, {
      cx: this.x
    });
    setAttrs(this.circle1, {
      cx: this.x
    });
    if (this.prompt !== '') {
      return setAttrs(this.text, {
        x: this.x
      });
    }
  }

  disable() {
    setAttrs(this.circle0, {
      cx: INVISIBLE
    });
    setAttrs(this.circle1, {
      cx: INVISIBLE
    });
    if (this.prompt !== '') {
      return setAttrs(this.text, {
        x: INVISIBLE
      });
    }
  }

};

TargetButton = class TargetButton extends Button {
  constructor(x, y, event, color) {
    super(x, y, '', event, color);
    this.vline = add('line', svg, {
      x1: x - this.r,
      y1: y,
      x2: x + this.r,
      y2: y,
      stroke: 'black',
      'stroke-width': 1
    });
    this.hline = add('line', svg, {
      x1: x,
      y1: y - this.r,
      x2: x,
      y2: y + this.r,
      stroke: 'black',
      'stroke-width': 1
    });
  }

  move() {
    var antal, dx, dy, x, y;
    if (target.length === 0) {
      return;
    }
    dx = target[0] - center[0];
    dy = target[1] - center[1];
    antal = SIZE / TILE;
    x = W / 2 + dx / antal;
    y = H / 2 - dy / antal;
    return this.moveHard(x, y);
  }

  moveHard(x, y) {
    setAttrs(this.circle1, {
      cx: x,
      cy: y
    });
    setAttrs(this.vline, {
      x1: x - this.r,
      y1: y,
      x2: x + this.r,
      y2: y
    });
    return setAttrs(this.hline, {
      x1: x,
      y1: y - this.r,
      x2: x,
      y2: y + this.r
    });
  }

};

add = function(type, parent, attrs) {
  var obj;
  obj = document.createElementNS(svgurl, type);
  parent.appendChild(obj);
  setAttrs(obj, attrs);
  return obj;
};

click = function(s) {
  event.preventDefault();
  if (s === 'in' && SIZE > 64) {
    SIZE = Math.floor(SIZE / 2);
  }
  if (s === 'out' && SIZE < 65536) {
    SIZE *= 2;
  }
  if (s === 'center') {
    centrera();
  }
  if (s === 'aim') {
    aimEvent();
  }
  event.stopPropagation();
  return drawMap();
};

mousedown = function(event) {
  return mouse = [event.x, event.y];
};

mouseup = function(event) {
  return mouse = [];
};

mousemove = function(event) {
  var dx, dy, factor;
  if (mouse.length === 0) {
    return;
  }
  factor = 2;
  if (SIZE === 64) {
    factor = 0.25;
  }
  if (SIZE === 128) {
    factor = 0.5;
  }
  if (SIZE === 256) {
    factor = 1;
  }
  dx = event.movementX;
  dy = event.movementY;
  mouse = [dx, dy];
  center[0] -= dx * factor;
  center[1] += dy * factor;
  updateMode = 0;
  return drawMap();
};

touchstart = function(event) {
  var touch, touches;
  event.preventDefault();
  touches = event.targetTouches;
  if (touches.length !== 1) {
    return;
  }
  touch = touches[0];
  return mouse = [touch.clientX, touch.clientY];
};

touchend = function(event) {
  event.preventDefault();
  mouse = [];
  return drawMap();
};

touchmove = function(event) {
  var dx, dy, factor, touch, touches;
  event.preventDefault();
  if (mouse.length === 0) {
    return;
  }
  touches = event.targetTouches;
  if (touches.length !== 1) {
    return;
  }
  touch = touches[0];
  factor = 2;
  if (SIZE === 64) {
    factor = 0.25;
  }
  if (SIZE === 128) {
    factor = 0.5;
  }
  if (SIZE === 256) {
    factor = 1;
  }
  dx = touch.clientX - mouse[0];
  dy = touch.clientY - mouse[1];
  mouse = [touch.clientX, touch.clientY];
  center[0] -= dx * factor;
  center[1] += dy * factor;
  updateMode = 0;
  return drawMap();
};

svg.addEventListener('touchstart', touchstart);

svg.addEventListener('touchmove', touchmove);

svg.addEventListener('touchend', touchend);

svg.addEventListener('mousedown', mousedown);

svg.addEventListener('mousemove', mousemove);

svg.addEventListener('mouseup', mouseup);

convert = function([x, y], size = SIZE) { // sweref punkt
  var dx, dy;
  dx = x % size; // beräkna vektor dx,dy (sweref)
  dy = y % size;
  x -= dx; // beräkna rutans SW hörn x,y (sweref)
  y -= dy;
  dx = map(dx, 0, size, 0, TILE); // map n,start1,stop1,start2,stop2
  dy = map(dy, 0, size, 0, TILE);
  return [x, y, dx, dy];
};

ass([655360, 6553600, 64, 72], convert([655360 + 16, 6553600 + 18], 64));

ass([655360, 6553600, 128, 128], convert([655360 + 64, 6553600 + 64], 128));

ass([655360 + 128, 6553600 + 128, 0, 0], convert([655360 + 128, 6553600 + 128], 128));

ass([655360, 6553600, 44, 44], convert([655360 + 22, 6553600 + 22], 128));

ass([655360, 6553600, 128, 128], convert([655360 + 128, 6553600 + 128], 256));

ass([655360, 6553600, 64, 64], convert([655360 + 64, 6553600 + 64], 256));

ass([655360, 6553600, 64, 74], convert([655360 + 128, 6553600 + 148], 512));

ass([655360, 6553600, 32, 32], convert([655360 + 64, 6553600 + 64], 512));

ass([655360, 6553600, 200, 250], convert([655360 + 400, 6553600 + 500], 512));

ass([655360, 6553600, 32, 37], convert([655360 + 128, 6553600 + 148], 1024));

ass([655360, 6553600, 16, 16], convert([655360 + 64, 6553600 + 64], 1024));

ass([655360, 6553600, 100, 125], convert([655360 + 400, 6553600 + 500], 1024));

updateTrail = function(baseX, baseY, dx, dy) {
  var k, len, ref, s, x, x0, x1, xx, y, y0, y1, yy;
  if (!currentPath) {
    setAttrs(trail, {
      points: ''
    });
    return;
  }
  x0 = baseX - SIZE;
  x1 = baseX + SIZE;
  y0 = baseY - SIZE;
  y1 = baseY + SIZE;
  s = [];
  ref = currentPath.points;
  for (k = 0, len = ref.length; k < len; k++) {
    [x, y] = ref[k];
    xx = map(x, x0, x1, W / 2 - TILE, W / 2 + TILE);
    yy = map(y, y0, y1, H / 2 - TILE, H / 2 + TILE);
    s.push(`${Math.round(xx - dx)},${Math.round(H + dy - yy)}`);
  }
  return setAttrs(trail, {
    points: s.join(' ')
  });
};

drawMap = function() {
  var baseX, baseY, dx, dy, href, i, j, k, l, len, len1, px, py, ref, ref1, x, y;
  [baseX, baseY, dx, dy] = convert(center);
  ref = range(-nh, nh + 1);
  for (k = 0, len = ref.length; k < len; k++) {
    j = ref[k];
    y = baseY + j * SIZE - SIZE;
    py = H / 2 - TILE * j + dy;
    ref1 = range(-nw, nw + 1);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      i = ref1[l];
      x = baseX + i * SIZE;
      px = W / 2 + TILE * i - dx;
      href = `maps\\${SIZE}\\${y}-${x}-${SIZE}.jpg`;
      if (href !== images[j + nh][i + nw].getAttributeNS(null, 'href')) { // only update if needed
        setAttrs(images[j + nh][i + nw], {
          href: href
        });
      }
      setAttrs(images[j + nh][i + nw], {
        x: px,
        y: py
      });
      setAttrs(rects[j + nh][i + nw], {
        x: px,
        y: py
      });
    }
  }
  updateTrail(Math.round(baseX), Math.round(baseY), Math.round(dx), Math.round(dy));
  if (texts.length === 8) {
    texts[0].textContent = target.length === 2 ? `${bearing(target, center)} º` : "";
    texts[1].textContent = target.length === 2 ? `${Math.round(distance(target, center))} m` : "";
    if (currentPath) {
      if (record === 0) {
        texts[2].textContent = `${currentPath.points.length}`;
      }
      if (record === 1) {
        texts[2].textContent = `Record ${currentPath.points.length}`;
      }
    } else {
      texts[2].textContent = `Boxes: ${boxes.length}`;
    }
    texts[3].textContent = `${SIZE} ${updateMode}`;
    texts[4].textContent = `${position[0]}`;
    texts[5].textContent = `${position[1]}`;
    texts[6].textContent = `${Math.round(center[0])}`;
    texts[7].textContent = `${Math.round(center[1])}`;
    if (buttons.target) {
      return buttons.target.move();
    }
  }
};

centrera = function() {
  var g;
  updateMode = 1;
  grid = geodetic_to_grid(position[0], position[1]);
  center = (function() {
    var k, len, results;
    results = [];
    for (k = 0, len = grid.length; k < len; k++) {
      g = grid[k];
      results.push(g);
    }
    return results;
  })();
  center.reverse();
  return drawMap();
};

aimEvent = function() {
  if (target.length === 0) {
    target = center.slice();
    return buttons.target.moveHard(W / 2, H / 2);
  } else {
    target = [];
    return buttons.target.moveHard(INVISIBLE, INVISIBLE);
  }
};

//####
loadPath = function() { // url -> localStorage
  var parameters;
  boxes = localStorage.boxes ? JSON.parse(localStorage.boxes) : [];
  parameters = getParameters();
  if (!parameters.path) {
    return;
  }
  currentPath = new Path(parameters.path);
  return currentPath.save();
};

clearPath = function() {
  currentPath = null;
  drawMap();
  return more();
};

fetchPath = function() { // visa alla synliga paths. Närmaste gulmarkeras, övriga gråmarkeras
  var bestDist, besti, d, i, k, key, l, len, len1, p, ref, x0, x1, y0, y1;
  bestDist = 9999999;
  besti = -1;
  for (i = k = 0, len = boxes.length; k < len; i = ++k) {
    [key, [[x0, y0], [x1, y1]]] = boxes[i];
    ref = [[x0, y0], [x0, y1], [x1, y0], [x1, y1]];
    for (l = 0, len1 = ref.length; l < len1; l++) {
      p = ref[l];
      d = distance(p, center);
      if (d < bestDist) {
        bestDist = d;
        besti = i;
      }
    }
  }
  if (besti !== -1) {
    currentPath = new Path(localStorage[boxes[besti][0]]);
    center = currentPath.points[0].slice();
  }
  more();
  return drawMap();
};

mark = function() { // Spara center i localStorage
  var temp;
  temp = new Path(`${Math.round(center[0])},${Math.round(center[1])}`);
  temp.save();
  return more();
};

deletePath = function() { // tag bort current Path från localStorage
  currentPath.delete();
  return more();
};

recordPath = function() { // start/stopp av inspelning av path
  record = 1 - record;
  if (record === 1) {
    currentPath = new Path("");
  }
  if (record === 0) {
    currentPath.save();
  }
  buttons.record.setTextFill(['#000f', '#f00f'][record]);
  texts[2].textContent = `${currentPath.points.length}`;
  return more();
};

sharePath = function() {
  var body, box, bytes, hash, header, i, k, key, l, len, len1, ref, total, xmax, xmin, ymax, ymin;
  header = '';
  body = '';
  if (currentPath && currentPath.points.length > 0) {
    header = `${currentPath.points.length} points. ${currentPath.distance} meter.`;
    body += `${window.location.origin + window.location.pathname}?path=${currentPath.path}`;
  }
  body += "\n";
  for (i = k = 0, len = boxes.length; k < len; i = ++k) {
    box = boxes[i];
    [hash, [[xmin, ymin], [xmax, ymax]]] = box;
    body += `Box ${i + 1}: xmin=${xmin} ymin=${ymin} xmax=${xmax} ymax=${ymax} hash=${hash}\n`;
  }
  //body += "\n"
  total = 0;
  ref = range(localStorage.length);
  for (l = 0, len1 = ref.length; l < len1; l++) {
    i = ref[l];
    key = localStorage.key(i);
    if (key === 'boxes') {
      continue;
    }
    bytes = localStorage[key].length;
    body += `\nLocalStorage ${key} (${bytes} bytes)\n`;
    body += `${localStorage[key]}\n`;
    total += bytes;
  }
  body += `\nSize in bytes: ${total}\n`;
  sendMail(header, body);
  return more();
};

//####
makeText = function(x, y) {
  var text;
  text = add('text', svg, {
    x: x,
    y: y,
    stroke: 'black',
    'stroke-width': 1,
    'text-anchor': 'middle'
  });
  text.style.fontSize = '50px';
  text.style.userSelect = 'none';
  return texts.push(text);
};

nada = function(event) {
  event.preventDefault();
  return event.stopPropagation();
};

locationUpdateFail = function(error) {
  var messages;
  if (error.code === error.PERMISSION_DENIED) {
    return messages = ['', '', '', '', '', 'Check location permissions'];
  }
};

locationUpdate = function(p) {
  var g, temp;
  position = [myRound(p.coords.latitude, 6), myRound(p.coords.longitude, 6)];
  grid = geodetic_to_grid(position[0], position[1]);
  temp = (function() {
    var k, len, results;
    results = [];
    for (k = 0, len = grid.length; k < len; k++) {
      g = grid[k];
      results.push(Math.round(g));
    }
    return results;
  })();
  temp.reverse();
  if (record === 1) {
    currentPath.points.push(temp.slice());
  }
  if (updateMode === 1) {
    center = temp;
  }
  return drawMap();
};

initGPS = function() {
  return navigator.geolocation.watchPosition(locationUpdate, locationUpdateFail, {
    enableHighAccuracy: true,
    maximumAge: 30000,
    timeout: 27000
  });
};

initTrail = function() {
  var marker;
  if (false) {
    return trail = add('path', svg, {
      d: "",
      stroke: 'red',
      'stroke-width': 1,
      fill: 'none'
    });
  } else {
    marker = add('marker', svg, {
      id: 'dot',
      viewBox: "0 0 10 10",
      refX: "5",
      refY: "5",
      markerWidth: "5",
      markerHeight: "5"
    });
    add('circle', marker, {
      cx: "5",
      cy: "5",
      r: "5",
      fill: "yellow"
    });
    return trail = add('polyline', svg, {
      points: "",
      fill: "none",
      stroke: "red",
      'stroke-width': 1,
      'marker-start': "url(#dot)",
      'marker-mid': "url(#dot)",
      'marker-end': "url(#dot)"
    });
  }
};

more = function() {
  var k, len, name, names, ref, results;
  moreMode = 1 - moreMode;
  names = "fetch record mark play clear delete share";
  ref = names.split(' ');
  results = [];
  for (k = 0, len = ref.length; k < len; k++) {
    name = ref[k];
    if (moreMode === 0) {
      buttons[name].disable();
    }
    if (moreMode === 1) {
      results.push(buttons[name].enable());
    } else {
      results.push(void 0);
    }
  }
  return results;
};

startup = function() {
  var _, g, i, irow, k, l, len, len1, ref, ref1, rrow, x, x0, x1, x2, y, y0, y1, y2, y3;
  loadPath();
  initGPS();
  add('rect', svg, {
    width: W,
    height: H,
    fill: 'green'
  });
  grid = geodetic_to_grid(position[0], position[1]);
  center = (function() {
    var k, len, results;
    results = [];
    for (k = 0, len = grid.length; k < len; k++) {
      g = grid[k];
      results.push(g);
    }
    return results;
  })();
  center.reverse();
  images = [];
  rects = [];
  texts = [];
  ref = range(2 * nh + 1);
  for (k = 0, len = ref.length; k < len; k++) {
    _ = ref[k];
    irow = [];
    rrow = [];
    ref1 = range(2 * nw + 1);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      _ = ref1[l];
      irow.push(add('image', svg, {}));
      rrow.push(add('rect', svg, {
        width: TILE,
        height: TILE,
        stroke: 'black',
        'stroke-width': 1,
        fill: 'none'
      }));
    }
    images.push(irow);
    rects.push(rrow);
  }
  x0 = 0.36 * W;
  x1 = 0.64 * W;
  y0 = 120 + 10;
  y1 = H - 180 + 10;
  y2 = H - 120 + 10;
  y3 = H - 60 + 10;
  makeText(x0, y0);
  makeText(x1, y0);
  makeText(x0, y1);
  makeText(x1, y1);
  makeText(x0, y2);
  makeText(x1, y2);
  makeText(x0, y3);
  makeText(x1, y3);
  x0 = 128;
  x1 = W / 2;
  x2 = W - 128;
  y0 = 128;
  y1 = 256 + 128;
  y2 = 512 + 128;
  y3 = H - 128;
  buttons.target = new TargetButton(INVISIBLE, INVISIBLE, '', '#f008');
  new TargetButton(W / 2, H / 2, "click('aim')");
  new Button(x0, y0, 'in', "click('in')");
  new Button(x2, y0, 'out', "click('out')");
  new Button(x0, y3, 'center', "click('center')");
  new Button(x2, y3, 'more', "more()");
  x = (function() {
    var len2, m, ref2, results;
    ref2 = range(0, 360, 60);
    results = [];
    for (m = 0, len2 = ref2.length; m < len2; m++) {
      i = ref2[m];
      results.push(W / 2 + 400 * Math.cos(radians(i)));
    }
    return results;
  })();
  y = (function() {
    var len2, m, ref2, results;
    ref2 = range(0, 360, 60);
    results = [];
    for (m = 0, len2 = ref2.length; m < len2; m++) {
      i = ref2[m];
      results.push(H / 2 + 400 * Math.sin(radians(i)));
    }
    return results;
  })();
  buttons.fetch = new Button(W / 2, H / 2, 'fetch', "fetchPath()", '#ff04');
  buttons.mark = new Button(x[0], y[0], 'mark', "mark()", '#ff04');
  buttons.delete = new Button(x[1], y[1], 'delete', "deletePath()", '#ff04');
  buttons.clear = new Button(x[2], y[2], 'clear', "clearPath()", '#ff04');
  buttons.record = new Button(x[3], y[3], 'record', "recordPath()", '#ff04');
  buttons.play = new Button(x[4], y[4], 'play', "playPath()", '#ff04');
  buttons.share = new Button(x[5], y[5], 'share', "sharePath()", '#ff04');
  initTrail();
  more();
  return drawMap();
};

startup();

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2021\013-gpsKarta2\coffee\sketch.coffee