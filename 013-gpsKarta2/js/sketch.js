// Generated by CoffeeScript 2.4.1
var Button, H, INVISIBLE, SIZE, TILE, TargetButton, W, add, aimButton, aimEvent, ass, bearing, center, centrera, click, convert, degrees, distance, drawMap, images, makeText, mouse, mousedown, mousemove, mouseup, position, range, rec, recButton, recEvent, rects, setAttrs, startup, svg, svgurl, target, targetButton, texts;

W = 2.5 * 256; // window.innerWidth

H = 2.5 * 256; // window.innerHeight

INVISIBLE = -100;

SIZE = 128; // 128..65536 # rutornas storlek i meter

TILE = 256; // rutornas storlek i pixels

range = _.range;

ass = function(a, b) {
  return chai.assert.deepEqual(a, b);
};

svgurl = "http://www.w3.org/2000/svg";

svg = document.getElementById('svgOne');

position = [
  59.09663380498758,
  17.718942469566965 // 3*128 meter in.
];

center = []; // skärmens mittpunkt (sweref). Påverkas av pan

target = []; // målkoordinater (sweref)

targetButton = null;

mouse = [];

images = [];

rects = [];

texts = [];

recButton = null;

rec = 0;

aimButton = null;

degrees = function(radians) {
  return radians * 180 / Math.PI;
};

distance = function(p, q) {
  var dx, dy;
  if (p.length !== 2 || q.length !== 2) {
    return 0;
  }
  dx = p[0] - q[0];
  dy = p[1] - q[1];
  return Math.round(Math.sqrt(dx * dx + dy * dy));
};

bearing = function(p, q) {
  var dx, dy, res;
  if (p.length !== 2 || q.length !== 2) {
    return 0;
  }
  dx = p[0] - q[0];
  dy = p[1] - q[1];
  res = 450 - Math.round(degrees(Math.atan2(dx, dy)));
  return res % 360;
};

Button = class Button {
  constructor(x, y, prompt, event, color = '#f000') {
    this.r = 25;
    if (prompt !== "") {
      this.text = add('text', svg, {
        x: x,
        y: y + 5,
        stroke: 'black',
        'stroke-width': 1,
        'text-anchor': 'middle'
      });
      this.text.textContent = prompt;
      this.text.style.fontSize = '25px';
    }
    this.circle = add('circle', svg, {
      cx: x,
      cy: y,
      r: this.r,
      fill: color,
      stroke: 'black',
      'stroke-width': 1,
      onclick: event
    });
  }

};

TargetButton = class TargetButton extends Button {
  constructor(x, y, event, color) {
    super(x, y, '', event, color);
    this.vline = add('line', svg, {
      x1: x - this.r,
      y1: y,
      x2: x + this.r,
      y2: y,
      stroke: 'black',
      'stroke-width': 1
    });
    this.hline = add('line', svg, {
      x1: x,
      y1: y - this.r,
      x2: x,
      y2: y + this.r,
      stroke: 'black',
      'stroke-width': 1
    });
  }

  move() {
    var antal, dx, dy, x, y;
    if (target.length === 0) {
      return;
    }
    dx = target[0] - center[0];
    dy = target[1] - center[1];
    antal = SIZE === 128 ? 2 : Math.floor(SIZE / TILE);
    x = H / 2 + dy * antal;
    y = W / 2 - dx * antal;
    return this.moveHard(x, y);
  }

  moveHard(x, y) {
    setAttrs(this.circle, {
      cy: y,
      cx: x
    });
    setAttrs(this.vline, {
      x1: x - this.r,
      y1: y,
      x2: x + this.r,
      y2: y
    });
    return setAttrs(this.hline, {
      x1: x,
      y1: y - this.r,
      x2: x,
      y2: y + this.r
    });
  }

};

add = function(type, parent, attrs) {
  var obj;
  obj = document.createElementNS(svgurl, type);
  parent.appendChild(obj);
  setAttrs(obj, attrs);
  return obj;
};

setAttrs = function(obj, attrs) {
  var key, results;
  results = [];
  for (key in attrs) {
    results.push(obj.setAttributeNS(null, key, attrs[key]));
  }
  return results;
};

click = function(s) {
  if (s === 'in' && SIZE > 128) {
    SIZE = Math.floor(SIZE / 2);
  }
  if (s === 'out' && SIZE < 65536) {
    SIZE *= 2;
  }
  if (s === 'ctr') {
    centrera();
  }
  if (s === 'aim') {
    aimEvent();
  }
  return drawMap();
};

mousedown = function(evt) {
  return mouse = [evt.x, evt.y];
};

mouseup = function(evt) {
  return mouse = [];
};

mousemove = function(evt) {
  var factor;
  if (mouse.length === 0) {
    return;
  }
  factor = 2;
  if (SIZE === 128) {
    factor = 0.5;
  }
  if (SIZE === 256) {
    factor = 1;
  }
  center[1] = center[1] - evt.movementX * factor;
  center[0] = center[0] + evt.movementY * factor;
  center[1] = Math.round(center[1]);
  center[0] = Math.round(center[0]);
  return drawMap();
};

convert = function([x, y]) { // sweref punkt
  var dx, dy;
  dx = x % SIZE; // beräkna vektor dx,dy (sweref)
  dy = y % SIZE;
  x -= dx; // beräkna rutans nedre vänstra hörn x,y (sweref)
  y -= dy;
  if (SIZE === 128) {
    dx = 2 * dx + SIZE;
    dy = 3 * SIZE - 2 * dy;
  } else if (SIZE === 256) {
    dx = dx + Math.floor(SIZE / 2);
    dy = Math.floor(3 * SIZE / 2) - dy;
  } else {
    dx = Math.floor(dx / 2) + Math.floor(SIZE / 4);
    dy = Math.floor(3 * SIZE / 4) - Math.floor(dy / 2);
  }
  return [x, y, dx, dy];
};

drawMap = function() {
  var baseX, baseY, dx, dy, href, i, j, k, l, len, len1, n, px, py, ref, ref1, x, y;
  n = 2;
  [baseX, baseY, dx, dy] = convert(center);
  ref = range(2 * n + 1);
  for (k = 0, len = ref.length; k < len; k++) {
    j = ref[k];
    y = baseY + (j - n) * SIZE;
    py = TILE * (j - n) + dy;
    ref1 = range(2 * n + 1);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      i = ref1[l];
      x = baseX + (n - i) * SIZE;
      px = TILE * (i - n) + dx;
      href = `maps\\${SIZE}\\${x}-${y}-${SIZE}.jpg`;
      setAttrs(images[j][i], {
        x: py,
        y: px,
        href: href
      });
      setAttrs(rects[j][i], {
        x: py,
        y: px
      });
    }
  }
  texts[0].textContent = `C:${center} T:${target} D:${distance(target, center)} B:${bearing(target, center)}`;
  texts[1].textContent = `Z:${SIZE} B:${[baseX, baseY]}`;
  return targetButton.move();
};

centrera = function() {
  var g, grid;
  grid = geodetic_to_grid(position[0], position[1]);
  center = (function() {
    var k, len, results;
    results = [];
    for (k = 0, len = grid.length; k < len; k++) {
      g = grid[k];
      results.push(Math.round(g));
    }
    return results;
  })();
  return drawMap();
};

aimEvent = function() {
  if (target.length === 0) {
    target = center.slice();
    return targetButton.moveHard(W / 2, H / 2);
  } else {
    target = [];
    return targetButton.moveHard(INVISIBLE, INVISIBLE);
  }
};

recEvent = function() {
  rec = 1 - rec;
  return recButton.setAttributeNS(null, 'fill', ['#f008', '#f000'][rec]);
};

makeText = function(x, y) {
  var text;
  text = add('text', svg, {
    x: x,
    y: y,
    stroke: 'black',
    'stroke-width': 1,
    'text-anchor': 'middle'
  });
  text.style.fontSize = '25px';
  return texts.push(text);
};

startup = function() {
  var baseX, baseY, dx, dy, g, grid, i, irow, j, k, l, len, len1, n, ref, ref1, rrow;
  add('rect', svg, {
    width: W,
    height: H,
    fill: 'green'
  });
  grid = geodetic_to_grid(position[0], position[1]);
  center = (function() {
    var k, len, results;
    results = [];
    for (k = 0, len = grid.length; k < len; k++) {
      g = grid[k];
      results.push(Math.round(g));
    }
    return results;
  })();
  [baseX, baseY, dx, dy] = convert(center);
  images = [];
  rects = [];
  texts = [];
  n = 2;
  ref = range(2 * n + 1);
  for (k = 0, len = ref.length; k < len; k++) {
    j = ref[k];
    irow = [];
    rrow = [];
    ref1 = range(2 * n + 1);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      i = ref1[l];
      irow.push(add('image', svg, {}));
      rrow.push(add('rect', svg, {
        width: TILE,
        height: TILE,
        stroke: 'black',
        'stroke-width': 1,
        fill: 'none'
      }));
    }
    images.push(irow);
    rects.push(rrow);
  }
  makeText(W / 2, 40);
  makeText(W / 2, H - 30);
  targetButton = new TargetButton(INVISIBLE, INVISIBLE, '', '#f008');
  aimButton = new TargetButton(W / 2, H / 2, "click('aim')");
  new Button(35, 35, 'in', "click('in')");
  new Button(W - 35, 35, 'out', "click('out')");
  new Button(35, H - 35, 'ctr', "click('ctr')");
  recButton = new Button(W - 35, H - 35, 'rec', "recEvent()");
  console.log(grid_to_geodetic(6553600 + 3 * 128, 655360 + 3 * 128));
  return drawMap();
};

startup();

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2021\013-gpsKarta2\coffee\sketch.coffee