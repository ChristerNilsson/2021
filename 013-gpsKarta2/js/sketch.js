// Generated by CoffeeScript 2.4.1
var H, INVISIBLE, SIZE, TILE, W, add, aimEvent, boxes, buttons, center, centrera, clearPath, click, convert, currentPath, deletePath, drawMap, fetchPath, grid, images, initGPS, initTrail, loadPath, locationUpdate, locationUpdateFail, makeMarker, makeText, mark, more, moreMode, mouse, mousedown, mousemove, mouseup, nada, nh, nw, playMode, playPath, position, record, recordPath, rects, rensaLocalStorage, sendMail, setAttrs, sharePath, startup, svg, svgurl, target, texts, touchend, touchmove, touchstart, trail, updateMode, updateTrail;

W = window.innerWidth;

H = window.innerHeight;

INVISIBLE = -200;

SIZE = 256; // 64..65536 # rutornas storlek i meter

TILE = 256; // rutornas storlek i pixels

nw = Math.floor(W / TILE);

nh = Math.floor(H / TILE);

updateMode = 0; // 0=manual 1=gps

moreMode = 1;

playMode = 0;

record = 0;

boxes = [];

currentPath = null;

trail = null; // M256,256 l100,100 l50,0

sendMail = function(subject, body) {
  mail.href = "mailto:janchrister.nilsson@gmail.com?subject=" + encodeURIComponent(subject) + "&body=" + encodeURIComponent(body);
  return mail.click();
};

setAttrs = function(obj, attrs) {
  var key, results;
  if (!obj) {
    return;
  }
  results = [];
  for (key in attrs) {
    results.push(obj.setAttributeNS(null, key, attrs[key]));
  }
  return results;
};

svgurl = "http://www.w3.org/2000/svg";

svg = document.getElementById('svgOne');

//position = [59.09443087294174, 17.7142975294884] # 6553600,655360
position = [
  59.265196,
  18.132748 // Home (lat long)
];

grid = [];

center = []; // skärmens mittpunkt (sweref). Påverkas av pan (x y) (6 7)

target = []; // målkoordinater (sweref)

mouse = [];

images = [];

rects = [];

texts = [];

buttons = {};

add = function(type, parent, attrs) {
  var obj;
  obj = document.createElementNS(svgurl, type);
  parent.appendChild(obj);
  setAttrs(obj, attrs);
  return obj;
};

click = function(s) {
  event.preventDefault();
  if (s === 'in' && SIZE > 64) {
    SIZE = Math.floor(SIZE / 2);
  }
  if (s === 'out' && SIZE < 65536) {
    SIZE *= 2;
  }
  if (s === 'center') {
    centrera();
  }
  if (s === 'aim') {
    aimEvent();
  }
  event.stopPropagation();
  return drawMap();
};

mousedown = function(event) {
  return mouse = [event.x, event.y];
};

mouseup = function(event) {
  return mouse = [];
};

mousemove = function(event) {
  var dx, dy, factor;
  if (mouse.length === 0) {
    return;
  }
  factor = 2;
  if (SIZE === 64) {
    factor = 0.25;
  }
  if (SIZE === 128) {
    factor = 0.5;
  }
  if (SIZE === 256) {
    factor = 1;
  }
  dx = event.movementX;
  dy = event.movementY;
  mouse = [dx, dy];
  center[0] -= dx * factor;
  center[1] += dy * factor;
  updateMode = 0;
  return drawMap();
};

touchstart = function(event) {
  var touch, touches;
  event.preventDefault();
  touches = event.targetTouches;
  if (touches.length !== 1) {
    return;
  }
  touch = touches[0];
  return mouse = [touch.clientX, touch.clientY];
};

touchend = function(event) {
  event.preventDefault();
  mouse = [];
  return drawMap();
};

touchmove = function(event) {
  var dx, dy, factor, touch, touches;
  event.preventDefault();
  if (mouse.length === 0) {
    return;
  }
  touches = event.targetTouches;
  if (touches.length !== 1) {
    return;
  }
  touch = touches[0];
  factor = 2;
  if (SIZE === 64) {
    factor = 0.25;
  }
  if (SIZE === 128) {
    factor = 0.5;
  }
  if (SIZE === 256) {
    factor = 1;
  }
  dx = touch.clientX - mouse[0];
  dy = touch.clientY - mouse[1];
  mouse = [touch.clientX, touch.clientY];
  center[0] -= dx * factor;
  center[1] += dy * factor;
  updateMode = 0;
  return drawMap();
};

svg.addEventListener('touchstart', touchstart);

svg.addEventListener('touchmove', touchmove);

svg.addEventListener('touchend', touchend);

svg.addEventListener('mousedown', mousedown);

svg.addEventListener('mousemove', mousemove);

svg.addEventListener('mouseup', mouseup);

convert = function([x, y], size = SIZE) { // sweref punkt
  var dx, dy;
  dx = x % size; // beräkna vektor dx,dy (sweref)
  dy = y % size;
  x -= dx; // beräkna rutans SW hörn x,y (sweref)
  y -= dy;
  dx = map(dx, 0, size, 0, TILE); // map n,start1,stop1,start2,stop2
  dy = map(dy, 0, size, 0, TILE);
  return [x, y, dx, dy];
};

ass([655360, 6553600, 64, 72], convert([655360 + 16, 6553600 + 18], 64));

ass([655360, 6553600, 128, 128], convert([655360 + 64, 6553600 + 64], 128));

ass([655360 + 128, 6553600 + 128, 0, 0], convert([655360 + 128, 6553600 + 128], 128));

ass([655360, 6553600, 44, 44], convert([655360 + 22, 6553600 + 22], 128));

ass([655360, 6553600, 128, 128], convert([655360 + 128, 6553600 + 128], 256));

ass([655360, 6553600, 64, 64], convert([655360 + 64, 6553600 + 64], 256));

ass([655360, 6553600, 64, 74], convert([655360 + 128, 6553600 + 148], 512));

ass([655360, 6553600, 32, 32], convert([655360 + 64, 6553600 + 64], 512));

ass([655360, 6553600, 200, 250], convert([655360 + 400, 6553600 + 500], 512));

ass([655360, 6553600, 32, 37], convert([655360 + 128, 6553600 + 148], 1024));

ass([655360, 6553600, 16, 16], convert([655360 + 64, 6553600 + 64], 1024));

ass([655360, 6553600, 100, 125], convert([655360 + 400, 6553600 + 500], 1024));

updateTrail = function(baseX, baseY, dx, dy) {
  var k, len, ref, s, x, x0, x1, xx, y, y0, y1, yy;
  if (!currentPath) {
    setAttrs(trail, {
      points: ''
    });
    return;
  }
  x0 = baseX - SIZE;
  x1 = baseX + SIZE;
  y0 = baseY - SIZE;
  y1 = baseY + SIZE;
  s = [];
  ref = currentPath.points;
  for (k = 0, len = ref.length; k < len; k++) {
    [x, y] = ref[k];
    xx = map(x, x0, x1, W / 2 - TILE, W / 2 + TILE);
    yy = map(y, y0, y1, H / 2 - TILE, H / 2 + TILE);
    s.push(`${Math.round(xx - dx)},${Math.round(H + dy - yy)}`);
  }
  return setAttrs(trail, {
    points: s.join(' ')
  });
};

drawMap = function() {
  var baseX, baseY, dx, dy, href, i, j, k, l, len, len1, px, py, ref, ref1, x, y;
  [baseX, baseY, dx, dy] = convert(center);
  ref = range(-nh, nh + 1);
  for (k = 0, len = ref.length; k < len; k++) {
    j = ref[k];
    y = baseY + j * SIZE - SIZE;
    py = H / 2 - TILE * j + dy;
    ref1 = range(-nw, nw + 1);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      i = ref1[l];
      x = baseX + i * SIZE;
      px = W / 2 + TILE * i - dx;
      href = `maps\\${SIZE}\\${y}-${x}-${SIZE}.jpg`;
      if (href !== images[j + nh][i + nw].getAttributeNS(null, 'href')) { // only update if needed
        setAttrs(images[j + nh][i + nw], {
          href: href
        });
      }
      setAttrs(images[j + nh][i + nw], {
        x: px,
        y: py
      });
      setAttrs(rects[j + nh][i + nw], {
        x: px,
        y: py
      });
    }
  }
  updateTrail(Math.round(baseX), Math.round(baseY), Math.round(dx), Math.round(dy));
  if (texts.length === 8) {
    texts[0].textContent = target.length === 2 ? `${bearing(target, center)} º` : "";
    texts[1].textContent = target.length === 2 ? `${Math.round(distance(target, center))} m` : "";
    if (currentPath) {
      if (record === 0) {
        texts[2].textContent = `${currentPath.points.length}`;
      }
      if (record === 1) {
        texts[2].textContent = `Record ${currentPath.points.length}`;
      }
    } else {
      texts[2].textContent = `Boxes: ${boxes.length}`;
    }
    texts[3].textContent = `${SIZE} ${updateMode}`;
    texts[4].textContent = `${myRound(position[0], 6)}`;
    texts[5].textContent = `${myRound(position[1], 6)}`;
    texts[6].textContent = `${myRound(center[0])}`;
    texts[7].textContent = `${myRound(center[1])}`;
    if (buttons.target) {
      return buttons.target.move();
    }
  }
};

centrera = function() {
  var g;
  updateMode = 1;
  grid = geodetic_to_grid(position[0], position[1]);
  center = (function() {
    var k, len, results;
    results = [];
    for (k = 0, len = grid.length; k < len; k++) {
      g = grid[k];
      results.push(g);
    }
    return results;
  })();
  center.reverse();
  return drawMap();
};

aimEvent = function() {
  if (target.length === 0) {
    target = center.slice();
    return buttons.target.moveHard(W / 2, H / 2);
  } else {
    target = [];
    return buttons.target.moveHard(INVISIBLE, INVISIBLE);
  }
};

//####
loadPath = function() { // url -> localStorage
  var parameters;
  boxes = localStorage.boxes ? JSON.parse(localStorage.boxes) : [];
  parameters = getParameters();
  if (!parameters.path) {
    return;
  }
  currentPath = new Path(parameters.path);
  return currentPath.save();
};

clearPath = function() {
  currentPath = null;
  drawMap();
  return more();
};

fetchPath = function() { // visa alla synliga paths. Närmaste gulmarkeras, övriga gråmarkeras
  var bestDist, besti, d, i, k, key, l, len, len1, p, ref, x0, x1, y0, y1;
  bestDist = 9999999;
  besti = -1;
  for (i = k = 0, len = boxes.length; k < len; i = ++k) {
    [key, [[x0, y0], [x1, y1]]] = boxes[i];
    ref = [[x0, y0], [x0, y1], [x1, y0], [x1, y1]];
    for (l = 0, len1 = ref.length; l < len1; l++) {
      p = ref[l];
      d = distance(p, center);
      if (d < bestDist) {
        bestDist = d;
        besti = i;
      }
    }
  }
  if (besti !== -1) {
    currentPath = new Path(localStorage[boxes[besti][0]]);
    console.log(currentPath.points);
    // currentPath.points.reverse()
    // messages.push "reverse"
    center = currentPath.points[0].slice();
  }
  more();
  return drawMap();
};

mark = function() { // Spara center i localStorage
  var temp;
  temp = new Path(`${Math.round(center[0])},${Math.round(center[1])}`);
  temp.save();
  return more();
};

playPath = function() {
  var ended, started;
  playMode = 1 - playMode;
  started = false;
  ended = false;
  makeHints();
  return more();
};

deletePath = function() { // tag bort current Path från localStorage
  currentPath.delete();
  return more();
};

recordPath = function() { // start/stopp av inspelning av path
  record = 1 - record;
  if (record === 1) {
    currentPath = new Path("");
  }
  if (record === 0) {
    currentPath.save();
  }
  buttons.record.setTextFill(['#000f', '#f00f'][record]);
  texts[2].textContent = `${currentPath.points.length}`;
  return more();
};

sharePath = function() {
  var body, box, bytes, hash, header, i, k, key, l, len, len1, ref, total, xmax, xmin, ymax, ymin;
  header = '';
  body = '';
  messages.push(`curr ${curr}`);
  messages.push(`lastWord ${lastWord}`);
  messages.push(`lastSpoken ${lastSpoken}`);
  messages.push(`started ${started}`);
  messages.push(`ended ${ended}`);
  messages.push(`startingTime ${startingTime}`);
  messages.push(`endingTime ${endingTime}`);
  messages.push(`elapsedTime ${elapsedTime}`);
  messages.push(`userDistance ${userDistance}`);
  messages.push(`lastETA ${lastETA}`);
  messages.push(`updateMode ${updateMode}`);
  messages.push(`moreMode ${moreMode}`);
  messages.push(`playMode ${playMode}`);
  messages.push(`record ${record}`);
  messages.push("");
  messages.push(`hints: ${_.size(hints)}`);
  for (key in hints) {
    messages.push(`${key} ${hints[key]}`);
  }
  messages.push("");
  if (messages) {
    body += messages.join("\n");
  }
  body += "\n";
  if (currentPath && currentPath.points.length > 0) {
    header = `${currentPath.points.length} points. ${currentPath.distance} meter.`;
    body += `${window.location.origin + window.location.pathname}?path=${currentPath.path}`;
  }
  body += "\n\n";
  for (i = k = 0, len = boxes.length; k < len; i = ++k) {
    box = boxes[i];
    [hash, [[xmin, ymin], [xmax, ymax]]] = box;
    body += `Box ${i + 1}: xmin=${xmin} ymin=${ymin} xmax=${xmax} ymax=${ymax} hash=${hash}\n`;
  }
  total = 0;
  ref = range(localStorage.length);
  for (l = 0, len1 = ref.length; l < len1; l++) {
    i = ref[l];
    key = localStorage.key(i);
    if (key === 'boxes') {
      continue;
    }
    bytes = localStorage[key].length;
    if (bytes < 200) {
      body += `\nLocalStorage ${key} (${bytes} bytes)\n`;
      body += `${localStorage[key]}\n`;
      total += bytes;
    }
  }
  body += `\nSize in bytes: ${total}\n`;
  sendMail(header, body);
  messages.length = 0;
  return more();
};

//####
makeText = function(x, y) {
  var text;
  text = add('text', svg, {
    x: x,
    y: y,
    stroke: 'black',
    'stroke-width': 1,
    'text-anchor': 'middle'
  });
  text.style.fontSize = '50px';
  text.style.userSelect = 'none';
  return texts.push(text);
};

nada = function(event) {
  event.preventDefault();
  return event.stopPropagation();
};

locationUpdateFail = function(error) {
  var messages;
  if (error.code === error.PERMISSION_DENIED) {
    return messages = ['', '', '', '', '', 'Check location permissions'];
  }
};

locationUpdate = function(p) {
  var temp;
  position = [p.coords.latitude, p.coords.longitude];
  grid = geodetic_to_grid(position[0], position[1]);
  temp = grid;
  temp.reverse();
  gpsPoints.push(temp.slice());
  if (gpsPoints.length > 10) {
    gpsPoints.shift();
  }
  console.log(gpsPoints);
  messages.push(`locationUpdate ${temp}`);
  if (record === 1) {
    currentPath.points.push(temp.slice());
  }
  if (updateMode === 1) {
    center = temp;
  }
  if (playMode === 1) {
    sayHint(gpsPoints);
  }
  return drawMap();
};

initGPS = function() {
  return navigator.geolocation.watchPosition(locationUpdate, locationUpdateFail, {
    enableHighAccuracy: true,
    maximumAge: 30000,
    timeout: 27000
  });
};

makeMarker = function(name, n, color) {
  var result;
  result = add('marker', svg, {
    id: name,
    viewBox: `0 0 ${2 * n + 1} ${2 * n + 1}`,
    refX: n,
    refY: n,
    markerWidth: n,
    markerHeight: n
  });
  add('circle', result, {
    cx: n,
    cy: n,
    r: n,
    fill: color,
    stroke: 'black'
  });
  return result;
};

initTrail = function() {
  if (false) {
    return trail = add('path', svg, {
      d: "",
      stroke: 'red',
      'stroke-width': 1,
      fill: 'none'
    });
  } else {
    makeMarker('start', 8, 'green');
    makeMarker('dot', 2, 'yellow');
    makeMarker('end', 8, 'red');
    return trail = add('polyline', svg, {
      points: '',
      fill: 'none',
      stroke: 'red',
      'stroke-width': 2,
      'marker-start': "url(#start)",
      'marker-mid': "url(#dot)",
      'marker-end': "url(#end)"
    });
  }
};

more = function() {
  var k, len, name, names, ref, results;
  if (speaker === null) {
    initSpeaker();
  }
  moreMode = 1 - moreMode;
  names = "fetch record mark play clear delete share";
  ref = names.split(' ');
  results = [];
  for (k = 0, len = ref.length; k < len; k++) {
    name = ref[k];
    if (moreMode === 0) {
      buttons[name].disable();
    }
    if (moreMode === 1) {
      results.push(buttons[name].enable());
    } else {
      results.push(void 0);
    }
  }
  return results;
};

rensaLocalStorage = function() {
  var a, b, box, c, d, i, k, key, len, ref;
  ref = ''.split(' ');
  for (k = 0, len = ref.length; k < len; k++) {
    key = ref[k];
    console.log(key);
    localStorage.removeItem(key);
  }
  i = boxes.length - 1;
  while (i >= 0) {
    box = boxes[i];
    //console.log 'rensaLocalStorage',boxes
    [[a, b], [c, d]] = box[1];
    //console.log 'rensaLocalStorage',a,b,c,d
    if (a === null || b === null || c === null || d === null) {
      console.log('splice', box);
      boxes.splice(i, 1);
    }
    i -= 1;
  }
  return localStorage.boxes = JSON.stringify(boxes);
};

startup = function() {
  var _, g, i, irow, k, l, len, len1, ref, ref1, rrow, x, x0, x1, x2, y, y0, y1, y2, y3;
  loadPath();
  rensaLocalStorage();
  initGPS();
  add('rect', svg, {
    width: W,
    height: H,
    fill: 'green'
  });
  grid = geodetic_to_grid(position[0], position[1]);
  center = (function() {
    var k, len, results;
    results = [];
    for (k = 0, len = grid.length; k < len; k++) {
      g = grid[k];
      results.push(g);
    }
    return results;
  })();
  center.reverse();
  images = [];
  rects = [];
  texts = [];
  ref = range(2 * nh + 1);
  for (k = 0, len = ref.length; k < len; k++) {
    _ = ref[k];
    irow = [];
    rrow = [];
    ref1 = range(2 * nw + 1);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      _ = ref1[l];
      irow.push(add('image', svg, {}));
      rrow.push(add('rect', svg, {
        width: TILE,
        height: TILE,
        stroke: 'black',
        'stroke-width': 1,
        fill: 'none'
      }));
    }
    images.push(irow);
    rects.push(rrow);
  }
  x0 = 0.36 * W;
  x1 = 0.64 * W;
  y0 = 120 + 10;
  y1 = H - 180 + 10;
  y2 = H - 120 + 10;
  y3 = H - 60 + 10;
  makeText(x0, y0);
  makeText(x1, y0);
  makeText(x0, y1);
  makeText(x1, y1);
  makeText(x0, y2);
  makeText(x1, y2);
  makeText(x0, y3);
  makeText(x1, y3);
  x0 = 128;
  x1 = W / 2;
  x2 = W - 128;
  y0 = 128;
  y1 = 256 + 128;
  y2 = 512 + 128;
  y3 = H - 128;
  buttons.target = new TargetButton(INVISIBLE, INVISIBLE, '', '#f008');
  new TargetButton(W / 2, H / 2, "click('aim')");
  new Button(x0, y0, 'in', "click('in')");
  new Button(x2, y0, 'out', "click('out')");
  new Button(x0, y3, 'center', "click('center')");
  new Button(x2, y3, 'more', "more()");
  x = (function() {
    var len2, m, ref2, results;
    ref2 = range(0, 360, 60);
    results = [];
    for (m = 0, len2 = ref2.length; m < len2; m++) {
      i = ref2[m];
      results.push(W / 2 + 400 * Math.cos(radians(i)));
    }
    return results;
  })();
  y = (function() {
    var len2, m, ref2, results;
    ref2 = range(0, 360, 60);
    results = [];
    for (m = 0, len2 = ref2.length; m < len2; m++) {
      i = ref2[m];
      results.push(H / 2 + 400 * Math.sin(radians(i)));
    }
    return results;
  })();
  buttons.fetch = new Button(W / 2, H / 2, 'fetch', "fetchPath()", '#ff04');
  buttons.mark = new Button(x[0], y[0], 'mark', "mark()", '#ff04');
  buttons.delete = new Button(x[1], y[1], 'delete', "deletePath()", '#ff04');
  buttons.clear = new Button(x[2], y[2], 'clear', "clearPath()", '#ff04');
  buttons.record = new Button(x[3], y[3], 'record', "recordPath()", '#ff04');
  buttons.play = new Button(x[4], y[4], 'play', "playPath()", '#ff04');
  buttons.share = new Button(x[5], y[5], 'share', "sharePath()", '#ff04');
  initTrail();
  more();
  return drawMap();
};

startup();

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2021\013-gpsKarta2\coffee\sketch.coffee