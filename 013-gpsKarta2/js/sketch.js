// Generated by CoffeeScript 2.4.1
var Button, H, INVISIBLE, Path, SIZE, TILE, TargetButton, W, add, aimEvent, bearing, boxes, buttons, center, centrera, clearPath, click, convert, currentPath, deletePath, distance, drawMap, fetchPath, grid, images, initGPS, initTrail, loadPath, locationUpdate, locationUpdateFail, makeText, mark, more, moreMode, mouse, mousedown, mousemove, mouseup, nada, nh, nw, position, rec, recPath, rects, sendMail, setAttrs, sharePath, startup, svg, svgurl, target, texts, touchend, touchmove, touchstart, trail, updateMode, updateTrail;

W = window.innerWidth;

H = window.innerHeight;

INVISIBLE = -200;

SIZE = 256; // 64..65536 # rutornas storlek i meter

TILE = 256; // rutornas storlek i pixels

nw = Math.floor(W / TILE);

nh = Math.floor(H / TILE);

updateMode = 0; // 0=manual 1=gps

moreMode = 1;

boxes = [];

currentPath = null;

trail = null; // M256,256 l100,100 l50,0

sendMail = function(subject, body) {
  mail.href = "mailto:janchrister.nilsson@gmail.com?subject=" + encodeURIComponent(subject) + "&body=" + encodeURIComponent(body);
  return mail.click();
};

setAttrs = function(obj, attrs) {
  var key, results;
  if (!obj) {
    return;
  }
  results = [];
  for (key in attrs) {
    results.push(obj.setAttributeNS(null, key, attrs[key]));
  }
  return results;
};

svgurl = "http://www.w3.org/2000/svg";

svg = document.getElementById('svgOne');

//position = [59.09443087294174, 17.7142975294884] # 6553600,655360
position = [
  59.265196,
  18.132748 // Home (lat long)
];

grid = [];

center = []; // skärmens mittpunkt (sweref). Påverkas av pan (x y) (6 7)

target = []; // målkoordinater (sweref)

mouse = [];

images = [];

rects = [];

texts = [];

buttons = {};

rec = 0;

distance = function(p, q) {
  var dx, dy;
  if (p.length !== 2 || q.length !== 2) {
    return 0;
  }
  dx = p[0] - q[0];
  dy = p[1] - q[1];
  return Math.sqrt(dx * dx + dy * dy);
};

bearing = function(p, q) {
  var dx, dy, res;
  if (p.length !== 2 || q.length !== 2) {
    return 0;
  }
  dx = p[0] - q[0];
  dy = p[1] - q[1];
  res = 360 + Math.round(degrees(Math.atan2(dx, dy)));
  return res % 360;
};

Path = class Path {
  constructor(path1) {
    this.path = path1;
    console.log('Path', this.path);
    this.points = decodeAll(this.path);
    console.log('points', this.points);
    this.hash = this.hashCode(this.path);
    console.log('hash', this.hash);
    this.distance = this.calcDist(); // in meters
    console.log('distance', this.distance);
    this.count = this.points.length;
    this.box = this.calcBox();
    console.log('box', this.box);
  }

  calcDist() {
    var dx, dy, i, k, len, ref, res, x0, x1, y0, y1;
    res = 0;
    ref = range(1, this.points.length);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      [x0, y0] = this.points[i - 1];
      [x1, y1] = this.points[i];
      dx = x0 - x1;
      dy = y0 - y1;
      res += Math.sqrt(dx * dx + dy * dy);
    }
    return Math.round(res);
  }

  calcBox() {
    var k, len, ref, x, xmax, xmin, y, ymax, ymin;
    [xmin, ymin] = this.points[0];
    [xmax, ymax] = this.points[0];
    ref = this.points;
    for (k = 0, len = ref.length; k < len; k++) {
      [x, y] = ref[k];
      if (x < xmin) {
        xmin = x;
      }
      if (x > xmax) {
        xmax = x;
      }
      if (y < ymin) {
        ymin = y;
      }
      if (y > ymax) {
        ymax = y;
      }
    }
    return [[xmin, ymin], [xmax, ymax]];
  }

  hashCode(path) {
    var hash, i, k, len, ref;
    hash = 0;
    ref = range(path.length);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      hash = ((hash << 5) - hash) + path.charCodeAt(i);
    }
    return hash;
  }

  save() {
    var box, found, k, len;
    found = false;
    for (k = 0, len = boxes.length; k < len; k++) {
      box = boxes[k];
      if (box[0] === this.hash) {
        found = true;
      }
    }
    if (!found) {
      boxes.push([this.hash, this.box]);
      localStorage['boxes'] = JSON.stringify(boxes);
      return localStorage[this.hash] = this.path;
    }
  }

  delete() {
    var box, i, k, len, ref, results;
    localStorage.removeItem(this.hash);
    ref = range(boxes.length);
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      box = boxes[i];
      if (box[0] === this.hash) {
        boxes.splice(i, 1);
        currentPath = null;
        results.push(localStorage['boxes'] = JSON.stringify(boxes));
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

};

Button = class Button {
  constructor(x3, y4, prompt, event, color = '#f000') {
    this.x = x3;
    this.y = y4;
    this.prompt = prompt;
    this.r = 128;
    if (this.prompt !== "") {
      this.text = add('text', svg, {
        x: this.x,
        y: this.y + 10,
        stroke: 'black',
        fill: 'black',
        'stroke-width': 1,
        'text-anchor': 'middle'
      });
      this.text.textContent = this.prompt;
      this.text.style.fontSize = '50px';
      this.text.style.userSelect = 'none';
    }
    this.circle = add('circle', svg, {
      cx: this.x,
      cy: this.y,
      r: this.r,
      fill: color,
      stroke: 'black',
      'stroke-width': 1,
      ontouchstart: event,
      onclick: event //, ontouchmove:'nada(evt)', ontouchend:'nada(evt)'}
    });
  }

  setColor(color) {
    return setAttrs(this.circle, {
      fill: color
    });
  }

  setTextFill(color) {
    return setAttrs(this.text, {
      fill: color
    });
  }

  enable() {
    setAttrs(this.circle, {
      cx: this.x
    });
    if (this.prompt !== '') {
      return setAttrs(this.text, {
        x: this.x
      });
    }
  }

  disable() {
    setAttrs(this.circle, {
      cx: INVISIBLE
    });
    if (this.prompt !== '') {
      return setAttrs(this.text, {
        x: INVISIBLE
      });
    }
  }

};

TargetButton = class TargetButton extends Button {
  constructor(x, y, event, color) {
    super(x, y, '', event, color);
    this.vline = add('line', svg, {
      x1: x - this.r,
      y1: y,
      x2: x + this.r,
      y2: y,
      stroke: 'black',
      'stroke-width': 1
    });
    this.hline = add('line', svg, {
      x1: x,
      y1: y - this.r,
      x2: x,
      y2: y + this.r,
      stroke: 'black',
      'stroke-width': 1
    });
  }

  move() {
    var antal, dx, dy, x, y;
    if (target.length === 0) {
      return;
    }
    dx = target[0] - center[0];
    dy = target[1] - center[1];
    antal = SIZE / TILE;
    x = W / 2 + dx / antal;
    y = H / 2 - dy / antal;
    return this.moveHard(x, y);
  }

  moveHard(x, y) {
    setAttrs(this.circle, {
      cx: x,
      cy: y
    });
    setAttrs(this.vline, {
      x1: x - this.r,
      y1: y,
      x2: x + this.r,
      y2: y
    });
    return setAttrs(this.hline, {
      x1: x,
      y1: y - this.r,
      x2: x,
      y2: y + this.r
    });
  }

};

add = function(type, parent, attrs) {
  var obj;
  obj = document.createElementNS(svgurl, type);
  parent.appendChild(obj);
  setAttrs(obj, attrs);
  return obj;
};

click = function(s) {
  event.preventDefault();
  if (s === 'in' && SIZE > 64) {
    SIZE = Math.floor(SIZE / 2);
  }
  if (s === 'out' && SIZE < 65536) {
    SIZE *= 2;
  }
  if (s === 'ctr') {
    centrera();
  }
  if (s === 'aim') {
    aimEvent();
  }
  event.stopPropagation();
  return drawMap();
};

mousedown = function(event) {
  return mouse = [event.x, event.y];
};

mouseup = function(event) {
  return mouse = [];
};

mousemove = function(event) {
  var dx, dy, factor;
  if (mouse.length === 0) {
    return;
  }
  factor = 2;
  if (SIZE === 64) {
    factor = 0.25;
  }
  if (SIZE === 128) {
    factor = 0.5;
  }
  if (SIZE === 256) {
    factor = 1;
  }
  dx = event.movementX;
  dy = event.movementY;
  mouse = [dx, dy];
  center[0] -= dx * factor;
  center[1] += dy * factor;
  updateMode = 0;
  return drawMap();
};

touchstart = function(event) {
  var touch, touches;
  event.preventDefault();
  touches = event.targetTouches;
  if (touches.length !== 1) {
    return;
  }
  touch = touches[0];
  return mouse = [touch.clientX, touch.clientY];
};

touchend = function(event) {
  event.preventDefault();
  mouse = [];
  return drawMap();
};

touchmove = function(event) {
  var dx, dy, factor, touch, touches;
  event.preventDefault();
  if (mouse.length === 0) {
    return;
  }
  touches = event.targetTouches;
  if (touches.length !== 1) {
    return;
  }
  touch = touches[0];
  factor = 2;
  if (SIZE === 64) {
    factor = 0.25;
  }
  if (SIZE === 128) {
    factor = 0.5;
  }
  if (SIZE === 256) {
    factor = 1;
  }
  dx = touch.clientX - mouse[0];
  dy = touch.clientY - mouse[1];
  mouse = [touch.clientX, touch.clientY];
  center[0] -= dx * factor;
  center[1] += dy * factor;
  updateMode = 0;
  return drawMap();
};

svg.addEventListener('touchstart', touchstart);

svg.addEventListener('touchmove', touchmove);

svg.addEventListener('touchend', touchend);

svg.addEventListener('mousedown', mousedown);

svg.addEventListener('mousemove', mousemove);

svg.addEventListener('mouseup', mouseup);

convert = function([x, y], size = SIZE) { // sweref punkt
  var dx, dy;
  dx = x % size; // beräkna vektor dx,dy (sweref)
  dy = y % size;
  x -= dx; // beräkna rutans SW hörn x,y (sweref)
  y -= dy;
  dx = map(dx, 0, size, 0, TILE); // map n,start1,stop1,start2,stop2
  dy = map(dy, 0, size, 0, TILE);
  return [x, y, dx, dy];
};

ass([655360, 6553600, 64, 72], convert([655360 + 16, 6553600 + 18], 64));

ass([655360, 6553600, 128, 128], convert([655360 + 64, 6553600 + 64], 128));

ass([655360 + 128, 6553600 + 128, 0, 0], convert([655360 + 128, 6553600 + 128], 128));

ass([655360, 6553600, 44, 44], convert([655360 + 22, 6553600 + 22], 128));

ass([655360, 6553600, 128, 128], convert([655360 + 128, 6553600 + 128], 256));

ass([655360, 6553600, 64, 64], convert([655360 + 64, 6553600 + 64], 256));

ass([655360, 6553600, 64, 74], convert([655360 + 128, 6553600 + 148], 512));

ass([655360, 6553600, 32, 32], convert([655360 + 64, 6553600 + 64], 512));

ass([655360, 6553600, 200, 250], convert([655360 + 400, 6553600 + 500], 512));

ass([655360, 6553600, 32, 37], convert([655360 + 128, 6553600 + 148], 1024));

ass([655360, 6553600, 16, 16], convert([655360 + 64, 6553600 + 64], 1024));

ass([655360, 6553600, 100, 125], convert([655360 + 400, 6553600 + 500], 1024));

updateTrail = function(baseX, baseY, dx, dy) {
  var k, len, ref, s, x, x0, x1, xx, y, y0, y1, yy;
  if (!currentPath) {
    setAttrs(trail, {
      points: ''
    });
    return;
  }
  x0 = baseX - SIZE;
  x1 = baseX + SIZE;
  y0 = baseY - SIZE;
  y1 = baseY + SIZE;
  s = [];
  ref = currentPath.points;
  for (k = 0, len = ref.length; k < len; k++) {
    [x, y] = ref[k];
    xx = map(x, x0, x1, W / 2 - TILE, W / 2 + TILE);
    yy = map(y, y0, y1, H / 2 - TILE, H / 2 + TILE);
    s.push(`${Math.round(xx - dx)},${Math.round(H + dy - yy)}`);
  }
  return setAttrs(trail, {
    points: s.join(' ')
  });
};

drawMap = function() {
  var baseX, baseY, dx, dy, href, i, j, k, l, len, len1, px, py, ref, ref1, x, y;
  [baseX, baseY, dx, dy] = convert(center);
  ref = range(-nh, nh + 1);
  for (k = 0, len = ref.length; k < len; k++) {
    j = ref[k];
    y = baseY + j * SIZE - SIZE;
    py = H / 2 - TILE * j + dy;
    ref1 = range(-nw, nw + 1);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      i = ref1[l];
      x = baseX + i * SIZE;
      px = W / 2 + TILE * i - dx;
      href = `maps\\${SIZE}\\${y}-${x}-${SIZE}.jpg`;
      if (href !== images[j + nh][i + nw].getAttributeNS(null, 'href')) { // only update if needed
        setAttrs(images[j + nh][i + nw], {
          href: href
        });
      }
      setAttrs(images[j + nh][i + nw], {
        x: px,
        y: py
      });
      setAttrs(rects[j + nh][i + nw], {
        x: px,
        y: py
      });
    }
  }
  updateTrail(Math.round(baseX), Math.round(baseY), Math.round(dx), Math.round(dy));
  if (texts.length === 8) {
    texts[0].textContent = target.length === 2 ? `${bearing(target, center)} º` : "";
    texts[1].textContent = target.length === 2 ? `${Math.round(distance(target, center))} m` : "";
    if (currentPath) {
      texts[2].textContent = `${currentPath.points.length}`;
    }
    texts[3].textContent = `${SIZE} ${updateMode}`;
    texts[4].textContent = `${position[0]}`;
    texts[5].textContent = `${position[1]}`;
    texts[6].textContent = `${Math.round(center[0])}`;
    texts[7].textContent = `${Math.round(center[1])}`;
    if (buttons.target) {
      return buttons.target.move();
    }
  }
};

centrera = function() {
  var g;
  updateMode = 1;
  grid = geodetic_to_grid(position[0], position[1]);
  center = (function() {
    var k, len, results;
    results = [];
    for (k = 0, len = grid.length; k < len; k++) {
      g = grid[k];
      results.push(g);
    }
    return results;
  })();
  center.reverse();
  return drawMap();
};

aimEvent = function() {
  if (target.length === 0) {
    target = center.slice();
    return buttons.target.moveHard(W / 2, H / 2);
  } else {
    target = [];
    return buttons.target.moveHard(INVISIBLE, INVISIBLE);
  }
};

//####
loadPath = function() { // url -> localStorage
  var parameters;
  boxes = localStorage.boxes ? JSON.parse(localStorage.boxes) : [];
  parameters = getParameters();
  if (!parameters.path) {
    return;
  }
  currentPath = new Path(parameters.path);
  return currentPath.save();
};

clearPath = function() {
  currentPath = null;
  drawMap();
  return more();
};

fetchPath = function() { // visa alla synliga paths. Närmaste gulmarkeras, övriga gråmarkeras
  var bestDist, besti, d, i, k, key, l, len, len1, p, ref, x0, x1, y0, y1;
  bestDist = 9999999;
  besti = -1;
  for (i = k = 0, len = boxes.length; k < len; i = ++k) {
    [key, [[x0, y0], [x1, y1]]] = boxes[i];
    ref = [[x0, y0], [x0, y1], [x1, y0], [x1, y1]];
    for (l = 0, len1 = ref.length; l < len1; l++) {
      p = ref[l];
      d = distance(p, center);
      if (d < bestDist) {
        bestDist = d;
        besti = i;
      }
    }
  }
  if (besti !== -1) {
    currentPath = new Path(localStorage[boxes[besti][0]]);
    center = currentPath.points[0].slice();
  }
  more();
  return drawMap();
};

mark = function() { // Spara center i localStorage
  var temp;
  temp = new Path(`${Math.round(center[0])},${Math.round(center[1])}`);
  temp.save();
  return more();
};

deletePath = function() { // tag bort current Path från localStorage
  currentPath.delete();
  return more();
};

recPath = function() { // start/stopp av inspelning av path
  rec = 1 - rec;
  if (rec === 1) {
    currentPath = new Path("");
  }
  if (rec === 0) {
    currentPath.save();
  }
  buttons.rec.setTextFill(['#000f', '#f00f'][rec]);
  texts[2].textContent = `${currentPath.points.length}`;
  return more();
};

sharePath = function() {
  var header;
  if (currentPath.points.length === 0) {
    return;
  }
  header = `${currentPath.points.length} points. ${currentPath.distance} meter.`;
  sendMail(header, `${window.location.origin + window.location.pathname}?path=${currentPath.path}`);
  return more();
};

//####
makeText = function(x, y) {
  var text;
  text = add('text', svg, {
    x: x,
    y: y,
    stroke: 'black',
    'stroke-width': 1,
    'text-anchor': 'middle'
  });
  text.style.fontSize = '50px';
  text.style.userSelect = 'none';
  return texts.push(text);
};

nada = function(event) {
  event.preventDefault();
  return event.stopPropagation();
};

locationUpdateFail = function(error) {
  var messages;
  if (error.code === error.PERMISSION_DENIED) {
    return messages = ['', '', '', '', '', 'Check location permissions'];
  }
};

locationUpdate = function(p) {
  var g, temp;
  position = [myRound(p.coords.latitude, 6), myRound(p.coords.longitude, 6)];
  grid = geodetic_to_grid(position[0], position[1]);
  temp = (function() {
    var k, len, results;
    results = [];
    for (k = 0, len = grid.length; k < len; k++) {
      g = grid[k];
      results.push(Math.round(g));
    }
    return results;
  })();
  temp.reverse();
  if (rec === 1) {
    currentPath.points.push(temp.slice());
  }
  if (updateMode === 1) {
    center = temp;
  }
  return drawMap();
};

initGPS = function() {
  return navigator.geolocation.watchPosition(locationUpdate, locationUpdateFail, {
    enableHighAccuracy: true,
    maximumAge: 30000,
    timeout: 27000
  });
};

initTrail = function() {
  var marker;
  if (false) {
    return trail = add('path', svg, {
      d: "",
      stroke: 'red',
      'stroke-width': 1,
      fill: 'none'
    });
  } else {
    marker = add('marker', svg, {
      id: 'dot',
      viewBox: "0 0 10 10",
      refX: "5",
      refY: "5",
      markerWidth: "5",
      markerHeight: "5"
    });
    add('circle', marker, {
      cx: "5",
      cy: "5",
      r: "5",
      fill: "yellow"
    });
    return trail = add('polyline', svg, {
      points: "",
      fill: "none",
      stroke: "red",
      'stroke-width': 1,
      'marker-start': "url(#dot)",
      'marker-mid': "url(#dot)",
      'marker-end': "url(#dot)"
    });
  }
};

more = function() {
  var k, len, name, ref, results;
  moreMode = 1 - moreMode;
  ref = "fetch rec mark play clear delete share".split(' ');
  results = [];
  for (k = 0, len = ref.length; k < len; k++) {
    name = ref[k];
    if (moreMode === 0) {
      buttons[name].disable();
    }
    if (moreMode === 1) {
      results.push(buttons[name].enable());
    } else {
      results.push(void 0);
    }
  }
  return results;
};

startup = function() {
  var _, g, irow, k, l, len, len1, ref, ref1, rrow, x0, x1, x2, y0, y1, y2, y3;
  loadPath();
  initGPS();
  add('rect', svg, {
    width: W,
    height: H,
    fill: 'green'
  });
  grid = geodetic_to_grid(position[0], position[1]);
  center = (function() {
    var k, len, results;
    results = [];
    for (k = 0, len = grid.length; k < len; k++) {
      g = grid[k];
      results.push(g);
    }
    return results;
  })();
  center.reverse();
  images = [];
  rects = [];
  texts = [];
  ref = range(2 * nh + 1);
  for (k = 0, len = ref.length; k < len; k++) {
    _ = ref[k];
    irow = [];
    rrow = [];
    ref1 = range(2 * nw + 1);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      _ = ref1[l];
      irow.push(add('image', svg, {}));
      rrow.push(add('rect', svg, {
        width: TILE,
        height: TILE,
        stroke: 'black',
        'stroke-width': 1,
        fill: 'none'
      }));
    }
    images.push(irow);
    rects.push(rrow);
  }
  x0 = 0.36 * W;
  x1 = 0.64 * W;
  y0 = 120 + 10;
  y1 = H - 180 + 10;
  y2 = H - 120 + 10;
  y3 = H - 60 + 10;
  makeText(x0, y0);
  makeText(x1, y0);
  makeText(x0, y1);
  makeText(x1, y1);
  makeText(x0, y2);
  makeText(x1, y2);
  makeText(x0, y3);
  makeText(x1, y3);
  x0 = 128;
  x1 = W / 2;
  x2 = W - 128;
  y0 = 128;
  y1 = 256 + 128;
  y2 = 512 + 128;
  y3 = H - 128;
  buttons.target = new TargetButton(INVISIBLE, INVISIBLE, '', '#f008');
  buttons.aim = new TargetButton(W / 2, H / 2, "click('aim')");
  new Button(x0, y0, 'in', "click('in')");
  new Button(x2, y0, 'out', "click('out')");
  new Button(x0, y3, 'ctr', "click('ctr')");
  buttons.more = new Button(x2, y3, 'more', "more()");
  buttons.rec = new Button(x0, y1, 'rec', "recPath()");
  buttons.mark = new Button(x2, y1, 'mark', "mark()");
  buttons.fetch = new Button(x1, y0, 'fetch', "fetchPath()");
  buttons.play = new Button(x0, y2, 'play', "playPath()");
  buttons.share = new Button(x1, y3, 'share', "sharePath()");
  buttons.clear = new Button(x2 - 256, y2, 'clear', "clearPath()");
  buttons.delete = new Button(x2, y2, 'delete', "deletePath()");
  // console.log grid_to_geodetic 6553600+128,655360+128
  // console.log grid_to_geodetic 6553600+78*256,655360+88*256
  // console.log grid_to_geodetic 6553600+(78+16)*256,655360+(88+16)*256
  //console.log geodetic_to_grid 59.263331493465394, 18.122142177751353
  initTrail();
  more();
  return drawMap();
};

startup();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXHNrZXRjaC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUEsTUFBQSxFQUFBLENBQUEsRUFBQSxTQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsWUFBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsUUFBQSxFQUFBLE9BQUEsRUFBQSxLQUFBLEVBQUEsT0FBQSxFQUFBLE1BQUEsRUFBQSxRQUFBLEVBQUEsU0FBQSxFQUFBLEtBQUEsRUFBQSxPQUFBLEVBQUEsV0FBQSxFQUFBLFVBQUEsRUFBQSxRQUFBLEVBQUEsT0FBQSxFQUFBLFNBQUEsRUFBQSxJQUFBLEVBQUEsTUFBQSxFQUFBLE9BQUEsRUFBQSxTQUFBLEVBQUEsUUFBQSxFQUFBLGNBQUEsRUFBQSxrQkFBQSxFQUFBLFFBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLFFBQUEsRUFBQSxLQUFBLEVBQUEsU0FBQSxFQUFBLFNBQUEsRUFBQSxPQUFBLEVBQUEsSUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsUUFBQSxFQUFBLEdBQUEsRUFBQSxPQUFBLEVBQUEsS0FBQSxFQUFBLFFBQUEsRUFBQSxRQUFBLEVBQUEsU0FBQSxFQUFBLE9BQUEsRUFBQSxHQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxLQUFBLEVBQUEsUUFBQSxFQUFBLFNBQUEsRUFBQSxVQUFBLEVBQUEsS0FBQSxFQUFBLFVBQUEsRUFBQTs7QUFBQSxDQUFBLEdBQUksTUFBTSxDQUFDOztBQUNYLENBQUEsR0FBSSxNQUFNLENBQUM7O0FBRVgsU0FBQSxHQUFZLENBQUM7O0FBQ2IsSUFBQSxHQUFPLElBSlA7O0FBS0EsSUFBQSxHQUFPLElBTFA7O0FBT0EsRUFBQSxjQUFLLElBQUc7O0FBQ1IsRUFBQSxjQUFLLElBQUc7O0FBRVIsVUFBQSxHQUFhLEVBVmI7O0FBV0EsUUFBQSxHQUFXOztBQUVY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LEVBQW1CLE1BQW5CLEVBQTJCLFFBQTNCO0VBQ2YsT0FBTyxDQUFDLEdBQVIsR0FBYyxJQUFJLE1BQUosQ0FBVyxFQUFYLEVBQWUsRUFBZixFQUFtQixLQUFuQixFQUEwQixXQUExQjtFQUNkLE9BQU8sQ0FBQyxJQUFSLEdBQWUsSUFBSSxNQUFKLENBQVcsRUFBWCxFQUFlLEVBQWYsRUFBbUIsTUFBbkIsRUFBMkIsUUFBM0I7RUFDZixPQUFPLENBQUMsS0FBUixHQUFnQixJQUFJLE1BQUosQ0FBVyxFQUFYLEVBQWUsRUFBZixFQUFtQixPQUFuQixFQUE0QixhQUE1QjtFQUNoQixPQUFPLENBQUMsSUFBUixHQUFlLElBQUksTUFBSixDQUFXLEVBQVgsRUFBZSxFQUFmLEVBQW1CLE1BQW5CLEVBQTJCLFlBQTNCO0VBQ2YsT0FBTyxDQUFDLEtBQVIsR0FBZ0IsSUFBSSxNQUFKLENBQVcsRUFBWCxFQUFlLEVBQWYsRUFBbUIsT0FBbkIsRUFBNEIsYUFBNUI7RUFDaEIsT0FBTyxDQUFDLEtBQVIsR0FBZ0IsSUFBSSxNQUFKLENBQVcsRUFBQSxHQUFHLEdBQWQsRUFBbUIsRUFBbkIsRUFBdUIsT0FBdkIsRUFBZ0MsYUFBaEM7RUFDaEIsT0FBTyxDQUFDLE1BQVIsR0FBaUIsSUFBSSxNQUFKLENBQVcsRUFBWCxFQUFlLEVBQWYsRUFBbUIsUUFBbkIsRUFBNkIsY0FBN0IsRUF4RGpCOzs7OztFQStEQSxTQUFBLENBQUE7RUFFQSxJQUFBLENBQUE7U0FFQSxPQUFBLENBQUE7QUFwRVM7O0FBc0VWLE9BQUEsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIlcgPSB3aW5kb3cuaW5uZXJXaWR0aFxyXG5IID0gd2luZG93LmlubmVySGVpZ2h0XHJcblxyXG5JTlZJU0lCTEUgPSAtMjAwXHJcblNJWkUgPSAyNTYgIyA2NC4uNjU1MzYgIyBydXRvcm5hcyBzdG9ybGVrIGkgbWV0ZXJcclxuVElMRSA9IDI1NiAjIHJ1dG9ybmFzIHN0b3JsZWsgaSBwaXhlbHNcclxuXHJcbm53ID0gVy8vVElMRVxyXG5uaCA9IEgvL1RJTEVcclxuXHJcbnVwZGF0ZU1vZGUgPSAwICMgMD1tYW51YWwgMT1ncHNcclxubW9yZU1vZGUgPSAxXHJcblxyXG5ib3hlcyA9IFtdXHJcbmN1cnJlbnRQYXRoID0gbnVsbFxyXG50cmFpbCA9IG51bGwgIyBNMjU2LDI1NiBsMTAwLDEwMCBsNTAsMFxyXG5cclxuc2VuZE1haWwgPSAoc3ViamVjdCxib2R5KSAtPlxyXG5cdG1haWwuaHJlZiA9IFwibWFpbHRvOmphbmNocmlzdGVyLm5pbHNzb25AZ21haWwuY29tP3N1YmplY3Q9XCIgKyBlbmNvZGVVUklDb21wb25lbnQoc3ViamVjdCkgKyBcIiZib2R5PVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KGJvZHkpXHJcblx0bWFpbC5jbGljaygpXHJcblxyXG5zZXRBdHRycyA9IChvYmosYXR0cnMpIC0+XHJcblx0aWYgbm90IG9iaiB0aGVuIHJldHVybiBcclxuXHRmb3Iga2V5IG9mIGF0dHJzXHJcblx0XHRvYmouc2V0QXR0cmlidXRlTlMgbnVsbCwga2V5LCBhdHRyc1trZXldXHJcblxyXG5zdmd1cmwgPSBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcclxuc3ZnID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQgJ3N2Z09uZSdcclxuXHJcbiNwb3NpdGlvbiA9IFs1OS4wOTQ0MzA4NzI5NDE3NCwgMTcuNzE0Mjk3NTI5NDg4NF0gIyA2NTUzNjAwLDY1NTM2MFxyXG5wb3NpdGlvbiA9IFs1OS4yNjUxOTYsIDE4LjEzMjc0OF0gIyBIb21lIChsYXQgbG9uZylcclxuZ3JpZCA9IFtdXHJcblxyXG5jZW50ZXIgPSBbXSAjIHNrw6RybWVucyBtaXR0cHVua3QgKHN3ZXJlZikuIFDDpXZlcmthcyBhdiBwYW4gKHggeSkgKDYgNylcclxudGFyZ2V0ID0gW10gIyBtw6Vsa29vcmRpbmF0ZXIgKHN3ZXJlZilcclxuXHJcbm1vdXNlID0gW11cclxuaW1hZ2VzID0gW11cclxucmVjdHMgPSBbXVxyXG50ZXh0cyA9IFtdXHJcbmJ1dHRvbnMgPSB7fVxyXG5cclxucmVjID0gMFxyXG5cclxuZGlzdGFuY2UgPSAocCxxKSAtPlxyXG5cdGlmIHAubGVuZ3RoICE9IDIgb3IgcS5sZW5ndGggIT0gMiB0aGVuIHJldHVybiAwXHJcblx0ZHggPSBwWzBdIC0gcVswXVxyXG5cdGR5ID0gcFsxXSAtIHFbMV1cclxuXHRNYXRoLnNxcnQgZHggKiBkeCArIGR5ICogZHlcclxuXHJcbmJlYXJpbmcgPSAocCxxKSAtPlxyXG5cdGlmIHAubGVuZ3RoIT0yIG9yIHEubGVuZ3RoIT0yIHRoZW4gcmV0dXJuIDBcclxuXHRkeCA9IHBbMF0gLSBxWzBdXHJcblx0ZHkgPSBwWzFdIC0gcVsxXVxyXG5cdHJlcyA9IDM2MCArIE1hdGgucm91bmQgZGVncmVlcyBNYXRoLmF0YW4yIGR4LGR5XHJcblx0cmVzICUgMzYwXHJcblxyXG5jbGFzcyBQYXRoXHJcblx0Y29uc3RydWN0b3IgOiAoQHBhdGgpIC0+XHJcblx0XHRjb25zb2xlLmxvZyAnUGF0aCcsQHBhdGhcclxuXHRcdEBwb2ludHMgPSBkZWNvZGVBbGwgQHBhdGhcclxuXHRcdGNvbnNvbGUubG9nICdwb2ludHMnLEBwb2ludHNcclxuXHRcdEBoYXNoID0gQGhhc2hDb2RlIEBwYXRoXHJcblx0XHRjb25zb2xlLmxvZyAnaGFzaCcsQGhhc2hcclxuXHRcdEBkaXN0YW5jZSA9IEBjYWxjRGlzdCgpICMgaW4gbWV0ZXJzXHJcblx0XHRjb25zb2xlLmxvZyAnZGlzdGFuY2UnLEBkaXN0YW5jZVxyXG5cdFx0QGNvdW50ID0gQHBvaW50cy5sZW5ndGhcclxuXHRcdEBib3ggPSBAY2FsY0JveCgpXHJcblx0XHRjb25zb2xlLmxvZyAnYm94JyxAYm94XHJcblxyXG5cdGNhbGNEaXN0IDogLT5cclxuXHRcdHJlcyA9IDBcclxuXHRcdGZvciBpIGluIHJhbmdlIDEsQHBvaW50cy5sZW5ndGhcclxuXHRcdFx0W3gwLHkwXSA9IEBwb2ludHNbaS0xXVxyXG5cdFx0XHRbeDEseTFdID0gQHBvaW50c1tpXVxyXG5cdFx0XHRkeCA9IHgwLXgxXHJcblx0XHRcdGR5ID0geTAteTFcclxuXHRcdFx0cmVzICs9IE1hdGguc3FydCBkeCpkeCtkeSpkeVxyXG5cdFx0TWF0aC5yb3VuZCByZXNcclxuXHJcblx0Y2FsY0JveCA6IC0+XHJcblx0XHRbeG1pbix5bWluXSA9IEBwb2ludHNbMF1cclxuXHRcdFt4bWF4LHltYXhdID0gQHBvaW50c1swXVxyXG5cdFx0Zm9yIFt4LHldIGluIEBwb2ludHNcclxuXHRcdFx0aWYgeCA8IHhtaW4gdGhlbiB4bWluID0geFxyXG5cdFx0XHRpZiB4ID4geG1heCB0aGVuIHhtYXggPSB4XHJcblx0XHRcdGlmIHkgPCB5bWluIHRoZW4geW1pbiA9IHlcclxuXHRcdFx0aWYgeSA+IHltYXggdGhlbiB5bWF4ID0geVxyXG5cdFx0W1t4bWluLHltaW5dLFt4bWF4LHltYXhdXVxyXG5cclxuXHRoYXNoQ29kZSA6IChwYXRoKSAtPlxyXG5cdFx0aGFzaCA9IDBcclxuXHRcdGZvciBpIGluIHJhbmdlIHBhdGgubGVuZ3RoXHJcblx0XHRcdGhhc2ggID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgKyBwYXRoLmNoYXJDb2RlQXQgaVxyXG5cdFx0aGFzaFxyXG5cclxuXHRzYXZlIDogLT5cclxuXHRcdGZvdW5kID0gZmFsc2UgXHJcblx0XHRmb3IgYm94IGluIGJveGVzXHJcblx0XHRcdGlmIGJveFswXSA9PSBAaGFzaCB0aGVuIGZvdW5kID0gdHJ1ZVxyXG5cdFx0aWYgbm90IGZvdW5kXHJcblx0XHRcdGJveGVzLnB1c2ggW0BoYXNoLEBib3hdXHJcblx0XHRcdGxvY2FsU3RvcmFnZVsnYm94ZXMnXSA9IEpTT04uc3RyaW5naWZ5IGJveGVzXHJcblx0XHRcdGxvY2FsU3RvcmFnZVtAaGFzaF0gPSBAcGF0aFxyXG5cdFxyXG5cdGRlbGV0ZSA6IC0+XHJcblx0XHRsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSBAaGFzaFxyXG5cdFx0Zm9yIGkgaW4gcmFuZ2UgYm94ZXMubGVuZ3RoXHJcblx0XHRcdGJveCA9IGJveGVzW2ldXHJcblx0XHRcdGlmIGJveFswXSA9PSBAaGFzaFxyXG5cdFx0XHRcdGJveGVzLnNwbGljZSBpLDFcclxuXHRcdFx0XHRjdXJyZW50UGF0aCA9IG51bGxcclxuXHRcdFx0XHRsb2NhbFN0b3JhZ2VbJ2JveGVzJ10gPSBKU09OLnN0cmluZ2lmeSBib3hlc1xyXG5cclxuY2xhc3MgQnV0dG9uIFxyXG5cdGNvbnN0cnVjdG9yIDogKEB4LEB5LEBwcm9tcHQsZXZlbnQsY29sb3I9JyNmMDAwJykgLT5cclxuXHRcdEByID0gMTI4XHJcblx0XHRpZiBAcHJvbXB0ICE9IFwiXCJcclxuXHRcdFx0QHRleHQgPSBhZGQgJ3RleHQnLHN2Zywge3g6QHgsIHk6QHkrMTAsIHN0cm9rZTonYmxhY2snLCBmaWxsOidibGFjaycsICdzdHJva2Utd2lkdGgnOjEsICd0ZXh0LWFuY2hvcic6J21pZGRsZSd9XHJcblx0XHRcdEB0ZXh0LnRleHRDb250ZW50ID0gQHByb21wdFxyXG5cdFx0XHRAdGV4dC5zdHlsZS5mb250U2l6ZSA9ICc1MHB4J1xyXG5cdFx0XHRAdGV4dC5zdHlsZS51c2VyU2VsZWN0ID0gJ25vbmUnXHJcblx0XHRAY2lyY2xlID0gYWRkICdjaXJjbGUnLHN2Zywge2N4OkB4LCBjeTpAeSwgcjpAciwgZmlsbDpjb2xvciwgc3Ryb2tlOidibGFjaycsICdzdHJva2Utd2lkdGgnOjEsIG9udG91Y2hzdGFydDpldmVudCwgb25jbGljazpldmVudH0gIywgb250b3VjaG1vdmU6J25hZGEoZXZ0KScsIG9udG91Y2hlbmQ6J25hZGEoZXZ0KSd9XHJcblx0c2V0Q29sb3IgOiAoY29sb3IpIC0+IHNldEF0dHJzIEBjaXJjbGUsIHtmaWxsOmNvbG9yfVxyXG5cdHNldFRleHRGaWxsIDogKGNvbG9yKSAtPiBzZXRBdHRycyBAdGV4dCwge2ZpbGw6Y29sb3J9XHJcblx0ZW5hYmxlIDogLT4gXHJcblx0XHRzZXRBdHRycyBAY2lyY2xlLCB7Y3g6QHh9XHJcblx0XHRpZiBAcHJvbXB0IT0nJyB0aGVuIHNldEF0dHJzIEB0ZXh0LCB7eDpAeH1cclxuXHRkaXNhYmxlIDogLT4gXHJcblx0XHRzZXRBdHRycyBAY2lyY2xlLCB7Y3g6SU5WSVNJQkxFfVxyXG5cdFx0aWYgQHByb21wdCE9JycgdGhlbiBzZXRBdHRycyBAdGV4dCwge3g6SU5WSVNJQkxFfVxyXG5cclxuY2xhc3MgVGFyZ2V0QnV0dG9uIGV4dGVuZHMgQnV0dG9uXHJcblx0Y29uc3RydWN0b3IgOiAoeCx5LGV2ZW50LGNvbG9yKSAtPlxyXG5cdFx0c3VwZXIgeCx5LCcnLGV2ZW50LGNvbG9yXHJcblx0XHRAdmxpbmUgPSBhZGQgJ2xpbmUnLHN2Zywge3gxOngtQHIsIHkxOnksIHgyOngrQHIsIHkyOnksIHN0cm9rZTonYmxhY2snLCAnc3Ryb2tlLXdpZHRoJzoxfVxyXG5cdFx0QGhsaW5lID0gYWRkICdsaW5lJyxzdmcsIHt4MTp4LCB5MTp5LUByLCB4Mjp4LCB5Mjp5K0ByLCBzdHJva2U6J2JsYWNrJywgJ3N0cm9rZS13aWR0aCc6MX1cclxuXHJcblx0bW92ZSA6IC0+XHJcblx0XHRpZiB0YXJnZXQubGVuZ3RoID09IDAgdGhlbiByZXR1cm5cclxuXHRcdGR4ID0gdGFyZ2V0WzBdIC0gY2VudGVyWzBdXHJcblx0XHRkeSA9IHRhcmdldFsxXSAtIGNlbnRlclsxXVxyXG5cdFx0YW50YWwgPSBTSVpFL1RJTEVcclxuXHRcdHggPSBXLzIgKyBkeCAvIGFudGFsXHJcblx0XHR5ID0gSC8yIC0gZHkgLyBhbnRhbFxyXG5cdFx0QG1vdmVIYXJkIHgseVxyXG5cclxuXHRtb3ZlSGFyZCA6ICh4LHkpIC0+XHJcblx0XHRzZXRBdHRycyBAY2lyY2xlLCB7Y3g6eCwgY3k6eX1cclxuXHRcdHNldEF0dHJzIEB2bGluZSwge3gxOngtQHIsIHkxOnksIHgyOngrQHIsIHkyOnl9XHJcblx0XHRzZXRBdHRycyBAaGxpbmUsIHt4MTp4LCB5MTp5LUByLCB4Mjp4LCB5Mjp5K0ByfVxyXG5cclxuYWRkID0gKHR5cGUscGFyZW50LGF0dHJzKSAtPlxyXG5cdG9iaiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyBzdmd1cmwsIHR5cGVcclxuXHRwYXJlbnQuYXBwZW5kQ2hpbGQgb2JqXHJcblx0c2V0QXR0cnMgb2JqLGF0dHJzXHJcblx0b2JqXHJcblxyXG5jbGljayA9IChzKSAtPiBcclxuXHRldmVudC5wcmV2ZW50RGVmYXVsdCgpXHJcblx0aWYgcz09J2luJyAgYW5kIFNJWkUgPiA2NCB0aGVuIFNJWkUgLy89IDJcclxuXHRpZiBzPT0nb3V0JyBhbmQgU0laRSA8IDY1NTM2IHRoZW4gU0laRSAqPSAyXHJcblx0aWYgcz09J2N0cicgdGhlbiBjZW50cmVyYSgpXHJcblx0aWYgcz09J2FpbScgdGhlbiBhaW1FdmVudCgpXHJcblx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcclxuXHRkcmF3TWFwKClcclxuXHJcbm1vdXNlZG93biA9IChldmVudCkgLT4gbW91c2UgPSBbZXZlbnQueCxldmVudC55XVxyXG5tb3VzZXVwICAgPSAoZXZlbnQpIC0+IG1vdXNlID0gW11cclxubW91c2Vtb3ZlID0gKGV2ZW50KSAtPlxyXG5cdGlmIG1vdXNlLmxlbmd0aCA9PSAwIHRoZW4gcmV0dXJuXHJcblx0ZmFjdG9yID0gMlxyXG5cdGlmIFNJWkUgPT0gNjQgdGhlbiBmYWN0b3IgPSAwLjI1XHJcblx0aWYgU0laRSA9PSAxMjggdGhlbiBmYWN0b3IgPSAwLjVcclxuXHRpZiBTSVpFID09IDI1NiB0aGVuIGZhY3RvciA9IDFcclxuXHRkeCA9IGV2ZW50Lm1vdmVtZW50WFxyXG5cdGR5ID0gZXZlbnQubW92ZW1lbnRZXHJcblx0bW91c2UgPSBbZHgsZHldXHJcblx0Y2VudGVyWzBdIC09IGR4ICogZmFjdG9yXHJcblx0Y2VudGVyWzFdICs9IGR5ICogZmFjdG9yXHJcblx0dXBkYXRlTW9kZSA9IDBcclxuXHRkcmF3TWFwKClcclxuXHJcbnRvdWNoc3RhcnQgPSAoZXZlbnQpIC0+XHJcblx0ZXZlbnQucHJldmVudERlZmF1bHQoKVxyXG5cdHRvdWNoZXMgPSBldmVudC50YXJnZXRUb3VjaGVzIFxyXG5cdGlmIHRvdWNoZXMubGVuZ3RoICE9IDEgdGhlbiByZXR1cm5cclxuXHR0b3VjaCA9IHRvdWNoZXNbMF1cclxuXHRtb3VzZSA9IFt0b3VjaC5jbGllbnRYLHRvdWNoLmNsaWVudFldXHJcblxyXG50b3VjaGVuZCA9IChldmVudCkgLT5cclxuXHRldmVudC5wcmV2ZW50RGVmYXVsdCgpXHJcblx0bW91c2UgPSBbXVxyXG5cdGRyYXdNYXAoKVxyXG5cclxudG91Y2htb3ZlID0gKGV2ZW50KSAtPlxyXG5cdGV2ZW50LnByZXZlbnREZWZhdWx0KClcclxuXHRpZiBtb3VzZS5sZW5ndGggPT0gMCB0aGVuIHJldHVyblxyXG5cdHRvdWNoZXMgPSBldmVudC50YXJnZXRUb3VjaGVzIFxyXG5cdGlmIHRvdWNoZXMubGVuZ3RoICE9IDEgdGhlbiByZXR1cm5cclxuXHR0b3VjaCA9IHRvdWNoZXNbMF1cclxuXHRmYWN0b3IgPSAyXHJcblx0aWYgU0laRSA9PSA2NCB0aGVuIGZhY3RvciA9IDAuMjVcclxuXHRpZiBTSVpFID09IDEyOCB0aGVuIGZhY3RvciA9IDAuNVxyXG5cdGlmIFNJWkUgPT0gMjU2IHRoZW4gZmFjdG9yID0gMVxyXG5cdGR4ID0gdG91Y2guY2xpZW50WCAtIG1vdXNlWzBdXHJcblx0ZHkgPSB0b3VjaC5jbGllbnRZIC0gbW91c2VbMV1cclxuXHRtb3VzZSA9IFt0b3VjaC5jbGllbnRYLHRvdWNoLmNsaWVudFldXHJcblx0Y2VudGVyWzBdIC09IGR4ICogZmFjdG9yXHJcblx0Y2VudGVyWzFdICs9IGR5ICogZmFjdG9yXHJcblx0dXBkYXRlTW9kZSA9IDBcclxuXHRkcmF3TWFwKClcclxuXHJcbnN2Zy5hZGRFdmVudExpc3RlbmVyICd0b3VjaHN0YXJ0JywgdG91Y2hzdGFydFxyXG5zdmcuYWRkRXZlbnRMaXN0ZW5lciAndG91Y2htb3ZlJywgIHRvdWNobW92ZVxyXG5zdmcuYWRkRXZlbnRMaXN0ZW5lciAndG91Y2hlbmQnLCAgIHRvdWNoZW5kXHJcblxyXG5zdmcuYWRkRXZlbnRMaXN0ZW5lciAnbW91c2Vkb3duJywgbW91c2Vkb3duXHJcbnN2Zy5hZGRFdmVudExpc3RlbmVyICdtb3VzZW1vdmUnLCBtb3VzZW1vdmVcclxuc3ZnLmFkZEV2ZW50TGlzdGVuZXIgJ21vdXNldXAnLCAgIG1vdXNldXBcclxuXHJcbmNvbnZlcnQgPSAoW3gseV0sc2l6ZT1TSVpFKSAtPiAjIHN3ZXJlZiBwdW5rdFxyXG5cdGR4ID0geCAlIHNpemUgIyBiZXLDpGtuYSB2ZWt0b3IgZHgsZHkgKHN3ZXJlZilcclxuXHRkeSA9IHkgJSBzaXplXHJcblx0eCAtPSBkeCAgICAgICAjIGJlcsOka25hIHJ1dGFucyBTVyBow7ZybiB4LHkgKHN3ZXJlZilcclxuXHR5IC09IGR5XHJcblx0ZHggPSBtYXAgZHgsIDAsc2l6ZSwgMCxUSUxFICMgbWFwIG4sc3RhcnQxLHN0b3AxLHN0YXJ0MixzdG9wMlxyXG5cdGR5ID0gbWFwIGR5LCAwLHNpemUsIDAsVElMRVxyXG5cdFt4LHksIGR4LGR5XVxyXG5hc3MgWzY1NTM2MCw2NTUzNjAwLDY0LDcyXSwgY29udmVydCBbNjU1MzYwKzE2LDY1NTM2MDArMThdLDY0XHJcbmFzcyBbNjU1MzYwLDY1NTM2MDAsMTI4LDEyOF0sIGNvbnZlcnQgWzY1NTM2MCs2NCw2NTUzNjAwKzY0XSwxMjhcclxuYXNzIFs2NTUzNjArMTI4LDY1NTM2MDArMTI4LDAsMF0sIGNvbnZlcnQgWzY1NTM2MCsxMjgsNjU1MzYwMCsxMjhdLDEyOFxyXG5hc3MgWzY1NTM2MCw2NTUzNjAwLDQ0LDQ0XSwgY29udmVydCBbNjU1MzYwKzIyLDY1NTM2MDArMjJdLDEyOFxyXG5hc3MgWzY1NTM2MCw2NTUzNjAwLDEyOCwxMjhdLCBjb252ZXJ0IFs2NTUzNjArMTI4LDY1NTM2MDArMTI4XSwyNTZcclxuYXNzIFs2NTUzNjAsNjU1MzYwMCw2NCw2NF0sIGNvbnZlcnQgWzY1NTM2MCs2NCw2NTUzNjAwKzY0XSwyNTZcclxuYXNzIFs2NTUzNjAsNjU1MzYwMCw2NCw3NF0sIGNvbnZlcnQgWzY1NTM2MCsxMjgsNjU1MzYwMCsxNDhdLDUxMlxyXG5hc3MgWzY1NTM2MCw2NTUzNjAwLDMyLDMyXSwgY29udmVydCBbNjU1MzYwKzY0LDY1NTM2MDArNjRdLDUxMlxyXG5hc3MgWzY1NTM2MCw2NTUzNjAwLDIwMCwyNTBdLCBjb252ZXJ0IFs2NTUzNjArNDAwLDY1NTM2MDArNTAwXSw1MTJcclxuYXNzIFs2NTUzNjAsNjU1MzYwMCwzMiwzN10sIGNvbnZlcnQgWzY1NTM2MCsxMjgsNjU1MzYwMCsxNDhdLDEwMjRcclxuYXNzIFs2NTUzNjAsNjU1MzYwMCwxNiwxNl0sIGNvbnZlcnQgWzY1NTM2MCs2NCw2NTUzNjAwKzY0XSwxMDI0XHJcbmFzcyBbNjU1MzYwLDY1NTM2MDAsMTAwLDEyNV0sIGNvbnZlcnQgWzY1NTM2MCs0MDAsNjU1MzYwMCs1MDBdLDEwMjRcclxuXHJcbnVwZGF0ZVRyYWlsID0gKGJhc2VYLGJhc2VZLGR4LGR5KSAtPlxyXG5cdGlmIG5vdCBjdXJyZW50UGF0aFxyXG5cdFx0c2V0QXR0cnMgdHJhaWwsIHtwb2ludHM6Jyd9XHJcblx0XHRyZXR1cm4gXHJcblxyXG5cdHgwID0gYmFzZVggLSBTSVpFXHJcblx0eDEgPSBiYXNlWCArIFNJWkVcclxuXHR5MCA9IGJhc2VZIC0gU0laRVxyXG5cdHkxID0gYmFzZVkgKyBTSVpFXHJcblxyXG5cdHMgPSBbXVxyXG5cdGZvciBbeCx5XSBpbiBjdXJyZW50UGF0aC5wb2ludHNcclxuXHRcdHh4ID0gbWFwIHgsIHgwLHgxLCBXLzIgLSBUSUxFLCBXLzIgKyBUSUxFXHJcblx0XHR5eSA9IG1hcCB5LCB5MCx5MSwgSC8yIC0gVElMRSwgSC8yICsgVElMRVxyXG5cdFx0cy5wdXNoIFwiI3tNYXRoLnJvdW5kIHh4LWR4fSwje01hdGgucm91bmQgSCtkeS15eX1cIlxyXG5cdHNldEF0dHJzIHRyYWlsLCB7cG9pbnRzOnMuam9pbiAnICd9XHJcblxyXG5kcmF3TWFwID0gLT5cclxuXHRbYmFzZVgsYmFzZVksZHgsZHldID0gY29udmVydCBjZW50ZXJcclxuXHRmb3IgaiBpbiByYW5nZSAtbmgsbmgrMVxyXG5cdFx0eSA9IGJhc2VZICsgaiAqIFNJWkUgLSBTSVpFXHJcblx0XHRweSA9IEgvMiAtIFRJTEUqaiArIGR5XHJcblx0XHRmb3IgaSBpbiByYW5nZSAtbncsbncrMVxyXG5cdFx0XHR4ID0gYmFzZVggKyBpICogU0laRVxyXG5cdFx0XHRweCA9IFcvMiArIFRJTEUqaSAtIGR4XHJcblx0XHRcdGhyZWYgPSBcIm1hcHNcXFxcI3tTSVpFfVxcXFwje3l9LSN7eH0tI3tTSVpFfS5qcGdcIlxyXG5cdFx0XHRpZiBocmVmICE9IGltYWdlc1tqK25oXVtpK253XS5nZXRBdHRyaWJ1dGVOUyBudWxsLCdocmVmJyAjIG9ubHkgdXBkYXRlIGlmIG5lZWRlZFxyXG5cdFx0XHRcdHNldEF0dHJzIGltYWdlc1tqK25oXVtpK253XSwge2hyZWY6aHJlZn1cclxuXHRcdFx0c2V0QXR0cnMgaW1hZ2VzW2orbmhdW2krbnddLCB7eDpweCwgeTpweX1cclxuXHRcdFx0c2V0QXR0cnMgcmVjdHNbaituaF1baStud10sICB7eDpweCwgeTpweX1cclxuXHJcblx0dXBkYXRlVHJhaWwgTWF0aC5yb3VuZChiYXNlWCksTWF0aC5yb3VuZChiYXNlWSksTWF0aC5yb3VuZChkeCksTWF0aC5yb3VuZChkeSlcclxuXHJcblx0aWYgdGV4dHMubGVuZ3RoID09IDggXHJcblx0XHR0ZXh0c1swXS50ZXh0Q29udGVudCA9IGlmIHRhcmdldC5sZW5ndGg9PTIgdGhlbiBcIiN7YmVhcmluZyB0YXJnZXQsY2VudGVyfSDCulwiIGVsc2UgXCJcIlxyXG5cdFx0dGV4dHNbMV0udGV4dENvbnRlbnQgPSBpZiB0YXJnZXQubGVuZ3RoPT0yIHRoZW4gXCIje01hdGgucm91bmQgZGlzdGFuY2UgdGFyZ2V0LGNlbnRlcn0gbVwiIGVsc2UgXCJcIlxyXG5cclxuXHRcdGlmIGN1cnJlbnRQYXRoIHRoZW4gdGV4dHNbMl0udGV4dENvbnRlbnQgPSBcIiN7Y3VycmVudFBhdGgucG9pbnRzLmxlbmd0aH1cIlxyXG5cdFx0dGV4dHNbM10udGV4dENvbnRlbnQgPSBcIiN7U0laRX0gI3t1cGRhdGVNb2RlfVwiXHJcblx0XHR0ZXh0c1s0XS50ZXh0Q29udGVudCA9IFwiI3twb3NpdGlvblswXX1cIlxyXG5cdFx0dGV4dHNbNV0udGV4dENvbnRlbnQgPSBcIiN7cG9zaXRpb25bMV19XCJcclxuXHRcdHRleHRzWzZdLnRleHRDb250ZW50ID0gXCIje01hdGgucm91bmQgY2VudGVyWzBdfVwiXHJcblx0XHR0ZXh0c1s3XS50ZXh0Q29udGVudCA9IFwiI3tNYXRoLnJvdW5kIGNlbnRlclsxXX1cIlxyXG5cdFx0XHJcblx0XHRpZiBidXR0b25zLnRhcmdldCB0aGVuIGJ1dHRvbnMudGFyZ2V0Lm1vdmUoKVxyXG5cclxuY2VudHJlcmEgPSAtPlxyXG5cdHVwZGF0ZU1vZGUgPSAxXHJcblx0Z3JpZCA9IGdlb2RldGljX3RvX2dyaWQgcG9zaXRpb25bMF0scG9zaXRpb25bMV1cclxuXHRjZW50ZXIgPSAoZyBmb3IgZyBpbiBncmlkKVxyXG5cdGNlbnRlci5yZXZlcnNlKClcclxuXHRkcmF3TWFwKClcclxuXHJcbmFpbUV2ZW50ID0gLT5cclxuXHRpZiB0YXJnZXQubGVuZ3RoID09IDBcclxuXHRcdHRhcmdldCA9IGNlbnRlci5zbGljZSgpXHJcblx0XHRidXR0b25zLnRhcmdldC5tb3ZlSGFyZCBXLzIsSC8yXHJcblx0ZWxzZVxyXG5cdFx0dGFyZ2V0ID0gW11cclxuXHRcdGJ1dHRvbnMudGFyZ2V0Lm1vdmVIYXJkIElOVklTSUJMRSwgSU5WSVNJQkxFXHJcblxyXG4jIyMjI1xyXG5cclxubG9hZFBhdGggPSAtPiAjIHVybCAtPiBsb2NhbFN0b3JhZ2VcclxuXHRib3hlcyA9IGlmIGxvY2FsU3RvcmFnZS5ib3hlcyB0aGVuIEpTT04ucGFyc2UgbG9jYWxTdG9yYWdlLmJveGVzIGVsc2UgW11cclxuXHRwYXJhbWV0ZXJzID0gZ2V0UGFyYW1ldGVycygpXHJcblx0aWYgbm90IHBhcmFtZXRlcnMucGF0aCB0aGVuIHJldHVyblxyXG5cdGN1cnJlbnRQYXRoID0gbmV3IFBhdGggcGFyYW1ldGVycy5wYXRoXHJcblx0Y3VycmVudFBhdGguc2F2ZSgpXHJcblxyXG5jbGVhclBhdGggPSAtPlxyXG5cdGN1cnJlbnRQYXRoID0gbnVsbFxyXG5cdGRyYXdNYXAoKVxyXG5cdG1vcmUoKVxyXG5cclxuZmV0Y2hQYXRoID0gLT4gIyB2aXNhIGFsbGEgc3lubGlnYSBwYXRocy4gTsOkcm1hc3RlIGd1bG1hcmtlcmFzLCDDtnZyaWdhIGdyw6VtYXJrZXJhc1xyXG5cdGJlc3REaXN0ID0gOTk5OTk5OVxyXG5cdGJlc3RpID0gLTFcclxuXHRmb3IgW2tleSxbW3gwLHkwXSxbeDEseTFdXV0saSBpbiBib3hlc1xyXG5cdFx0Zm9yIHAgaW4gW1t4MCx5MF0sW3gwLHkxXSxbeDEseTBdLFt4MSx5MV1dXHJcblx0XHRcdGQgPSBkaXN0YW5jZSBwLGNlbnRlclxyXG5cdFx0XHRpZiBkIDwgYmVzdERpc3RcclxuXHRcdFx0XHRiZXN0RGlzdCA9IGRcclxuXHRcdFx0XHRiZXN0aSA9IGlcclxuXHRpZiBiZXN0aSAhPSAtMVxyXG5cdFx0Y3VycmVudFBhdGggPSBuZXcgUGF0aCBsb2NhbFN0b3JhZ2VbYm94ZXNbYmVzdGldWzBdXVxyXG5cdFx0Y2VudGVyID0gY3VycmVudFBhdGgucG9pbnRzWzBdLnNsaWNlKClcclxuXHRtb3JlKClcclxuXHRkcmF3TWFwKClcclxuXHJcbm1hcmsgPSAtPiAjIFNwYXJhIGNlbnRlciBpIGxvY2FsU3RvcmFnZVxyXG5cdHRlbXAgPSBuZXcgUGF0aCBcIiN7TWF0aC5yb3VuZCBjZW50ZXJbMF19LCN7TWF0aC5yb3VuZCBjZW50ZXJbMV19XCJcclxuXHR0ZW1wLnNhdmUoKVxyXG5cdG1vcmUoKVxyXG5cclxuZGVsZXRlUGF0aCA9IC0+ICMgdGFnIGJvcnQgY3VycmVudCBQYXRoIGZyw6VuIGxvY2FsU3RvcmFnZVxyXG5cdGN1cnJlbnRQYXRoLmRlbGV0ZSgpXHJcblx0bW9yZSgpXHJcblxyXG5yZWNQYXRoID0gLT4gIyBzdGFydC9zdG9wcCBhdiBpbnNwZWxuaW5nIGF2IHBhdGhcclxuXHRyZWMgPSAxIC0gcmVjXHJcblx0aWYgcmVjID09IDEgdGhlbiBjdXJyZW50UGF0aCA9IG5ldyBQYXRoIFwiXCJcclxuXHRpZiByZWMgPT0gMCB0aGVuIGN1cnJlbnRQYXRoLnNhdmUoKVxyXG5cdGJ1dHRvbnMucmVjLnNldFRleHRGaWxsIFsnIzAwMGYnLCcjZjAwZiddW3JlY11cclxuXHR0ZXh0c1syXS50ZXh0Q29udGVudCA9IFwiI3tjdXJyZW50UGF0aC5wb2ludHMubGVuZ3RofVwiXHJcblx0bW9yZSgpXHJcblxyXG5zaGFyZVBhdGggPSAtPlxyXG5cdGlmIGN1cnJlbnRQYXRoLnBvaW50cy5sZW5ndGggPT0gMCB0aGVuIHJldHVyblxyXG5cdGhlYWRlciA9IFwiI3tjdXJyZW50UGF0aC5wb2ludHMubGVuZ3RofSBwb2ludHMuICN7Y3VycmVudFBhdGguZGlzdGFuY2V9IG1ldGVyLlwiXHJcblx0c2VuZE1haWwgaGVhZGVyLCBcIiN7d2luZG93LmxvY2F0aW9uLm9yaWdpbiArIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZX0/cGF0aD0je2N1cnJlbnRQYXRoLnBhdGh9XCJcclxuXHRtb3JlKClcclxuXHJcbiMjIyMjXHJcblxyXG5tYWtlVGV4dCA9ICh4LHkpIC0+XHJcblx0dGV4dCA9IGFkZCAndGV4dCcsc3ZnLCB7eDp4LCB5OnksIHN0cm9rZTonYmxhY2snLCAnc3Ryb2tlLXdpZHRoJzoxLCAndGV4dC1hbmNob3InOidtaWRkbGUnfVxyXG5cdHRleHQuc3R5bGUuZm9udFNpemUgPSAnNTBweCdcclxuXHR0ZXh0LnN0eWxlLnVzZXJTZWxlY3QgPSAnbm9uZSdcclxuXHR0ZXh0cy5wdXNoIHRleHRcclxuXHJcbm5hZGEgPSAoZXZlbnQpIC0+XHJcblx0ZXZlbnQucHJldmVudERlZmF1bHQoKVxyXG5cdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXHJcblxyXG5sb2NhdGlvblVwZGF0ZUZhaWwgPSAoZXJyb3IpIC0+XHRpZiBlcnJvci5jb2RlID09IGVycm9yLlBFUk1JU1NJT05fREVOSUVEIHRoZW4gbWVzc2FnZXMgPSBbJycsJycsJycsJycsJycsJ0NoZWNrIGxvY2F0aW9uIHBlcm1pc3Npb25zJ11cclxuXHJcbmxvY2F0aW9uVXBkYXRlID0gKHApIC0+XHJcblx0cG9zaXRpb24gPSBbbXlSb3VuZChwLmNvb3Jkcy5sYXRpdHVkZSw2KSwgbXlSb3VuZChwLmNvb3Jkcy5sb25naXR1ZGUsNildXHJcblx0Z3JpZCA9IGdlb2RldGljX3RvX2dyaWQgcG9zaXRpb25bMF0scG9zaXRpb25bMV1cclxuXHR0ZW1wID0gKE1hdGgucm91bmQoZykgZm9yIGcgaW4gZ3JpZClcclxuXHR0ZW1wLnJldmVyc2UoKVxyXG5cdGlmIHJlYyA9PSAxIHRoZW4gY3VycmVudFBhdGgucG9pbnRzLnB1c2ggdGVtcC5zbGljZSgpXHJcblx0aWYgdXBkYXRlTW9kZSA9PSAxIHRoZW4gY2VudGVyID0gdGVtcFxyXG5cdGRyYXdNYXAoKVxyXG5cclxuaW5pdEdQUyA9IC0+XHJcblx0bmF2aWdhdG9yLmdlb2xvY2F0aW9uLndhdGNoUG9zaXRpb24gbG9jYXRpb25VcGRhdGUsIGxvY2F0aW9uVXBkYXRlRmFpbCxcclxuXHRcdGVuYWJsZUhpZ2hBY2N1cmFjeTogdHJ1ZVxyXG5cdFx0bWF4aW11bUFnZTogMzAwMDBcclxuXHRcdHRpbWVvdXQ6IDI3MDAwXHJcblxyXG5pbml0VHJhaWwgPSAtPlxyXG5cdGlmIGZhbHNlXHJcblx0XHR0cmFpbCA9IGFkZCAncGF0aCcsIHN2Zywge2Q6XCJcIiwgc3Ryb2tlOidyZWQnLCAnc3Ryb2tlLXdpZHRoJzoxLCBmaWxsOidub25lJ31cclxuXHRlbHNlXHJcblx0XHRtYXJrZXIgPSBhZGQgJ21hcmtlcicsIHN2Zywge2lkOidkb3QnLCB2aWV3Qm94OlwiMCAwIDEwIDEwXCIsIHJlZlg6XCI1XCIsIHJlZlk6XCI1XCIsIG1hcmtlcldpZHRoOlwiNVwiLCBtYXJrZXJIZWlnaHQ6XCI1XCIgfVxyXG5cdFx0YWRkICdjaXJjbGUnLCBtYXJrZXIsIHtjeDpcIjVcIiwgY3k6XCI1XCIsIHI6XCI1XCIsIGZpbGw6XCJ5ZWxsb3dcIn1cclxuXHRcdHRyYWlsID0gYWRkICdwb2x5bGluZScsIHN2Zywge3BvaW50cyA6IFwiXCIsZmlsbCA6IFwibm9uZVwiLHN0cm9rZSA6IFwicmVkXCIsJ3N0cm9rZS13aWR0aCc6MSwnbWFya2VyLXN0YXJ0JyA6IFwidXJsKCNkb3QpXCIsJ21hcmtlci1taWQnIDogXCJ1cmwoI2RvdClcIiwnbWFya2VyLWVuZCcgOiBcInVybCgjZG90KVwifVxyXG5cclxubW9yZSA9ICgpIC0+XHJcblx0bW9yZU1vZGUgPSAxIC0gbW9yZU1vZGVcclxuXHRmb3IgbmFtZSBpbiBcImZldGNoIHJlYyBtYXJrIHBsYXkgY2xlYXIgZGVsZXRlIHNoYXJlXCIuc3BsaXQgJyAnXHJcblx0XHRpZiBtb3JlTW9kZSA9PSAwIHRoZW4gYnV0dG9uc1tuYW1lXS5kaXNhYmxlKClcclxuXHRcdGlmIG1vcmVNb2RlID09IDEgdGhlbiBidXR0b25zW25hbWVdLmVuYWJsZSgpXHJcblxyXG5zdGFydHVwID0gLT5cclxuXHRsb2FkUGF0aCgpXHJcblx0aW5pdEdQUygpXHJcblx0YWRkICdyZWN0Jyxzdmcse3dpZHRoOlcsIGhlaWdodDpILCBmaWxsOidncmVlbid9XHJcblxyXG5cdGdyaWQgPSBnZW9kZXRpY190b19ncmlkIHBvc2l0aW9uWzBdLHBvc2l0aW9uWzFdXHJcblx0Y2VudGVyID0gKGcgZm9yIGcgaW4gZ3JpZClcclxuXHRjZW50ZXIucmV2ZXJzZSgpXHJcblxyXG5cdGltYWdlcyA9IFtdXHJcblx0cmVjdHMgPSBbXVxyXG5cdHRleHRzID0gW11cclxuXHJcblx0Zm9yIF8gaW4gcmFuZ2UgMipuaCsxXHJcblx0XHRpcm93ID0gW11cclxuXHRcdHJyb3cgPSBbXVxyXG5cdFx0Zm9yIF8gaW4gcmFuZ2UgMipudysxXHJcblx0XHRcdGlyb3cucHVzaCBhZGQgJ2ltYWdlJyxzdmcsIHt9XHJcblx0XHRcdHJyb3cucHVzaCBhZGQgJ3JlY3QnLCBzdmcsIHt3aWR0aDpUSUxFLCBoZWlnaHQ6VElMRSwgc3Ryb2tlOidibGFjaycsICdzdHJva2Utd2lkdGgnOjEsIGZpbGw6J25vbmUnfVxyXG5cdFx0aW1hZ2VzLnB1c2ggaXJvd1xyXG5cdFx0cmVjdHMucHVzaCBycm93XHJcblxyXG5cdHgwID0gMC4zNipXXHJcblx0eDEgPSAwLjY0KldcclxuXHR5MCA9IDEyMCsxMFxyXG5cdHkxID0gSC0xODArMTBcclxuXHR5MiA9IEgtMTIwKzEwXHJcblx0eTMgPSBILTYwKzEwXHJcblx0bWFrZVRleHQgeDAsIHkwXHJcblx0bWFrZVRleHQgeDEsIHkwXHJcblx0bWFrZVRleHQgeDAsIHkxXHJcblx0bWFrZVRleHQgeDEsIHkxXHJcblx0bWFrZVRleHQgeDAsIHkyXHJcblx0bWFrZVRleHQgeDEsIHkyXHJcblx0bWFrZVRleHQgeDAsIHkzXHJcblx0bWFrZVRleHQgeDEsIHkzXHJcblxyXG5cdHgwID0gMTI4XHJcblx0eDEgPSBXLzJcclxuXHR4MiA9IFctMTI4XHJcblx0eTAgPSAxMjhcclxuXHR5MSA9IDI1NisxMjhcclxuXHR5MiA9IDUxMisxMjhcclxuXHR5MyA9IEgtMTI4XHJcblxyXG5cdGJ1dHRvbnMudGFyZ2V0ID0gbmV3IFRhcmdldEJ1dHRvbiBJTlZJU0lCTEUsIElOVklTSUJMRSwgJycsICcjZjAwOCdcclxuXHRidXR0b25zLmFpbSA9IG5ldyBUYXJnZXRCdXR0b24gVy8yLCBILzIsIFwiY2xpY2soJ2FpbScpXCJcclxuXHRuZXcgQnV0dG9uIHgwLCB5MCwgJ2luJywgIFwiY2xpY2soJ2luJylcIlxyXG5cdG5ldyBCdXR0b24geDIsIHkwLCAnb3V0JywgXCJjbGljaygnb3V0JylcIlxyXG5cdG5ldyBCdXR0b24geDAsIHkzLCAnY3RyJywgXCJjbGljaygnY3RyJylcIlxyXG5cdGJ1dHRvbnMubW9yZSA9IG5ldyBCdXR0b24geDIsIHkzLCAnbW9yZScsIFwibW9yZSgpXCJcclxuXHRidXR0b25zLnJlYyA9IG5ldyBCdXR0b24geDAsIHkxLCAncmVjJywgXCJyZWNQYXRoKClcIlxyXG5cdGJ1dHRvbnMubWFyayA9IG5ldyBCdXR0b24geDIsIHkxLCAnbWFyaycsIFwibWFyaygpXCJcclxuXHRidXR0b25zLmZldGNoID0gbmV3IEJ1dHRvbiB4MSwgeTAsICdmZXRjaCcsIFwiZmV0Y2hQYXRoKClcIlxyXG5cdGJ1dHRvbnMucGxheSA9IG5ldyBCdXR0b24geDAsIHkyLCAncGxheScsIFwicGxheVBhdGgoKVwiXHJcblx0YnV0dG9ucy5zaGFyZSA9IG5ldyBCdXR0b24geDEsIHkzLCAnc2hhcmUnLCBcInNoYXJlUGF0aCgpXCJcclxuXHRidXR0b25zLmNsZWFyID0gbmV3IEJ1dHRvbiB4Mi0yNTYsIHkyLCAnY2xlYXInLCBcImNsZWFyUGF0aCgpXCJcclxuXHRidXR0b25zLmRlbGV0ZSA9IG5ldyBCdXR0b24geDIsIHkyLCAnZGVsZXRlJywgXCJkZWxldGVQYXRoKClcIlxyXG5cclxuXHQjIGNvbnNvbGUubG9nIGdyaWRfdG9fZ2VvZGV0aWMgNjU1MzYwMCsxMjgsNjU1MzYwKzEyOFxyXG5cdCMgY29uc29sZS5sb2cgZ3JpZF90b19nZW9kZXRpYyA2NTUzNjAwKzc4KjI1Niw2NTUzNjArODgqMjU2XHJcblx0IyBjb25zb2xlLmxvZyBncmlkX3RvX2dlb2RldGljIDY1NTM2MDArKDc4KzE2KSoyNTYsNjU1MzYwKyg4OCsxNikqMjU2XHJcblx0I2NvbnNvbGUubG9nIGdlb2RldGljX3RvX2dyaWQgNTkuMjYzMzMxNDkzNDY1Mzk0LCAxOC4xMjIxNDIxNzc3NTEzNTNcclxuXHJcblx0aW5pdFRyYWlsKClcclxuXHJcblx0bW9yZSgpXHJcblxyXG5cdGRyYXdNYXAoKVxyXG5cclxuc3RhcnR1cCgpXHJcbiJdfQ==
//# sourceURL=c:\github\2021\013-gpsKarta2\coffee\sketch.coffee