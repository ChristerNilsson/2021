// Generated by CoffeeScript 2.5.1
var CANDS, M, N, SYMBOLS, candidates, cands, command, connect, crap, dialogues, doit, drawTable, errors, facit, guess, handleGuess, handler, headers, historyx, init, interpolate, makeAnswer, menu0, menu1, mousePressed, mouseReleased, newGame, pack, reduce, released, setup, showDialogue, touchStarted, ts, xdraw,
  indexOf = [].indexOf;

SYMBOLS = '0123456789abcdefg';

M = 4;

N = 10;

CANDS = 0;

command = "";

facit = "";

guess = "";

cands = null;

errors = [];

headers = [];

historyx = [];

ts = 20;

dialogues = [];

released = true;

crap = (parent, type) => {
  return parent.appendChild(document.createElement(type));
};

connect = (button, handler) => {
  return button.onclick = button.ontouchend = handler;
};

pack = (digits) => {
  return digits.join("");
};

init = () => {
  return _(SYMBOLS.substring(0, N)).permutations(M).map((v) => {
    return _.join(v, '');
  }).value();
};

candidates = (m, n) => {
  return _.reduce(range(n, n - m, -1), (a, b) => {
    return a * b;
  });
};

assert(5040, candidates(4, 10));

assert(11880, candidates(4, 12));

assert(2162160, candidates(6, 14));

assert(518918400, candidates(8, 16));

assert(20922789888000, candidates(16, 16));

newGame = () => {
  historyx = [];
  guess = "";
  command = "";
  facit = _.shuffle(SYMBOLS.substring(0, N));
  facit = pack(facit.slice(0, M));
  cands = null;
  CANDS = candidates(M, N);
  if (candidates(M, N) <= 1000000) {
    return cands = init();
  }
};

makeAnswer = (f, g) => { // facit,guess
  var i, j, l, len, len1, m, o, ref, ref1, res;
  m = f.length;
  res = [];
  ref = _.range(m);
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    ref1 = _.range(m);
    for (o = 0, len1 = ref1.length; o < len1; o++) {
      j = ref1[o];
      if (f[i] === g[j]) {
        res.push(SYMBOLS[Math.abs(i - j)]);
      }
    }
  }
  res.sort();
  return pack(res);
};

assert("", makeAnswer("1234", "5678"));

assert("0", makeAnswer("1234", "1678"));

assert("00", makeAnswer("1234", "1278"));

assert("000", makeAnswer("1234", "1235"));

assert("0000", makeAnswer("1234", "1234"));

assert("0123", makeAnswer("1234", "3241"));

assert("1133", makeAnswer("1234", "4321"));

assert("2222", makeAnswer("1234", "3412"));

assert("33", makeAnswer("1234", "4561"));

reduce = (cands, guess) => {
  var answer1, answer2, cand, l, len, res;
  if (cands === null) {
    return null;
  }
  res = [];
  answer1 = makeAnswer(facit, guess);
  for (l = 0, len = cands.length; l < len; l++) {
    cand = cands[l];
    answer2 = makeAnswer(cand, guess);
    if (answer1 === answer2) {
      res.push(cand);
    }
  }
  return res;
};

handleGuess = (guess) => {
  var answer;
  answer = makeAnswer(facit, guess);
  cands = reduce(cands, guess);
  historyx.push([guess, answer, cands]);
  if (answer === '0'.repeat(M)) {
    dialogues.pop();
  }
  return command = '';
};

handler = () => {
  return handleGuess(command);
};

setup = () => {
  body.style.overflow = 'hidden';
  body.style.position = 'fixed';
  body.style.top = '0px';
  body.style.width = '100%';
  createCanvas(windowWidth, windowHeight);
  angleMode(DEGREES);
  menu0();
  return xdraw();
};

interpolate = (x0, y0, x1, y1, x) => {
  var dx, dy, k, m;
  dy = y1 - y0;
  dx = x1 - x0;
  k = dy / dx;
  m = y0 - k * x0;
  return k * x + m;
};

xdraw = function() {
  var x0, x1, y0, y1;
  background(128);
  noStroke();
  fill(0);
  x0 = width / 2 / 1;
  x1 = width / 2 / 16;
  y0 = 60;
  y1 = 30;
  ts = interpolate(x0, y0, x1, y1, width / 2 / M);
  textSize(ts);
  textAlign(LEFT, TOP);
  text(command, 5, 5);
  textAlign(RIGHT, TOP);
  fill(64 + 32);
  text(CANDS, width - 5, 5);
  textAlign(LEFT, BOTTOM);
  text(`${M} of ${N}`, 5, height - 5);
  drawTable();
  return showDialogue();
};

drawTable = () => {
  var a, antal, b, c, h, i, l, len, n, offset, ref, results;
  n = Math.floor(height / ts);
  n = max(0, n - 2);
  antal = min(n, historyx.length);
  offset = max(0, historyx.length - n);
  ref = _.range(antal);
  results = [];
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    h = historyx[offset + i];
    [a, b, c] = h;
    textAlign(LEFT);
    fill(0);
    text(a, 5, 5 + (i + 2) * ts);
    if (c) {
      textAlign(CENTER);
      fill(255, 255, 0);
      text(b, 0.5 * width, 5 + (i + 2) * ts);
      textAlign(RIGHT);
      fill(64 + 32);
      results.push(text(c.length, width - 5, 5 + (i + 2) * ts));
    } else {
      textAlign(RIGHT);
      fill(255, 255, 0);
      results.push(text(b, width - 5, 5 + (i + 2) * ts));
    }
  }
  return results;
};

showDialogue = function() {
  if (dialogues.length > 0) {
    return (_.last(dialogues)).show();
  }
};

menu0 = function() { // select Game
  var dialogue, i, j, l, len, ref, results;
  dialogue = new Dialogue();
  ref = range(9);
  results = [];
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    results.push((function() {
      var len1, o, ref1, results1;
      ref1 = range(1, 17);
      results1 = [];
      for (o = 0, len1 = ref1.length; o < len1; o++) {
        j = ref1[o];
        if (j >= 2 * i) {
          continue;
        }
        results1.push(((i, j) => {
          var button;
          button = new Button(dialogue, `${SYMBOLS[j + 1]}:${SYMBOLS[2 * i]}`, () => {
            M = j + 1;
            N = 2 * i;
            newGame();
            menu1();
            return xdraw();
          });
          dialogue.buttons.push(button);
          button.x = 60 * (i - 5);
          button.y = 60 * (j - 8);
          return button.r = 30;
        })(i, j));
      }
      return results1;
    }).call(this));
  }
  return results;
};

menu1 = function() { // Main Menu
  var bs, buttons, ch, dialogue, l, len, n, ref;
  dialogue = new Dialogue();
  ref = SYMBOLS.substring(0, N);
  for (l = 0, len = ref.length; l < len; l++) {
    ch = ref[l];
    (function(ch) {
      return dialogue.add(ch, () => {
        var button, len1, o, ref1, ref2, results;
        dialogue.disable(ch);
        command += ch;
        if (command.length === M) {
          handler();
        }
        ref1 = dialogue.buttons;
        results = [];
        for (o = 0, len1 = ref1.length; o < len1; o++) {
          button = ref1[o];
          if (button.title === 'back') {
            results.push(button.active = command.length > 0);
          } else {
            results.push(button.active = command.length < M && (ref2 = button.title, indexOf.call(command, ref2) < 0));
          }
        }
        return results;
      });
    })(ch);
  }
  dialogue.add('nop', () => {});
  dialogue.add('back', () => {
    var button, len1, o, ref1, ref2, results;
    command = command.substring(0, command.length - 1);
    ref1 = dialogue.buttons;
    results = [];
    for (o = 0, len1 = ref1.length; o < len1; o++) {
      button = ref1[o];
      if (button.title === 'back') {
        results.push(button.active = command.length > 0);
      } else if (ref2 = button.title, indexOf.call(command, ref2) < 0) {
        results.push(button.active = true);
      } else {
        results.push(void 0);
      }
    }
    return results;
  });
  dialogue.disable('back');
  dialogue.disable('nop');
  buttons = dialogue.buttons;
  n = buttons.length;
  bs = buttons.splice(n - 2, 1);
  buttons.splice(1, 0, bs[0]);
  dialogue.clock('exit', true);
  return dialogue.textSize *= 1.5;
};

doit = function() {
  var dialogue;
  if (dialogues.length > 0) {
    dialogue = _.last(dialogues);
    return dialogue.execute(mouseX, mouseY);
  } else {
    return menu0();
  }
};

mouseReleased = function() { // to make Android work 
  released = true;
  return false;
};

touchStarted = function() {
  doit();
  return xdraw();
};

mousePressed = function() {
  if (!released) { // to make Android work 
    return;
  }
  released = false;
  return touchStarted();
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2021\033-MM5040\coffee\sketch.coffee