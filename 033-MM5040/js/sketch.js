// Generated by CoffeeScript 2.5.1
var CANDS, M, N, SYMBOLS, candidates, cands, command, connect, crap, dialogues, doit, drawTable, errors, facit, guess, handleGuess, handler, headers, historyx, init, interpolate, makeAnswer, menu1, menu2, mousePressed, mouseReleased, newGame, pack, reduce, released, setup, showDialogue, touchStarted, ts, xdraw,
  indexOf = [].indexOf;

SYMBOLS = '0123456789abcdef';

M = 4;

N = 10;

CANDS = 0;

command = "";

facit = "";

guess = "";

cands = null;

errors = [];

headers = [];

historyx = [];

ts = 20;

dialogues = [];

released = true;

crap = (parent, type) => {
  return parent.appendChild(document.createElement(type));
};

connect = (button, handler) => {
  return button.onclick = button.ontouchend = handler;
};

pack = (digits) => {
  return digits.join("");
};

init = () => {
  return _(SYMBOLS.substring(0, N)).permutations(M).map((v) => {
    return _.join(v, '');
  }).value();
};

candidates = (m, n) => {
  return _.reduce(range(n, n - m, -1), (a, b) => {
    return a * b;
  });
};

assert(5040, candidates(4, 10));

assert(11880, candidates(4, 12));

assert(2162160, candidates(6, 14));

assert(518918400, candidates(8, 16));

assert(20922789888000, candidates(16, 16));

newGame = () => {
  historyx = [];
  guess = "";
  command = "";
  facit = _.shuffle(SYMBOLS.substring(0, N));
  facit = pack(facit.slice(0, M));
  cands = null;
  CANDS = candidates(M, N);
  if (candidates(M, N) <= 1000000) {
    return cands = init();
  }
};

makeAnswer = (f, g) => { // facit,guess
  var i, j, l, len, len1, m, o, ref, ref1, res;
  m = f.length;
  res = [];
  ref = _.range(m);
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    ref1 = _.range(m);
    for (o = 0, len1 = ref1.length; o < len1; o++) {
      j = ref1[o];
      if (f[i] === g[j]) {
        res.push(SYMBOLS[Math.abs(i - j)]);
      }
    }
  }
  res.sort();
  return pack(res);
};

assert("", makeAnswer("1234", "5678"));

assert("0", makeAnswer("1234", "1678"));

assert("00", makeAnswer("1234", "1278"));

assert("000", makeAnswer("1234", "1235"));

assert("0000", makeAnswer("1234", "1234"));

assert("0123", makeAnswer("1234", "3241"));

assert("1133", makeAnswer("1234", "4321"));

assert("2222", makeAnswer("1234", "3412"));

assert("33", makeAnswer("1234", "4561"));

reduce = (cands, guess) => {
  var answer1, answer2, cand, l, len, res;
  if (cands === null) {
    return null;
  }
  res = [];
  answer1 = makeAnswer(facit, guess);
  for (l = 0, len = cands.length; l < len; l++) {
    cand = cands[l];
    answer2 = makeAnswer(cand, guess);
    if (answer1 === answer2) {
      res.push(cand);
    }
  }
  return res;
};

handleGuess = (guess) => {
  var answer;
  answer = makeAnswer(facit, guess);
  cands = reduce(cands, guess);
  historyx.push([guess, answer, cands]);
  if (answer === '0000') {
    historyx.push([`Solved in ${historyx.length} guesses!`, "", []]);
  }
  return command = '';
};

handler = () => {
  return handleGuess(command);
};

setup = () => {
  body.style.overflow = 'hidden';
  body.style.position = 'fixed';
  body.style.top = '0px';
  body.style.width = '100%';
  createCanvas(windowWidth, windowHeight);
  angleMode(DEGREES);
  newGame();
  return xdraw();
};

interpolate = (x0, y0, x1, y1, x) => {
  var dx, dy, k, m;
  dy = y1 - y0;
  dx = x1 - x0;
  k = dy / dx;
  m = y0 - k * x0;
  return k * x + m;
};

xdraw = function() {
  var x0, x1, y0, y1;
  background(128);
  noStroke();
  fill(0);
  x0 = width / 2 / 1;
  x1 = width / 2 / 16;
  y0 = 60;
  y1 = 30;
  ts = interpolate(x0, y0, x1, y1, width / 2 / M);
  textSize(ts);
  textAlign(LEFT, TOP);
  text(command, 5, 5);
  textAlign(RIGHT, TOP);
  fill(64 + 32);
  text(CANDS, width - 5, 5);
  textAlign(LEFT, BOTTOM);
  text(`${M} of ${N}`, 5, height - 5);
  drawTable();
  return showDialogue();
};

drawTable = () => {
  var a, antal, b, c, h, i, l, len, n, offset, ref, results;
  n = Math.floor(height / ts);
  n = max(0, n - 2);
  antal = min(n, historyx.length);
  offset = max(0, historyx.length - n);
  ref = _.range(antal);
  results = [];
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    h = historyx[offset + i];
    [a, b, c] = h;
    textAlign(LEFT);
    fill(0);
    text(a, 5, 5 + (i + 2) * ts);
    if (c) {
      textAlign(CENTER);
      fill(255, 255, 0);
      text(b, 0.5 * width, 5 + (i + 2) * ts);
      textAlign(RIGHT);
      fill(64 + 32);
      results.push(text(c.length, width - 5, 5 + (i + 2) * ts));
    } else {
      textAlign(RIGHT);
      fill(255, 255, 0);
      results.push(text(b, width - 5, 5 + (i + 2) * ts));
    }
  }
  return results;
};

showDialogue = function() {
  if (dialogues.length > 0) {
    return (_.last(dialogues)).show();
  }
};

menu1 = function() { // Main Menu
  var bs, button, buttons, ch, dialogue, l, len, n, ref;
  dialogue = new Dialogue();
  ref = SYMBOLS.substring(0, N);
  for (l = 0, len = ref.length; l < len; l++) {
    ch = ref[l];
    (function(ch) {
      return dialogue.add(ch, () => {
        var button, len1, o, ref1, ref2, results;
        dialogue.disable(ch);
        command += ch;
        ref1 = dialogue.buttons;
        results = [];
        for (o = 0, len1 = ref1.length; o < len1; o++) {
          button = ref1[o];
          if (button.title === 'back') {
            results.push(button.active = command.length > 0);
          } else if (button.title === 'ok') {
            results.push(button.active = command.length === M);
          } else {
            results.push(button.active = command.length < M && (ref2 = button.title, indexOf.call(command, ref2) < 0));
          }
        }
        return results;
      });
    })(ch);
  }
  dialogue.add('ok', () => {
    handler();
    return dialogues.pop();
  });
  dialogue.add('back', () => {
    var button, len1, o, ref1, ref2, results;
    command = command.substring(0, command.length - 1);
    ref1 = dialogue.buttons;
    results = [];
    for (o = 0, len1 = ref1.length; o < len1; o++) {
      button = ref1[o];
      if (button.title === 'back') {
        results.push(button.active = command.length > 0);
      } else if (button.title === 'ok') {
        results.push(button.active = command.length === M);
      } else if (ref2 = button.title, indexOf.call(command, ref2) < 0) {
        results.push(button.active = true);
      } else {
        results.push(void 0);
      }
    }
    return results;
  });
  dialogue.disable('back');
  buttons = dialogue.buttons;
  n = buttons.length;
  bs = buttons.splice(n - 2, 1);
  buttons.splice(1, 0, bs[0]);
  dialogue.clock('005', true);
  dialogue.add("new", () => {
    return menu2();
  });
  button = _.last(dialogue.buttons);
  button.x = width / 2 - 50;
  button.y = height / 2 - 50;
  button.r = 50;
  dialogue.disable('ok');
  if (historyx.length === 0 || _.last(historyx)[2].length > 0) {
    dialogue.disable('new');
  }
  return dialogue.textSize *= 1.5;
};

menu2 = function() { // new Game
  var dialogue;
  dialogue = new Dialogue();
  dialogue.add('new', () => {
    newGame();
    dialogues.pop();
    dialogues.pop();
    menu1();
    return xdraw();
  });
  dialogue.add('-2', () => {
    if (N > 2 && N > M) {
      return N -= 2;
    }
  });
  dialogue.add('+2', () => {
    if (N < SYMBOLS.length) {
      return N += 2;
    }
  });
  dialogue.add('+1', () => {
    if (M < N) {
      return M++;
    }
  });
  dialogue.add('-1', () => {
    if (M > 1) {
      return M--;
    }
  });
  return dialogue.clock(' ', true);
};

//#####
doit = function() {
  var dialogue;
  if (dialogues.length > 0) {
    dialogue = _.last(dialogues);
    return dialogue.execute(mouseX, mouseY);
  } else {
    return menu1();
  }
};

mouseReleased = function() { // to make Android work 
  released = true;
  return false;
};

touchStarted = function() {
  doit();
  return xdraw();
};

mousePressed = function() {
  if (!released) { // to make Android work 
    return;
  }
  released = false;
  return touchStarted();
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXHNrZXRjaC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUEsS0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsT0FBQSxFQUFBLFVBQUEsRUFBQSxLQUFBLEVBQUEsT0FBQSxFQUFBLE9BQUEsRUFBQSxJQUFBLEVBQUEsU0FBQSxFQUFBLElBQUEsRUFBQSxTQUFBLEVBQUEsTUFBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsV0FBQSxFQUFBLE9BQUEsRUFBQSxPQUFBLEVBQUEsUUFBQSxFQUFBLElBQUEsRUFBQSxXQUFBLEVBQUEsVUFBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsWUFBQSxFQUFBLGFBQUEsRUFBQSxPQUFBLEVBQUEsSUFBQSxFQUFBLE1BQUEsRUFBQSxRQUFBLEVBQUEsS0FBQSxFQUFBLFlBQUEsRUFBQSxZQUFBLEVBQUEsRUFBQSxFQUFBLEtBQUE7RUFBQTs7QUFBQSxPQUFBLEdBQVU7O0FBQ1YsQ0FBQSxHQUFJOztBQUNKLENBQUEsR0FBSTs7QUFDSixLQUFBLEdBQVE7O0FBQ1IsT0FBQSxHQUFVOztBQUNWLEtBQUEsR0FBUTs7QUFDUixLQUFBLEdBQVE7O0FBQ1IsS0FBQSxHQUFROztBQUNSLE1BQUEsR0FBUzs7QUFDVCxPQUFBLEdBQVU7O0FBQ1YsUUFBQSxHQUFXOztBQUNYLEVBQUEsR0FBSzs7QUFFTCxTQUFBLEdBQVk7O0FBQ1osUUFBQSxHQUFXOztBQUVYLElBQUEsR0FBTyxDQUFDLE1BQUQsRUFBUyxJQUFULENBQUEsR0FBQTtTQUFrQixNQUFNLENBQUMsV0FBUCxDQUFtQixRQUFRLENBQUMsYUFBVCxDQUF1QixJQUF2QixDQUFuQjtBQUFsQjs7QUFDUCxPQUFBLEdBQVUsQ0FBQyxNQUFELEVBQVMsT0FBVCxDQUFBLEdBQUE7U0FBcUIsTUFBTSxDQUFDLE9BQVAsR0FBaUIsTUFBTSxDQUFDLFVBQVAsR0FBb0I7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QUFkOztFQUFILENBQW5CO1NBQ0EsUUFBUSxDQUFDLEtBQVQsQ0FBZSxHQUFmLEVBQW1CLElBQW5CO0FBWk8sRUF6TFI7OztBQXlNQSxJQUFBLEdBQU8sUUFBQSxDQUFBLENBQUE7QUFDUCxNQUFBO0VBQUMsSUFBRyxTQUFTLENBQUMsTUFBVixHQUFtQixDQUF0QjtJQUNDLFFBQUEsR0FBVyxDQUFDLENBQUMsSUFBRixDQUFPLFNBQVA7V0FDWCxRQUFRLENBQUMsT0FBVCxDQUFpQixNQUFqQixFQUF3QixNQUF4QixFQUZEO0dBQUEsTUFBQTtXQUlDLEtBQUEsQ0FBQSxFQUpEOztBQURNOztBQU9QLGFBQUEsR0FBZ0IsUUFBQSxDQUFBLENBQUEsRUFBQTtFQUNmLFFBQUEsR0FBVztTQUNYO0FBRmU7O0FBSWhCLFlBQUEsR0FBZSxRQUFBLENBQUEsQ0FBQTtFQUNkLElBQUEsQ0FBQTtTQUNBLEtBQUEsQ0FBQTtBQUZjOztBQUlmLFlBQUEsR0FBZSxRQUFBLENBQUEsQ0FBQTtFQUNkLElBQUcsQ0FBQyxRQUFKO0FBQWtCLFdBQWxCOztFQUNBLFFBQUEsR0FBVztTQUNYLFlBQUEsQ0FBQTtBQUhjIiwic291cmNlc0NvbnRlbnQiOlsiU1lNQk9MUyA9ICcwMTIzNDU2Nzg5YWJjZGVmJ1xyXG5NID0gNFxyXG5OID0gMTBcclxuQ0FORFMgPSAwXHJcbmNvbW1hbmQgPSBcIlwiXHJcbmZhY2l0ID0gXCJcIlxyXG5ndWVzcyA9IFwiXCJcclxuY2FuZHMgPSBudWxsXHJcbmVycm9ycyA9IFtdXHJcbmhlYWRlcnMgPSBbXVxyXG5oaXN0b3J5eCA9IFtdXHJcbnRzID0gMjBcclxuXHJcbmRpYWxvZ3VlcyA9IFtdXHJcbnJlbGVhc2VkID0gdHJ1ZVxyXG5cclxuY3JhcCA9IChwYXJlbnQsIHR5cGUpID0+IHBhcmVudC5hcHBlbmRDaGlsZCBkb2N1bWVudC5jcmVhdGVFbGVtZW50IHR5cGVcclxuY29ubmVjdCA9IChidXR0b24sIGhhbmRsZXIpID0+IGJ1dHRvbi5vbmNsaWNrID0gYnV0dG9uLm9udG91Y2hlbmQgPSBoYW5kbGVyXHJcbnBhY2sgPSAoZGlnaXRzKSA9PiBkaWdpdHMuam9pbiBcIlwiXHJcbmluaXQgPSA9PiBfKFNZTUJPTFMuc3Vic3RyaW5nKDAsTikpLnBlcm11dGF0aW9ucyhNKS5tYXAoKHYpID0+IF8uam9pbih2LCAnJykpLnZhbHVlKClcclxuY2FuZGlkYXRlcyA9IChtLG4pID0+IF8ucmVkdWNlIHJhbmdlKG4sbi1tLC0xKSwgKGEsYikgPT4gYSpiXHJcbmFzc2VydCA1MDQwLCBjYW5kaWRhdGVzIDQsMTBcclxuYXNzZXJ0IDExODgwLCBjYW5kaWRhdGVzIDQsMTJcclxuYXNzZXJ0IDIxNjIxNjAsIGNhbmRpZGF0ZXMgNiwxNFxyXG5hc3NlcnQgNTE4OTE4NDAwLCBjYW5kaWRhdGVzIDgsMTZcclxuYXNzZXJ0IDIwOTIyNzg5ODg4MDAwLCBjYW5kaWRhdGVzIDE2LDE2XHJcblxyXG5uZXdHYW1lID0gPT5cclxuXHRoaXN0b3J5eCA9IFtdXHJcblx0Z3Vlc3MgPSBcIlwiXHJcblx0Y29tbWFuZCA9IFwiXCJcclxuXHRmYWNpdCA9IF8uc2h1ZmZsZSBTWU1CT0xTLnN1YnN0cmluZyAwLE5cclxuXHRmYWNpdCA9IHBhY2sgZmFjaXQuc2xpY2UgMCxNXHJcblx0Y2FuZHMgPSBudWxsXHJcblx0Q0FORFMgPSBjYW5kaWRhdGVzKE0sTilcclxuXHRpZiBjYW5kaWRhdGVzKE0sTikgPD0gMTAwMDAwMCB0aGVuIGNhbmRzID0gaW5pdCgpXHJcblxyXG5tYWtlQW5zd2VyID0gKGYsZykgPT4gIyBmYWNpdCxndWVzc1xyXG5cdG0gPSBmLmxlbmd0aFxyXG5cdHJlcyA9IFtdXHJcblx0Zm9yIGkgaW4gXy5yYW5nZSBtXHJcblx0XHRmb3IgaiBpbiBfLnJhbmdlIG1cclxuXHRcdFx0aWYgZltpXSA9PSBnW2pdXHJcblx0XHRcdFx0cmVzLnB1c2ggU1lNQk9MU1tNYXRoLmFicyBpLWpdXHJcblx0cmVzLnNvcnQoKVxyXG5cdHBhY2sgcmVzXHJcbmFzc2VydCBcIlwiICAgICAsIG1ha2VBbnN3ZXIgXCIxMjM0XCIsXCI1Njc4XCJcclxuYXNzZXJ0IFwiMFwiICAgICwgbWFrZUFuc3dlciBcIjEyMzRcIixcIjE2NzhcIlxyXG5hc3NlcnQgXCIwMFwiICAgLCBtYWtlQW5zd2VyIFwiMTIzNFwiLFwiMTI3OFwiXHJcbmFzc2VydCBcIjAwMFwiICAsIG1ha2VBbnN3ZXIgXCIxMjM0XCIsXCIxMjM1XCJcclxuYXNzZXJ0IFwiMDAwMFwiICwgbWFrZUFuc3dlciBcIjEyMzRcIixcIjEyMzRcIlxyXG5hc3NlcnQgXCIwMTIzXCIgLCBtYWtlQW5zd2VyIFwiMTIzNFwiLFwiMzI0MVwiXHJcbmFzc2VydCBcIjExMzNcIiAsIG1ha2VBbnN3ZXIgXCIxMjM0XCIsXCI0MzIxXCJcclxuYXNzZXJ0IFwiMjIyMlwiICwgbWFrZUFuc3dlciBcIjEyMzRcIixcIjM0MTJcIlxyXG5hc3NlcnQgXCIzM1wiICAgLCBtYWtlQW5zd2VyIFwiMTIzNFwiLFwiNDU2MVwiXHJcblxyXG5yZWR1Y2UgPSAoY2FuZHMsZ3Vlc3MpID0+XHJcblx0aWYgY2FuZHMgPT0gbnVsbCB0aGVuIHJldHVybiBudWxsXHJcblx0cmVzID0gW11cclxuXHRhbnN3ZXIxID0gbWFrZUFuc3dlciBmYWNpdCxndWVzc1xyXG5cdGZvciBjYW5kIGluIGNhbmRzXHJcblx0XHRhbnN3ZXIyID0gbWFrZUFuc3dlciBjYW5kLCBndWVzc1xyXG5cdFx0aWYgYW5zd2VyMSA9PSBhbnN3ZXIyXHJcblx0XHRcdHJlcy5wdXNoIGNhbmRcclxuXHRyZXNcclxuXHJcbmhhbmRsZUd1ZXNzID0gKGd1ZXNzKSA9PiBcclxuXHRhbnN3ZXIgPSBtYWtlQW5zd2VyIGZhY2l0LGd1ZXNzXHJcblx0Y2FuZHMgPSByZWR1Y2UgY2FuZHMsZ3Vlc3NcclxuXHRoaXN0b3J5eC5wdXNoIFtndWVzcyxhbnN3ZXIsY2FuZHNdXHJcblx0aWYgYW5zd2VyID09ICcwMDAwJyB0aGVuIGhpc3Rvcnl4LnB1c2ggW1wiU29sdmVkIGluICN7aGlzdG9yeXgubGVuZ3RofSBndWVzc2VzIVwiLFwiXCIsW11dXHJcblx0Y29tbWFuZCA9ICcnXHJcbmhhbmRsZXIgPSA9PiBoYW5kbGVHdWVzcyBjb21tYW5kXHJcblxyXG5zZXR1cCA9ID0+XHJcblx0Ym9keS5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nXHJcblx0Ym9keS5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCdcclxuXHRib2R5LnN0eWxlLnRvcCA9ICcwcHgnXHJcblx0Ym9keS5zdHlsZS53aWR0aCA9ICcxMDAlJ1xyXG5cdGNyZWF0ZUNhbnZhcyB3aW5kb3dXaWR0aCwgd2luZG93SGVpZ2h0XHJcblx0YW5nbGVNb2RlIERFR1JFRVNcclxuXHRuZXdHYW1lKClcclxuXHR4ZHJhdygpXHJcblxyXG5pbnRlcnBvbGF0ZSA9ICh4MCx5MCx4MSx5MSx4KSA9PlxyXG5cdGR5ID0geTEteTBcclxuXHRkeCA9IHgxLXgwXHJcblx0ayA9IGR5L2R4XHJcblx0bSA9IHkwLWsqeDBcclxuXHRrKngrbVxyXG5cclxueGRyYXcgPSAtPlxyXG5cdGJhY2tncm91bmQgMTI4XHJcblx0bm9TdHJva2UoKVxyXG5cdGZpbGwgMFxyXG5cclxuXHR4MCA9IHdpZHRoLzIvMVxyXG5cdHgxID0gd2lkdGgvMi8xNlxyXG5cdHkwID0gNjBcclxuXHR5MSA9IDMwXHJcblx0dHMgPSBpbnRlcnBvbGF0ZSB4MCx5MCx4MSx5MSx3aWR0aC8yL01cclxuXHR0ZXh0U2l6ZSB0c1xyXG5cclxuXHR0ZXh0QWxpZ24gTEVGVCxUT1BcclxuXHR0ZXh0IGNvbW1hbmQsNSw1XHJcblxyXG5cdHRleHRBbGlnbiBSSUdIVCxUT1BcclxuXHRmaWxsIDY0KzMyXHJcblx0dGV4dCBDQU5EUyx3aWR0aC01LDVcclxuXHJcblx0dGV4dEFsaWduIExFRlQsQk9UVE9NXHJcblx0dGV4dCBcIiN7TX0gb2YgI3tOfVwiLCA1LGhlaWdodC01XHJcblxyXG5cdGRyYXdUYWJsZSgpXHJcblx0c2hvd0RpYWxvZ3VlKClcclxuXHJcbmRyYXdUYWJsZSA9ID0+XHJcblx0biA9IE1hdGguZmxvb3IgaGVpZ2h0L3RzXHJcblx0biA9IG1heCAwLCBuIC0gMlxyXG5cdGFudGFsID0gbWluIG4sIGhpc3Rvcnl4Lmxlbmd0aFxyXG5cdG9mZnNldCA9IG1heCAwLCBoaXN0b3J5eC5sZW5ndGggLSBuXHJcblxyXG5cdGZvciBpIGluIF8ucmFuZ2UgYW50YWxcclxuXHRcdGggPSBoaXN0b3J5eFtvZmZzZXQgKyBpXVxyXG5cdFx0W2EsYixjXSA9IGhcclxuXHRcdFxyXG5cdFx0dGV4dEFsaWduIExFRlRcclxuXHRcdGZpbGwgMFxyXG5cdFx0dGV4dCBhLDUsNSsoaSsyKSp0c1xyXG5cclxuXHRcdGlmIGNcclxuXHRcdFx0dGV4dEFsaWduIENFTlRFUlxyXG5cdFx0XHRmaWxsIDI1NSwyNTUsMFxyXG5cdFx0XHR0ZXh0IGIsMC41KndpZHRoLDUrKGkrMikqdHNcclxuXHJcblx0XHRcdHRleHRBbGlnbiBSSUdIVFxyXG5cdFx0XHRmaWxsIDY0KzMyXHJcblx0XHRcdHRleHQgYy5sZW5ndGgsd2lkdGgtNSw1KyhpKzIpKnRzXHJcblx0XHRlbHNlXHJcblx0XHRcdHRleHRBbGlnbiBSSUdIVFxyXG5cdFx0XHRmaWxsIDI1NSwyNTUsMFxyXG5cdFx0XHR0ZXh0IGIsd2lkdGgtNSw1KyhpKzIpKnRzXHJcblxyXG5zaG93RGlhbG9ndWUgPSAtPiBpZiBkaWFsb2d1ZXMubGVuZ3RoID4gMCB0aGVuIChfLmxhc3QgZGlhbG9ndWVzKS5zaG93KClcclxuXHJcbm1lbnUxID0gLT4gIyBNYWluIE1lbnVcclxuXHRkaWFsb2d1ZSA9IG5ldyBEaWFsb2d1ZSgpXHJcblx0Zm9yIGNoIGluIFNZTUJPTFMuc3Vic3RyaW5nIDAsTlxyXG5cdFx0ZG8gKGNoKSAtPiBkaWFsb2d1ZS5hZGQgY2gsID0+XHJcblx0XHRcdGRpYWxvZ3VlLmRpc2FibGUgY2hcclxuXHRcdFx0Y29tbWFuZCArPSBjaFxyXG5cdFx0XHRmb3IgYnV0dG9uIGluIGRpYWxvZ3VlLmJ1dHRvbnNcclxuXHRcdFx0XHRpZiBidXR0b24udGl0bGUgPT0gJ2JhY2snIHRoZW4gYnV0dG9uLmFjdGl2ZSA9IGNvbW1hbmQubGVuZ3RoID4gMFxyXG5cdFx0XHRcdGVsc2UgaWYgYnV0dG9uLnRpdGxlID09ICdvaycgdGhlbiBidXR0b24uYWN0aXZlID0gY29tbWFuZC5sZW5ndGggPT0gTVxyXG5cdFx0XHRcdGVsc2UgYnV0dG9uLmFjdGl2ZSA9IGNvbW1hbmQubGVuZ3RoIDwgTSBhbmQgYnV0dG9uLnRpdGxlIG5vdCBpbiBjb21tYW5kXHJcblxyXG5cdGRpYWxvZ3VlLmFkZCAnb2snLCA9PlxyXG5cdFx0aGFuZGxlcigpXHJcblx0XHRkaWFsb2d1ZXMucG9wKClcclxuXHJcblx0ZGlhbG9ndWUuYWRkICdiYWNrJywgPT5cclxuXHRcdGNvbW1hbmQgPSBjb21tYW5kLnN1YnN0cmluZyAwLGNvbW1hbmQubGVuZ3RoLTFcclxuXHRcdGZvciBidXR0b24gaW4gZGlhbG9ndWUuYnV0dG9uc1xyXG5cdFx0XHRpZiBidXR0b24udGl0bGUgPT0gJ2JhY2snIHRoZW4gYnV0dG9uLmFjdGl2ZSA9IGNvbW1hbmQubGVuZ3RoID4gMFxyXG5cdFx0XHRlbHNlIGlmIGJ1dHRvbi50aXRsZSA9PSAnb2snIHRoZW4gYnV0dG9uLmFjdGl2ZSA9IGNvbW1hbmQubGVuZ3RoID09IE1cclxuXHRcdFx0ZWxzZSBpZiBidXR0b24udGl0bGUgbm90IGluIGNvbW1hbmQgdGhlbiBidXR0b24uYWN0aXZlID0gdHJ1ZVxyXG5cdGRpYWxvZ3VlLmRpc2FibGUgJ2JhY2snXHJcblxyXG5cdGJ1dHRvbnMgPSBkaWFsb2d1ZS5idXR0b25zXHJcblx0biA9IGJ1dHRvbnMubGVuZ3RoXHJcblx0YnMgPSBidXR0b25zLnNwbGljZSBuLTIsIDFcclxuXHRidXR0b25zLnNwbGljZSAxLDAsYnNbMF1cclxuXHJcblx0ZGlhbG9ndWUuY2xvY2sgJzAwNScsdHJ1ZVxyXG5cdGRpYWxvZ3VlLmFkZCBcIm5ld1wiLCA9PiBtZW51MigpXHJcblx0YnV0dG9uID0gXy5sYXN0IGRpYWxvZ3VlLmJ1dHRvbnNcclxuXHRidXR0b24ueCA9IHdpZHRoLzItNTBcclxuXHRidXR0b24ueSA9IGhlaWdodC8yLTUwXHJcblx0YnV0dG9uLnIgPSA1MFxyXG5cclxuXHRkaWFsb2d1ZS5kaXNhYmxlICdvaydcclxuXHRpZiBoaXN0b3J5eC5sZW5ndGggPT0gMCBvciBfLmxhc3QoaGlzdG9yeXgpWzJdLmxlbmd0aCA+IDAgdGhlbiBkaWFsb2d1ZS5kaXNhYmxlICduZXcnXHJcblxyXG5cdGRpYWxvZ3VlLnRleHRTaXplICo9IDEuNVxyXG5cclxubWVudTIgPSAtPiAjIG5ldyBHYW1lXHJcblx0ZGlhbG9ndWUgPSBuZXcgRGlhbG9ndWUoKVxyXG5cdGRpYWxvZ3VlLmFkZCAnbmV3JywgPT5cclxuXHRcdG5ld0dhbWUoKVxyXG5cdFx0ZGlhbG9ndWVzLnBvcCgpXHJcblx0XHRkaWFsb2d1ZXMucG9wKClcclxuXHRcdG1lbnUxKClcclxuXHRcdHhkcmF3KClcclxuXHRkaWFsb2d1ZS5hZGQgJy0yJywgPT4gaWYgTiA+IDIgYW5kIE4gPiBNIHRoZW4gTi09MlxyXG5cdGRpYWxvZ3VlLmFkZCAnKzInLCA9PiBpZiBOIDwgU1lNQk9MUy5sZW5ndGggdGhlbiBOKz0yXHJcblx0ZGlhbG9ndWUuYWRkICcrMScsID0+IGlmIE0gPCBOIHRoZW4gTSsrXHJcblx0ZGlhbG9ndWUuYWRkICctMScsID0+IGlmIE0gPiAxIHRoZW4gTS0tXHJcblx0ZGlhbG9ndWUuY2xvY2sgJyAnLHRydWVcclxuXHJcbiMjIyMjI1xyXG5cclxuZG9pdCA9IC0+XHJcblx0aWYgZGlhbG9ndWVzLmxlbmd0aCA+IDBcclxuXHRcdGRpYWxvZ3VlID0gXy5sYXN0IGRpYWxvZ3Vlc1xyXG5cdFx0ZGlhbG9ndWUuZXhlY3V0ZSBtb3VzZVgsbW91c2VZXHJcblx0ZWxzZVxyXG5cdFx0bWVudTEoKVxyXG5cclxubW91c2VSZWxlYXNlZCA9IC0+ICMgdG8gbWFrZSBBbmRyb2lkIHdvcmsgXHJcblx0cmVsZWFzZWQgPSB0cnVlIFxyXG5cdGZhbHNlXHJcblxyXG50b3VjaFN0YXJ0ZWQgPSAtPiBcclxuXHRkb2l0KClcclxuXHR4ZHJhdygpXHJcblxyXG5tb3VzZVByZXNzZWQgPSAtPlxyXG5cdGlmICFyZWxlYXNlZCB0aGVuIHJldHVybiAjIHRvIG1ha2UgQW5kcm9pZCB3b3JrIFxyXG5cdHJlbGVhc2VkID0gZmFsc2VcclxuXHR0b3VjaFN0YXJ0ZWQoKVxyXG4iXX0=
//# sourceURL=c:\github\2021\033-MM5040\coffee\sketch.coffee