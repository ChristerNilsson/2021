// Generated by CoffeeScript 2.5.1
var CANDS, M, N, SYMBOLS, candidates, cands, command, connect, crap, dialogues, doit, drawTable, errors, facit, guess, handleGuess, handler, headers, historyx, init, makeAnswer, menu1, menu2, mousePressed, mouseReleased, newGame, pack, reduce, released, setup, showDialogue, touchStarted, xdraw,
  indexOf = [].indexOf;

SYMBOLS = '0123456789abcdefghij';

M = 4;

N = 10;

CANDS = 0;

command = "";

facit = "";

guess = "";

cands = null;

errors = [];

headers = [];

historyx = [];

dialogues = [];

//backButton = null
//okButton = null
released = true;

crap = (parent, type) => {
  return parent.appendChild(document.createElement(type));
};

connect = (button, handler) => {
  return button.onclick = button.ontouchend = handler;
};

pack = (digits) => {
  return digits.join("");
};

init = () => {
  return _(SYMBOLS.substring(0, N)).permutations(M).map((v) => {
    return _.join(v, '');
  }).value();
};

candidates = (m, n) => {
  return _.reduce(range(n, n - m, -1), (a, b) => {
    return a * b;
  });
};

assert(5040, candidates(4, 10));

assert(11880, candidates(4, 12));

assert(2162160, candidates(6, 14));

assert(518918400, candidates(8, 16));

assert(2432902008176640000, candidates(20, 20));

newGame = () => {
  historyx = [];
  guess = "";
  command = "";
  facit = _.shuffle(SYMBOLS.substring(0, N));
  facit = pack(facit.slice(0, M));
  cands = null;
  CANDS = candidates(M, N);
  if (candidates(M, N) <= 1000000) {
    return cands = init();
  }
};

makeAnswer = (f, g) => { // facit,guess
  var i, j, k, l, len, len1, m, ref, ref1, res;
  m = f.length;
  res = [];
  ref = _.range(m);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    ref1 = _.range(m);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      j = ref1[l];
      if (f[i] === g[j]) {
        res.push(SYMBOLS[Math.abs(i - j)]);
      }
    }
  }
  res.sort();
  return pack(res);
};

assert("", makeAnswer("1234", "5678"));

assert("0", makeAnswer("1234", "1678"));

assert("00", makeAnswer("1234", "1278"));

assert("000", makeAnswer("1234", "1235"));

assert("0000", makeAnswer("1234", "1234"));

assert("0123", makeAnswer("1234", "3241"));

assert("1133", makeAnswer("1234", "4321"));

assert("2222", makeAnswer("1234", "3412"));

assert("33", makeAnswer("1234", "4561"));

reduce = (cands, guess) => {
  var answer1, answer2, cand, k, len, res;
  if (cands === null) {
    return null;
  }
  res = [];
  answer1 = makeAnswer(facit, guess);
  for (k = 0, len = cands.length; k < len; k++) {
    cand = cands[k];
    answer2 = makeAnswer(cand, guess);
    if (answer1 === answer2) {
      res.push(cand);
    }
  }
  return res;
};

handleGuess = (guess) => {
  var answer;
  answer = makeAnswer(facit, guess);
  cands = reduce(cands, guess);
  historyx.push([guess, answer, cands]);
  if (answer === '0000') {
    historyx.push([`Solved in ${historyx.length} guesses!`, "", []]);
  }
  return command = '';
};

handler = () => {
  return handleGuess(command);
};

setup = () => {
  createCanvas(600, 800);
  angleMode(DEGREES);
  newGame();
  return xdraw();
};

xdraw = function() {
  noStroke();
  background(128);
  fill(0);
  textSize(40);
  textAlign(LEFT);
  text(`${M} of ${N}`, 10, height - 10);
  text(command, 50, 40);
  textAlign(RIGHT);
  fill(64 + 32);
  text(CANDS, width - 10, 50);
  textAlign(LEFT);
  drawTable();
  return showDialogue();
};

//text dialogues.length,width/2,height-50
drawTable = () => {
  var a, b, c, h, i, k, len, results, y0;
  y0 = 100;
  results = [];
  for (i = k = 0, len = historyx.length; k < len; i = ++k) {
    h = historyx[i];
    [a, b, c] = h;
    textAlign(LEFT);
    fill(0);
    text(a, 10, y0 + i * 40);
    textAlign(CENTER);
    fill(255, 255, 0);
    text(b, 0.5 * width, y0 + i * 40);
    if (c) {
      textAlign(RIGHT);
      fill(64 + 32);
      results.push(text(c.length, width - 10, y0 + i * 40));
    } else {
      results.push(void 0);
    }
  }
  return results;
};

showDialogue = function() {
  if (dialogues.length > 0) {
    return (_.last(dialogues)).show();
  }
};

menu1 = function() { // Main Menu
  var bs, button, buttons, ch, dialogue, k, len, n, ref;
  dialogue = new Dialogue();
  ref = SYMBOLS.substring(0, N);
  for (k = 0, len = ref.length; k < len; k++) {
    ch = ref[k];
    (function(ch) {
      return dialogue.add(ch, () => {
        var button, l, len1, ref1, ref2, results;
        dialogue.disable(ch);
        command += ch;
        ref1 = dialogue.buttons;
        results = [];
        for (l = 0, len1 = ref1.length; l < len1; l++) {
          button = ref1[l];
          if (button.title === 'back') {
            results.push(button.active = command.length > 0);
          } else if (button.title === 'ok') {
            results.push(button.active = command.length === M);
          } else {
            results.push(button.active = command.length < M && (ref2 = button.title, indexOf.call(command, ref2) < 0));
          }
        }
        return results;
      });
    })(ch);
  }
  dialogue.add('ok', () => {
    handler();
    return dialogues.pop();
  });
  dialogue.add('back', () => {
    var button, l, len1, ref1, ref2, results;
    command = command.substring(0, command.length - 1);
    ref1 = dialogue.buttons;
    results = [];
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      button = ref1[l];
      if (button.title === 'back') {
        results.push(button.active = command.length > 0);
      } else if (button.title === 'ok') {
        results.push(button.active = command.length === M);
      } else if (ref2 = button.title, indexOf.call(command, ref2) < 0) {
        results.push(button.active = true);
      } else {
        results.push(void 0);
      }
    }
    return results;
  });
  dialogue.disable('back');
  buttons = dialogue.buttons;
  n = buttons.length;
  bs = buttons.splice(n - 2, 1);
  buttons.splice(1, 0, bs[0]);
  dialogue.clock('005', true);
  dialogue.add("new", () => {
    return menu2();
  });
  button = _.last(dialogue.buttons);
  button.x = width / 2 - 50;
  button.y = height / 2 - 50;
  button.r = 50;
  dialogue.disable('ok');
  return dialogue.textSize *= 1.5;
};

menu2 = function() { // new Game
  var dialogue;
  dialogue = new Dialogue();
  dialogue.add('new', () => {
    newGame();
    dialogues.pop();
    dialogues.pop();
    menu1();
    return xdraw();
  });
  dialogue.add('-2', () => {
    if (N > 2 && N > M) {
      return N -= 2;
    }
  });
  dialogue.add('+2', () => {
    if (N < SYMBOLS.length) {
      return N += 2;
    }
  });
  dialogue.add('+1', () => {
    if (M < N) {
      return M++;
    }
  });
  dialogue.add('-1', () => {
    if (M > 1) {
      return M--;
    }
  });
  return dialogue.clock(' ', true);
};

//#####
doit = function() {
  var dialogue;
  if (dialogues.length > 0) {
    dialogue = _.last(dialogues);
    return dialogue.execute(mouseX, mouseY);
  } else {
    return menu1();
  }
};

mouseReleased = function() { // to make Android work 
  released = true;
  return false;
};

touchStarted = function() {
  doit();
  return xdraw();
};

mousePressed = function() {
  if (!released) { // to make Android work 
    return;
  }
  released = false;
  doit();
  return xdraw();
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2021\033-MM5040\coffee\sketch.coffee