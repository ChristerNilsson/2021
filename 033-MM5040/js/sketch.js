// Generated by CoffeeScript 2.5.1
var M, N, SYMBOLS, assert, cands, command, div, errors, facit, guess, handleGuess, handler, headers, help, historyx, init, input, keyPressed, log, makeAnswer, newGame, pack, reduce, removeAllChildNodes, setup, show;

SYMBOLS = '0123456789abcdef';

M = 4;

N = 10;

command = "";

facit = "";

guess = "";

cands = [];

errors = [];

headers = [];

historyx = [];

input = null;

div = null;

assert = console.assert;

log = console.log;

pack = (digits) => {
  return digits.join("");
};

init = () => {
  return _(SYMBOLS.substring(0, N)).permutations(M).map((v) => {
    return _.join(v, '');
  }).value();
};

removeAllChildNodes = (parent) => {
  var results;
  results = [];
  while (parent.firstChild) {
    results.push(parent.removeChild(parent.firstChild));
  }
  return results;
};

newGame = (cmds) => {
  historyx = [];
  if (cmds.length > 1) {
    M = parseInt(cmds[1]);
  }
  if (cmds.length > 2) {
    N = parseInt(cmds[2]);
  }
  if (N > 16) {
    errors = ["Second number must be less or equal to 16"];
    show();
    return;
  }
  if (M > 6) {
    errors = ["First number must be less or equal to 6"];
    show();
    return;
  }
  facit = SYMBOLS.substring(0, N);
  facit = _.shuffle(facit);
  facit = pack(facit.slice(0, M));
  guess = "";
  cands = init();
  headers = [];
  headers.push(`Select ${M} unique digits from ${SYMBOLS.substring(0, N)}!`);
  headers.push(`Candidates: ${cands.length}`);
  headers = headers;
  command = "";
  return input.value("");
};

makeAnswer = (f, g) => { // facit,guess
  var i, j, k, l, len, len1, m, ref, ref1, res;
  m = f.length;
  res = [];
  ref = _.range(m);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    ref1 = _.range(m);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      j = ref1[l];
      if (f[i] === g[j]) {
        res.push(Math.abs(i - j));
      }
    }
  }
  res.sort();
  return pack(res);
};

assert("" === makeAnswer("1234", "5678"));

assert("0" === makeAnswer("1234", "1678"));

assert("00" === makeAnswer("1234", "1278"));

assert("000" === makeAnswer("1234", "1235"));

assert("0000" === makeAnswer("1234", "1234"));

assert("0123" === makeAnswer("1234", "3241"));

assert("1133" === makeAnswer("1234", "4321"));

assert("2222" === makeAnswer("1234", "3412"));

assert("33" === makeAnswer("1234", "4561"));

reduce = (cands, guess) => {
  var answer1, answer2, cand, k, len, res;
  res = [];
  answer1 = makeAnswer(facit, guess);
  for (k = 0, len = cands.length; k < len; k++) {
    cand = cands[k];
    answer2 = makeAnswer(cand, guess);
    if (answer1 === answer2) {
      res.push(cand);
    }
  }
  return res;
};

handleGuess = (guess) => {
  var answer;
  if (guess.length !== M || _.uniq(guess).length !== M) {
    if (guess.length > 0) {
      errors = [`Select ${M} unique digits from ${SYMBOLS.substring(0, N)}!`];
    } else {
      errors = [];
    }
    return;
  }
  answer = makeAnswer(facit, guess);
  cands = reduce(cands, guess);
  historyx.push(`${guess} [${answer}] (${cands.length})`);
  if (answer === '0000') {
    historyx.push(`Solved in ${historyx.length} guesses!`);
  }
  historyx = historyx;
  command = '';
  return input.value("");
};

handler = () => {
  var cmds;
  errors = [];
  cmds = command.split(' ');
  if (cmds.length === 0) {
    return errors = [];
  } else if (cmds[0] === 'n') {
    return newGame(cmds);
  } else {
    return handleGuess(cmds[0]);
  }
};

show = function() {
  var d, h, k, l, len, len1, len2, n, results;
  removeAllChildNodes(div.elt);
  for (k = 0, len = errors.length; k < len; k++) {
    h = errors[k];
    d = createDiv(h);
    d.elt.style.color = 'red';
    div.child(d);
  }
  for (l = 0, len1 = headers.length; l < len1; l++) {
    h = headers[l];
    div.child(createDiv(h));
  }
  results = [];
  for (n = 0, len2 = historyx.length; n < len2; n++) {
    h = historyx[n];
    results.push(div.child(createDiv(h)));
  }
  return results;
};

help = () => {
  headers = [];
  headers.push('n = new Game');
  headers.push('n 4 = new Game selecting 4 digits');
  headers.push('n 4 10 = new Game selecting 4 digits from 0123456789');
  return headers.push('Hit enter to continue');
};

setup = () => {
  noCanvas();
  input = createInput(command);
  input.input(() => {
    return command = input.value();
  });
  div = createDiv();
  help();
  return show();
};

keyPressed = function() {
  if (key === 'Enter') {
    handler();
    return show();
  }
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2021\033-MM5040\coffee\sketch.coffee